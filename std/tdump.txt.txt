kind abbreviation type.
kind argument type.
kind argument_mode type.
kind arity type.
kind attribute type.
kind attribute-mapping type.
kind attribute-signature type.
kind attribute-type type.
kind attribute-value type.
kind bool type.
kind class type.
kind class-kind type.
kind clause type.
kind cmp type.
kind coercion type.
kind coercion-status type.
kind constant type.
kind constraint-graph type.
kind constructor type.
kind context-decl type.
kind conversion_strategy type.
kind coq.gref.map type -> type.
kind coq.gref.set type.
kind coq.inline type.
kind coq.option type.
kind coq.pp type.
kind coq.pp.box type.
kind coq.redflag type.
kind coq.redflags type.
kind coq.register type.
kind coq.register.scheme-kind type.
kind coq.univ.map type -> type.
kind coq.univ.set type.
kind coq.univ.variable.map type -> type.
kind coq.univ.variable.set type.
kind cs-instance type.
kind cs-pattern type.
kind cstr-graph.constraint-type type.
kind cstr-graph.node type.
kind diagnostic type.
kind evarkey type.
kind field-attribute type.
kind float type.
kind float64 type.
kind goal type.
kind grafting type.
kind gref type.
kind group type.
kind hint-mode type.
kind implicit_kind type.
kind in_stream type.
kind indc-decl type.
kind indt-decl type.
kind inductive type.
kind int type.
kind list type -> type.
kind loc type.
kind located type.
kind ltac1-tactic type.
kind map-class type.
kind modpath type.
kind modtypath type.
kind module-item type.
kind name type.
kind option type -> type.
kind or type -> type -> type.
kind out_stream type.
kind pair type -> type -> type.
kind param-class type.
kind primitive-value type.
kind projection type.
kind pstring type.
kind record-decl type.
kind safe type.
kind scope type.
kind sealed-goal type.
kind simple-graph type -> type.
kind simplification_strategy type.
kind sort type.
kind std.int.map type -> type.
kind std.int.set type.
kind std.loc.map type -> type.
kind std.loc.set type.
kind std.map type -> type -> type.
kind std.map.private.map type -> type -> type.
kind std.set type -> type.
kind std.set.private.set type -> type.
kind std.string.map type -> type.
kind std.string.set type.
kind string type.
kind synterp-action type.
kind tc-instance type.
kind term type.
kind triple type -> type -> type -> type.
kind uint63 type.
kind univ type.
kind univ-constraint type.
kind univ-instance type.
kind univ-variance type.
kind univ.variable type.
kind unix.process type.
kind upoly-decl type.
kind upoly-decl-cumul type.
kind verbosity type.
kind weakening type.
type ! prop.
type (*) int -> int -> int.
type (*) float -> float -> float.
type (+) int -> int -> int.
type (+) float -> float -> float.
type (,) prop ..-> prop.
type (-) A -> A -> A.
type (/) float -> float -> float.
type (:-) prop -> prop -> prop.
type (:-) prop -> list prop -> prop.
type (::) X -> list X -> list X.
type (;) prop -> prop -> prop.
type (<) A -> A -> prop.
type (=) A -> A -> prop.
type (=<) A -> A -> prop.
type (==) A -> A -> prop.
type (=>) prop -> prop -> prop.
type (=>) list prop -> prop -> prop.
type (>) A -> A -> prop.
type (>=) A -> A -> prop.
type [] list X.
type (^) string -> string -> string.
type (`->) string -> any -> attribute-mapping.
type abs int -> int.
type abs float -> float.
type after id -> grafting.
type all class-kind.
type annot.adecl term -> name -> term -> prop.
type annot.all-classes term -> list param-class -> prop.
type annot.classes term -> list param-class -> option param-class -> prop.
type annot.eq term -> term -> prop.
type annot.out-class term -> option param-class -> prop.
type annot.sub-type term -> term -> prop.
type annot.typecheck term -> term -> prop.
type app list term -> term.
type append-string string -> string -> string -> prop.
type apply-module-functor id -> synterp-action.
type apply-module-type-functor id -> synterp-action.
type arctan float -> float.
type arity term -> arity.
type as A -> A -> A.
type att string -> attribute-type -> attribute-signature.
type att-ignore-unknown attribute-signature.
type attlabel attribute-type.
type attlist attribute-type.
type attmap attribute-type.
type attribute string -> attribute-value -> attribute.
type attributes list attribute -> prop.
type auto univ.variable -> univ-variance.
type before id -> grafting.
type begin-module id -> synterp-action.
type begin-module-type id -> synterp-action.
type begin-section id -> synterp-action.
type bool attribute-type.
type cache term -> term -> prop.
type cache-whd term -> term -> term -> prop.
type calc A -> A -> prop.
type canonical bool -> field-attribute.
type ceil float -> int.
type chr int -> string.
type clause id -> grafting -> prop -> clause.
type close_in in_stream -> prop.
type close_out out_stream -> prop.
type closed_term any -> prop.
type cmp_term any -> any -> cmp -> prop.
type coercion coercion-status -> field-attribute.
type coercion gref -> int -> gref -> class -> coercion.
type const constant -> gref.
type const-decl id -> option term -> arity -> argument.
type constant any -> any ..-> prop.
type constraint-graph std.map class-id 
                        (pair (list cstr-graph.node) (list cstr-graph.node)) ->
                        constraint-graph.
type constructor id -> arity -> indc-decl.
type context-end context-decl.
type context-item id ->
                    implicit_kind ->
                      term ->
                        option term -> (term -> context-decl) -> context-decl.
type copy term -> term -> prop.
type copy-arity arity -> arity -> prop.
type copy-constructor indc-decl -> indc-decl -> prop.
type copy-ctx-item prop -> prop -> prop.
type copy-fields record-decl -> record-decl -> prop.
type copy-indt-decl indt-decl -> indt-decl -> prop.
type copy.subst-weaken term -> term -> prop.
type coq.CS.canonical-projection? constant -> prop.
type coq.CS.canonical-projections inductive -> list (option constant) -> prop.
type coq.CS.db list cs-instance -> prop.
type coq.CS.db-for gref -> cs-pattern -> list cs-instance -> prop.
type coq.CS.declare-instance gref -> prop.
type coq.TC.class? gref -> prop.
type coq.TC.db list tc-instance -> prop.
type coq.TC.db-for gref -> list tc-instance -> prop.
type coq.TC.db-tc list gref -> prop.
type coq.TC.declare-class gref -> prop.
type coq.TC.declare-instance gref -> int -> prop.
type coq.TC.get-inst-prio gref -> gref -> int -> prop.
type coq.any-implicit? list implicit_kind -> prop.
type coq.arguments.implicit gref -> list (list implicit_kind) -> prop.
type coq.arguments.name gref -> list (option id) -> prop.
type coq.arguments.reset-simplification gref -> prop.
type coq.arguments.scope gref -> list (list id) -> prop.
type coq.arguments.set-default-implicit gref -> prop.
type coq.arguments.set-implicit gref -> list (list implicit_kind) -> prop.
type coq.arguments.set-name gref -> list (option id) -> prop.
type coq.arguments.set-scope gref -> list (list id) -> prop.
type coq.arguments.set-simplification gref -> simplification_strategy -> prop.
type coq.arguments.simplification gref ->
                                    option simplification_strategy -> prop.
type coq.arity->implicits arity -> list implicit_kind -> prop.
type coq.arity->nparams arity -> int -> prop.
type coq.arity->pp arity -> coq.pp -> prop.
type coq.arity->sort term -> sort -> prop.
type coq.arity->term arity -> term -> prop.
type coq.begin-synterp-group id -> group -> prop.
type coq.bind-ind-arity term ->
                          term ->
                            (term -> list term -> list term -> term -> prop) ->
                              term -> prop.
type coq.bind-ind-arity-no-let term ->
                                 term ->
                                   (term ->
                                      list term -> list term -> term -> prop) ->
                                     term -> prop.
type coq.bind-ind-arity.aux term ->
                              term ->
                                list term ->
                                  list term ->
                                    term ->
                                      (term ->
                                         list term ->
                                           list term -> term -> prop) -> prop.
type coq.bind-ind-parameters inductive ->
                               (term ->
                                  list term -> list term -> term -> prop) ->
                                 term -> prop.
type coq.bind-ind-parameters.aux int ->
                                   term ->
                                     list term ->
                                       list term ->
                                         (term ->
                                            list term ->
                                              list term -> term -> prop) ->
                                           term -> prop.
type coq.build-indt-decl pair inductive id ->
                           bool ->
                             int ->
                               int ->
                                 term ->
                                   list (pair constructor id) ->
                                     list term -> indt-decl -> prop.
type coq.build-indt-decl-aux pair inductive id ->
                               bool ->
                                 int ->
                                   int ->
                                     term ->
                                       list (pair constructor id) ->
                                         list term ->
                                           list term -> indt-decl -> prop.
type coq.build-match term ->
                       term ->
                         (term -> list term -> list term -> term -> prop) ->
                           (term ->
                              term -> list term -> list term -> term -> prop) ->
                             term -> prop.
type coq.coercion.db list coercion -> prop.
type coq.coercion.db-for class -> class -> list (pair gref int) -> prop.
type coq.coercion.declare coercion -> prop.
type coq.count-prods term -> int -> prop.
type coq.debug any ..-> prop.
type coq.elaborate-arity-skeleton arity ->
                                    sort -> arity -> diagnostic -> prop.
type coq.elaborate-arity-skeleton-nuparams arity ->
                                             int ->
                                               sort ->
                                                 arity -> diagnostic -> prop.
type coq.elaborate-indt-decl-skeleton indt-decl ->
                                        indt-decl -> diagnostic -> prop.
type coq.elaborate-indt-decl-skeleton-c term ->
                                          arity ->
                                            int ->
                                              indc-decl ->
                                                indc-decl ->
                                                  diagnostic -> prop.
type coq.elaborate-indt-decl-skeleton-fields sort ->
                                               record-decl ->
                                                 record-decl ->
                                                   diagnostic -> prop.
type coq.elaborate-skeleton term -> term -> term -> diagnostic -> prop.
type coq.elaborate-ty-skeleton term -> sort -> term -> diagnostic -> prop.
type coq.elpi.accumulate scope -> id -> clause -> prop.
type coq.elpi.accumulate-clauses scope -> id -> list clause -> prop.
type coq.elpi.add-predicate string ->
                              string ->
                                string ->
                                  list (pair argument_mode string) -> prop.
type coq.elpi.predicate string -> list any -> prop -> prop.
type coq.elpi.toposort list (pair A (list A)) -> list A -> prop.
type coq.end-synterp-group group -> prop.
type coq.ensure-fresh-global-id string -> string -> prop.
type coq.env.add-axiom id -> term -> constant -> prop.
type coq.env.add-const id -> term -> term -> opaque? -> constant -> prop.
type coq.env.add-context context-decl -> prop.
type coq.env.add-indt indt-decl -> inductive -> prop.
type coq.env.add-section-variable id ->
                                    implicit_kind -> term -> constant -> prop.
type coq.env.apply-module-functor id ->
                                    option modtypath ->
                                      modpath ->
                                        list modpath ->
                                          coq.inline -> modpath -> prop.
type coq.env.apply-module-type-functor id ->
                                         modtypath ->
                                           list modpath ->
                                             coq.inline -> modtypath -> prop.
type coq.env.begin-module id -> option modtypath -> prop.
type coq.env.begin-module-functor id ->
                                    option modtypath ->
                                      list (pair id modtypath) -> prop.
type coq.env.begin-module-type id -> prop.
type coq.env.begin-module-type-functor id -> list (pair id modtypath) -> prop.
type coq.env.begin-section id -> prop.
type coq.env.const constant -> option term -> term -> prop.
type coq.env.const-body constant -> option term -> prop.
type coq.env.const-opaque? constant -> prop.
type coq.env.const-primitive? constant -> prop.
type coq.env.current-path list string -> prop.
type coq.env.current-section-path list string -> prop.
type coq.env.dependencies gref -> modpath -> coq.gref.set -> prop.
type coq.env.end-module modpath -> prop.
type coq.env.end-module-type modtypath -> prop.
type coq.env.end-section prop.
type coq.env.export-module modpath -> prop.
type coq.env.fresh-global-id id -> id -> prop.
type coq.env.global gref -> term -> prop.
type coq.env.import-module modpath -> prop.
type coq.env.include-module modpath -> coq.inline -> prop.
type coq.env.include-module-type modtypath -> coq.inline -> prop.
type coq.env.indc constructor -> int -> int -> int -> term -> prop.
type coq.env.indc->indt constructor -> inductive -> int -> prop.
type coq.env.indt inductive ->
                    bool ->
                      int ->
                        int -> term -> list constructor -> list term -> prop.
type coq.env.indt-decl inductive -> indt-decl -> prop.
type coq.env.informative? inductive -> prop.
type coq.env.module modpath -> list module-item -> prop.
type coq.env.module-type modtypath -> list id -> prop.
type coq.env.opaque? constant -> prop.
type coq.env.primitive-projection? projection -> constant -> int -> prop.
type coq.env.primitive-projections inductive ->
                                     list (option (pair projection int)) ->
                                       prop.
type coq.env.primitive? constant -> prop.
type coq.env.projection? constant -> int -> prop.
type coq.env.projections inductive -> list (option constant) -> prop.
type coq.env.record? inductive -> bool -> prop.
type coq.env.recursive? inductive -> prop.
type coq.env.section list constant -> prop.
type coq.env.term-dependencies term -> coq.gref.set -> prop.
type coq.env.transitive-dependencies gref -> modpath -> coq.gref.set -> prop.
type coq.env.typeof gref -> term -> prop.
type coq.env.univpoly? gref -> int -> prop.
type coq.error any ..-> prop.
type coq.extra-dep id -> option id -> prop.
type coq.float->float64 float -> float64 -> prop.
type coq.float64->float float64 -> float -> prop.
type coq.fresh-type term -> prop.
type coq.goal->pp goal -> coq.pp -> prop.
type coq.gref->id gref -> id -> prop.
type coq.gref->path gref -> list string -> prop.
type coq.gref->string gref -> string -> prop.
type coq.gref.list->string-map list gref -> std.string.map gref -> prop.
type coq.gref.map.add gref -> A -> coq.gref.map A -> coq.gref.map A -> prop.
type coq.gref.map.bindings coq.gref.map A -> list (pair gref A) -> prop.
type coq.gref.map.empty coq.gref.map A -> prop.
type coq.gref.map.filter coq.gref.map A ->
                           (gref -> A -> prop) -> coq.gref.map A -> prop.
type coq.gref.map.find gref -> coq.gref.map A -> A -> prop.
type coq.gref.map.fold coq.gref.map A ->
                         C -> (gref -> A -> C -> C -> prop) -> C -> prop.
type coq.gref.map.map coq.gref.map A ->
                        (gref -> A -> B -> prop) -> coq.gref.map B -> prop.
type coq.gref.map.mem gref -> coq.gref.map A -> prop.
type coq.gref.map.remove gref -> coq.gref.map A -> coq.gref.map A -> prop.
type coq.gref.set.add gref -> coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.cardinal coq.gref.set -> int -> prop.
type coq.gref.set.choose coq.gref.set -> gref -> prop.
type coq.gref.set.diff coq.gref.set -> coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.elements coq.gref.set -> list gref -> prop.
type coq.gref.set.empty coq.gref.set -> prop.
type coq.gref.set.equal coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.filter coq.gref.set ->
                           (gref -> prop) -> coq.gref.set -> prop.
type coq.gref.set.fold coq.gref.set ->
                         A -> (gref -> A -> A -> prop) -> A -> prop.
type coq.gref.set.inter coq.gref.set -> coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.map coq.gref.set ->
                        (gref -> gref -> prop) -> coq.gref.set -> prop.
type coq.gref.set.max coq.gref.set -> gref -> prop.
type coq.gref.set.mem gref -> coq.gref.set -> prop.
type coq.gref.set.min coq.gref.set -> gref -> prop.
type coq.gref.set.partition coq.gref.set ->
                              (gref -> prop) ->
                                coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.remove gref -> coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.subset coq.gref.set -> coq.gref.set -> prop.
type coq.gref.set.union coq.gref.set -> coq.gref.set -> coq.gref.set -> prop.
type coq.gref.string-map.domain std.string.map gref -> std.string.set -> prop.
type coq.hints.add-mode gref -> string -> list hint-mode -> prop.
type coq.hints.add-resolve gref -> string -> int -> term -> prop.
type coq.hints.modes gref -> string -> list (list hint-mode) -> prop.
type coq.hints.opaque constant -> string -> bool -> prop.
type coq.hints.set-opaque constant -> string -> bool -> prop.
type coq.id->name id -> name -> prop.
type coq.indt-decl->implicits indt-decl ->
                                list implicit_kind ->
                                  list (list implicit_kind) -> prop.
type coq.info any ..-> prop.
type coq.inline.at int -> coq.inline.
type coq.inline.default coq.inline.
type coq.inline.no coq.inline.
type coq.int->uint63 int -> uint63 -> prop.
type coq.is-one-of string -> any -> attribute-mapping -> prop.
type coq.iter-under-fun term ->
                          (term -> list term -> list term -> prop) -> prop.
type coq.locate id -> gref -> prop.
type coq.locate-abbreviation id -> abbreviation -> prop.
type coq.locate-all id -> list located -> prop.
type coq.locate-module id -> modpath -> prop.
type coq.locate-module-type id -> modtypath -> prop.
type coq.ltac string -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.all tactic -> list sealed-goal -> list sealed-goal -> prop.
type coq.ltac.call string ->
                     list argument -> goal -> list sealed-goal -> prop.
type coq.ltac.call-ltac1 any -> goal -> list sealed-goal -> prop.
type coq.ltac.collect-goals term ->
                              list sealed-goal -> list sealed-goal -> prop.
type coq.ltac.fail int -> any ..-> prop.
type coq.ltac.fresh-id id -> term -> id -> prop.
type coq.ltac.id-free? id -> goal -> prop.
type coq.ltac.open open-tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.or list tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.private.distribute-nabla (term -> list sealed-goal) ->
                                         list sealed-goal -> prop.
type coq.ltac.private.move-goal-argument list prop ->
                                           list prop ->
                                             argument -> argument -> prop.
type coq.ltac.private.move-term list prop ->
                                  list prop -> term -> term -> prop.
type coq.ltac.private.not-already-assumed prop -> prop.
type coq.ltac.repeat tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.repeat! tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.set-goal-arguments list argument ->
                                   goal -> sealed-goal -> sealed-goal -> prop.
type coq.ltac.thenl list tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.ltac.try tactic -> sealed-goal -> list sealed-goal -> prop.
type coq.map-under-fun term ->
                         (term -> list term -> list term -> term -> prop) ->
                           term -> prop.
type coq.mk-app term -> list term -> term -> prop.
type coq.mk-app-uvar any -> list term -> term -> prop.
type coq.mk-eta int -> term -> term -> term -> prop.
type coq.mk-n-holes int -> list A -> prop.
type coq.modpath->library modpath -> modpath -> prop.
type coq.modpath->path modpath -> list string -> prop.
type coq.modtypath->library modtypath -> modpath -> prop.
type coq.modtypath->path modtypath -> list string -> prop.
type coq.name->id name -> id -> prop.
type coq.name-suffix name -> any -> name -> prop.
type coq.next-synterp-action synterp-action -> prop.
type coq.notation.abbreviation abbreviation -> list term -> term -> prop.
type coq.notation.abbreviation-body abbreviation -> int -> term -> prop.
type coq.notation.add-abbreviation id ->
                                     int ->
                                       term -> bool -> abbreviation -> prop.
type coq.notation.add-abbreviation-for-tactic string ->
                                                string ->
                                                  list argument -> prop.
type coq.notice any ..-> prop.
type coq.option.add list string -> coq.option -> bool -> prop.
type coq.option.available? list string -> bool -> prop.
type coq.option.bool bool -> coq.option.
type coq.option.get list string -> coq.option -> prop.
type coq.option.int option int -> coq.option.
type coq.option.set list string -> coq.option -> prop.
type coq.option.string option string -> coq.option.
type coq.parse-attributes list attribute ->
                            list attribute-signature -> list prop -> prop.
type coq.pp->string coq.pp -> string -> prop.
type coq.pp.box coq.pp.box -> list coq.pp -> coq.pp.
type coq.pp.brk int -> int -> coq.pp.
type coq.pp.comment list string -> coq.pp.
type coq.pp.empty coq.pp.
type coq.pp.glue list coq.pp -> coq.pp.
type coq.pp.h coq.pp.box.
type coq.pp.hov int -> coq.pp.box.
type coq.pp.hv int -> coq.pp.box.
type coq.pp.nl coq.pp.
type coq.pp.spc coq.pp.
type coq.pp.str string -> coq.pp.
type coq.pp.tag string -> coq.pp -> coq.pp.
type coq.pp.v int -> coq.pp.box.
type coq.primitive.projection-unfolded projection -> projection -> prop.
type coq.prod->fun term -> term -> prop.
type coq.prod-R-fun term -> term -> prop.
type coq.pstring->string pstring -> string -> prop.
type coq.redflags.add coq.redflags ->
                        list coq.redflag -> coq.redflags -> prop.
type coq.redflags.all coq.redflags.
type coq.redflags.allnolet coq.redflags.
type coq.redflags.beta coq.redflag.
type coq.redflags.beta coq.redflags.
type coq.redflags.betadeltazeta coq.redflags.
type coq.redflags.betaiota coq.redflags.
type coq.redflags.betaiotazeta coq.redflags.
type coq.redflags.betazeta coq.redflags.
type coq.redflags.cofix coq.redflag.
type coq.redflags.const constant -> coq.redflag.
type coq.redflags.delta coq.redflag.
type coq.redflags.delta coq.redflags.
type coq.redflags.fix coq.redflag.
type coq.redflags.match coq.redflag.
type coq.redflags.nored coq.redflags.
type coq.redflags.sub coq.redflags ->
                        list coq.redflag -> coq.redflags -> prop.
type coq.redflags.zeta coq.redflag.
type coq.redflags.zeta coq.redflags.
type coq.reduction.cbv.norm term -> term -> prop.
type coq.reduction.cbv.whd_all term -> term -> prop.
type coq.reduction.eta-contract term -> term -> prop.
type coq.reduction.lazy.bi-norm term -> term -> prop.
type coq.reduction.lazy.norm term -> term -> prop.
type coq.reduction.lazy.whd term -> term -> prop.
type coq.reduction.lazy.whd_all term -> term -> prop.
type coq.reduction.native.available? prop.
type coq.reduction.native.norm term -> term -> term -> prop.
type coq.reduction.vm.norm term -> term -> term -> prop.
type coq.reduction.vm.whd_all term -> term -> term -> prop.
type coq.register gref -> coq.register -> prop.
type coq.register.inline coq.register.
type coq.register.lib string -> coq.register.
type coq.register.scheme gref -> coq.register.scheme-kind -> coq.register.
type coq.register.scheme.beq coq.register.scheme-kind.
type coq.register.scheme.case_dep coq.register.scheme-kind.
type coq.register.scheme.case_nodep coq.register.scheme-kind.
type coq.register.scheme.casep_dep coq.register.scheme-kind.
type coq.register.scheme.casep_nodep coq.register.scheme-kind.
type coq.register.scheme.congr coq.register.scheme-kind.
type coq.register.scheme.dec_bl coq.register.scheme-kind.
type coq.register.scheme.dec_lb coq.register.scheme-kind.
type coq.register.scheme.eq_dec coq.register.scheme-kind.
type coq.register.scheme.ind_dep coq.register.scheme-kind.
type coq.register.scheme.ind_nodep coq.register.scheme-kind.
type coq.register.scheme.other string -> coq.register.scheme-kind.
type coq.register.scheme.rec_dep coq.register.scheme-kind.
type coq.register.scheme.rec_nodep coq.register.scheme-kind.
type coq.register.scheme.rect_dep coq.register.scheme-kind.
type coq.register.scheme.rect_nodep coq.register.scheme-kind.
type coq.register.scheme.rew coq.register.scheme-kind.
type coq.register.scheme.rew_dep coq.register.scheme-kind.
type coq.register.scheme.rew_fwd_dep coq.register.scheme-kind.
type coq.register.scheme.rew_fwd_r_dep coq.register.scheme-kind.
type coq.register.scheme.rew_r coq.register.scheme-kind.
type coq.register.scheme.rew_r_dep coq.register.scheme-kind.
type coq.register.scheme.sind_dep coq.register.scheme-kind.
type coq.register.scheme.sind_nodep coq.register.scheme-kind.
type coq.register.scheme.sym_internal coq.register.scheme-kind.
type coq.register.scheme.sym_involutive coq.register.scheme-kind.
type coq.rename-arity (id -> id -> prop) -> arity -> arity -> prop.
type coq.rename-indt-decl (id -> id -> prop) ->
                            (id -> id -> prop) ->
                              (id -> id -> prop) ->
                                indt-decl -> indt-decl -> prop.
type coq.rename-indt-decl.aux (id -> id -> prop) ->
                                (id -> id -> prop) ->
                                  (id -> id -> prop) ->
                                    indc-decl -> indc-decl -> prop.
type coq.replay-next-synterp-actions prop.
type coq.replay-synterp-action synterp-action -> prop.
type coq.replay-synterp-action-group id -> prop.
type coq.safe-dest-app term -> term -> list term -> prop.
type coq.saturate term -> term -> term -> prop.
type coq.say any ..-> prop.
type coq.sigma.print prop.
type coq.sort.eq sort -> sort -> prop.
type coq.sort.leq sort -> sort -> prop.
type coq.sort.pts-triple sort -> sort -> sort -> prop.
type coq.sort.sup sort -> sort -> prop.
type coq.sort? term -> prop.
type coq.strategy.get constant -> conversion_strategy -> prop.
type coq.strategy.set list constant -> conversion_strategy -> prop.
type coq.string->name string -> name -> prop.
type coq.string->pstring string -> pstring -> prop.
type coq.subst-fun list term -> term -> term -> prop.
type coq.subst-prod list term -> term -> term -> prop.
type coq.term->arity term -> int -> arity -> prop.
type coq.term->gref term -> gref -> prop.
type coq.term->pp term -> coq.pp -> prop.
type coq.term->string term -> string -> prop.
type coq.typecheck term -> term -> diagnostic -> prop.
type coq.typecheck-attribute string ->
                               attribute-type ->
                                 string -> any -> diagnostic -> prop.
type coq.typecheck-indc-arity arity ->
                                int -> term -> sort -> diagnostic -> prop.
type coq.typecheck-indt-arity arity -> term -> int -> diagnostic -> prop.
type coq.typecheck-indt-decl indt-decl -> diagnostic -> prop.
type coq.typecheck-indt-decl-c term ->
                                 term ->
                                   int -> indc-decl -> diagnostic -> prop.
type coq.typecheck-indt-decl-c.unify-arity term ->
                                             int ->
                                               arity ->
                                                 arity -> diagnostic -> prop.
type coq.typecheck-indt-decl-c.unify-arrow-tgt term ->
                                                 int ->
                                                   term ->
                                                     term ->
                                                       diagnostic -> prop.
type coq.typecheck-indt-decl-field term -> record-decl -> term -> prop.
type coq.typecheck-indt-decl.heuristic-var-type term -> diagnostic -> prop.
type coq.typecheck-ty term -> sort -> diagnostic -> prop.
type coq.uint63->int uint63 -> int -> prop.
type coq.unify-eq term -> term -> diagnostic -> prop.
type coq.unify-leq term -> term -> diagnostic -> prop.
type coq.univ id -> univ -> prop.
type coq.univ-instance univ-instance -> list univ.variable -> prop.
type coq.univ-instance.unify-eq gref ->
                                  univ-instance ->
                                    univ-instance -> diagnostic -> prop.
type coq.univ-instance.unify-leq gref ->
                                   univ-instance ->
                                     univ-instance -> diagnostic -> prop.
type coq.univ.alg-max univ -> univ -> univ -> prop.
type coq.univ.alg-super univ -> univ -> prop.
type coq.univ.constraints list univ-constraint -> prop.
type coq.univ.global? univ -> prop.
type coq.univ.map.add univ -> A -> coq.univ.map A -> coq.univ.map A -> prop.
type coq.univ.map.bindings coq.univ.map A -> list (pair univ A) -> prop.
type coq.univ.map.empty coq.univ.map A -> prop.
type coq.univ.map.filter coq.univ.map A ->
                           (univ -> A -> prop) -> coq.univ.map A -> prop.
type coq.univ.map.find univ -> coq.univ.map A -> A -> prop.
type coq.univ.map.fold coq.univ.map A ->
                         C -> (univ -> A -> C -> C -> prop) -> C -> prop.
type coq.univ.map.map coq.univ.map A ->
                        (univ -> A -> B -> prop) -> coq.univ.map B -> prop.
type coq.univ.map.mem univ -> coq.univ.map A -> prop.
type coq.univ.map.remove univ -> coq.univ.map A -> coq.univ.map A -> prop.
type coq.univ.new univ -> prop.
type coq.univ.print prop.
type coq.univ.set.add univ -> coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.cardinal coq.univ.set -> int -> prop.
type coq.univ.set.choose coq.univ.set -> univ -> prop.
type coq.univ.set.diff coq.univ.set -> coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.elements coq.univ.set -> list univ -> prop.
type coq.univ.set.empty coq.univ.set -> prop.
type coq.univ.set.equal coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.filter coq.univ.set ->
                           (univ -> prop) -> coq.univ.set -> prop.
type coq.univ.set.fold coq.univ.set ->
                         A -> (univ -> A -> A -> prop) -> A -> prop.
type coq.univ.set.inter coq.univ.set -> coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.map coq.univ.set ->
                        (univ -> univ -> prop) -> coq.univ.set -> prop.
type coq.univ.set.max coq.univ.set -> univ -> prop.
type coq.univ.set.mem univ -> coq.univ.set -> prop.
type coq.univ.set.min coq.univ.set -> univ -> prop.
type coq.univ.set.partition coq.univ.set ->
                              (univ -> prop) ->
                                coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.remove univ -> coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.subset coq.univ.set -> coq.univ.set -> prop.
type coq.univ.set.union coq.univ.set -> coq.univ.set -> coq.univ.set -> prop.
type coq.univ.variable univ -> univ.variable -> prop.
type coq.univ.variable.constraints univ.variable ->
                                     list univ-constraint -> prop.
type coq.univ.variable.map.add univ.variable ->
                                 A ->
                                   coq.univ.variable.map A ->
                                     coq.univ.variable.map A -> prop.
type coq.univ.variable.map.bindings coq.univ.variable.map A ->
                                      list (pair univ.variable A) -> prop.
type coq.univ.variable.map.empty coq.univ.variable.map A -> prop.
type coq.univ.variable.map.filter coq.univ.variable.map A ->
                                    (univ.variable -> A -> prop) ->
                                      coq.univ.variable.map A -> prop.
type coq.univ.variable.map.find univ.variable ->
                                  coq.univ.variable.map A -> A -> prop.
type coq.univ.variable.map.fold coq.univ.variable.map A ->
                                  C ->
                                    (univ.variable -> A -> C -> C -> prop) ->
                                      C -> prop.
type coq.univ.variable.map.map coq.univ.variable.map A ->
                                 (univ.variable -> A -> B -> prop) ->
                                   coq.univ.variable.map B -> prop.
type coq.univ.variable.map.mem univ.variable ->
                                 coq.univ.variable.map A -> prop.
type coq.univ.variable.map.remove univ.variable ->
                                    coq.univ.variable.map A ->
                                      coq.univ.variable.map A -> prop.
type coq.univ.variable.of-term term -> coq.univ.variable.set -> prop.
type coq.univ.variable.set.add univ.variable ->
                                 coq.univ.variable.set ->
                                   coq.univ.variable.set -> prop.
type coq.univ.variable.set.cardinal coq.univ.variable.set -> int -> prop.
type coq.univ.variable.set.choose coq.univ.variable.set ->
                                    univ.variable -> prop.
type coq.univ.variable.set.diff coq.univ.variable.set ->
                                  coq.univ.variable.set ->
                                    coq.univ.variable.set -> prop.
type coq.univ.variable.set.elements coq.univ.variable.set ->
                                      list univ.variable -> prop.
type coq.univ.variable.set.empty coq.univ.variable.set -> prop.
type coq.univ.variable.set.equal coq.univ.variable.set ->
                                   coq.univ.variable.set -> prop.
type coq.univ.variable.set.filter coq.univ.variable.set ->
                                    (univ.variable -> prop) ->
                                      coq.univ.variable.set -> prop.
type coq.univ.variable.set.fold coq.univ.variable.set ->
                                  A ->
                                    (univ.variable -> A -> A -> prop) ->
                                      A -> prop.
type coq.univ.variable.set.inter coq.univ.variable.set ->
                                   coq.univ.variable.set ->
                                     coq.univ.variable.set -> prop.
type coq.univ.variable.set.map coq.univ.variable.set ->
                                 (univ.variable -> univ.variable -> prop) ->
                                   coq.univ.variable.set -> prop.
type coq.univ.variable.set.max coq.univ.variable.set -> univ.variable -> prop.
type coq.univ.variable.set.mem univ.variable -> coq.univ.variable.set -> prop.
type coq.univ.variable.set.min coq.univ.variable.set -> univ.variable -> prop.
type coq.univ.variable.set.partition coq.univ.variable.set ->
                                       (univ.variable -> prop) ->
                                         coq.univ.variable.set ->
                                           coq.univ.variable.set -> prop.
type coq.univ.variable.set.remove univ.variable ->
                                    coq.univ.variable.set ->
                                      coq.univ.variable.set -> prop.
type coq.univ.variable.set.subset coq.univ.variable.set ->
                                    coq.univ.variable.set -> prop.
type coq.univ.variable.set.union coq.univ.variable.set ->
                                   coq.univ.variable.set ->
                                     coq.univ.variable.set -> prop.
type coq.upoly-decl->attribute any -> prop -> prop.
type coq.upoly-decl-cumul.complete-constraints upoly-decl-cumul ->
                                                 upoly-decl-cumul -> prop.
type coq.upoly-decl-cumul.complete-constraints.aux univ-variance ->
                                                     list univ-constraint ->
                                                       prop.
type coq.upoly-decl.complete-constraints upoly-decl -> upoly-decl -> prop.
type coq.valid-loc-attribute string -> loc -> diagnostic -> prop.
type coq.valid-str-attribute string ->
                               string -> option any -> diagnostic -> prop.
type coq.version string -> int -> int -> int -> prop.
type coq.warn any ..-> prop.
type coq.warning string -> string -> any ..-> prop.
type coq.with-TC term -> (tc-instance -> prop -> prop) -> prop -> prop.
type cos float -> float.
type counter string -> int -> prop.
type covariant univ.variable -> univ-variance.
type cs-default cs-pattern.
type cs-gref gref -> cs-pattern.
type cs-instance gref -> cs-pattern -> gref -> cs-instance.
type cs-prod cs-pattern.
type cs-sort sort -> cs-pattern.
type cstr-graph.add-dep-arrow class-id ->
                                class-id ->
                                  class-id ->
                                    constraint-graph ->
                                      constraint-graph -> prop.
type cstr-graph.add-dep-gref class-id ->
                               gref ->
                                 term ->
                                   term ->
                                     gref ->
                                       list class-id ->
                                         constraint-graph ->
                                           constraint-graph -> prop.
type cstr-graph.add-dep-pi class-id ->
                             class-id ->
                               class-id ->
                                 constraint-graph -> constraint-graph -> prop.
type cstr-graph.add-dep-type class-id ->
                               class-id ->
                                 constraint-graph -> constraint-graph -> prop.
type cstr-graph.add-geq or class-id param-class ->
                          or class-id param-class ->
                            constraint-graph -> constraint-graph -> prop.
type cstr-graph.ct.arrow cstr-graph.constraint-type.
type cstr-graph.ct.geq cstr-graph.constraint-type.
type cstr-graph.ct.gref gref ->
                          term -> term -> gref -> cstr-graph.constraint-type.
type cstr-graph.ct.pi cstr-graph.constraint-type.
type cstr-graph.ct.type cstr-graph.constraint-type.
type cstr-graph.empty constraint-graph -> prop.
type cstr-graph.instantiate class-id ->
                              param-class ->
                                constraint-graph -> constraint-graph -> prop.
type cstr-graph.instantiate.aux class-id ->
                                  param-class ->
                                    cstr-graph.node ->
                                      cstr-graph.constraint-graph-content ->
                                        cstr-graph.constraint-graph-content ->
                                          prop.
type cstr-graph.instantiate.gref list class-id ->
                                   list param-class ->
                                     list param-class ->
                                       cstr-graph.constraint-graph-content ->
                                         cstr-graph.constraint-graph-content ->
                                           prop.
type cstr-graph.instantiation-order list class-id ->
                                      constraint-graph ->
                                        list class-id -> prop.
type cstr-graph.internal.add-higher-node cstr-graph.node ->
                                           option
                                             (pair (list cstr-graph.node) 
                                                (list cstr-graph.node)) ->
                                             option
                                               (pair (list cstr-graph.node) 
                                                  (list cstr-graph.node)) ->
                                               prop.
type cstr-graph.internal.add-lower-node cstr-graph.node ->
                                          option
                                            (pair (list cstr-graph.node) 
                                               (list cstr-graph.node)) ->
                                            option
                                              (pair (list cstr-graph.node) 
                                                 (list cstr-graph.node)) ->
                                              prop.
type cstr-graph.internal.filter-const list cstr-graph.node ->
                                        list param-class -> prop.
type cstr-graph.internal.filter-var list cstr-graph.node ->
                                      list class-id -> prop.
type cstr-graph.internal.remove-higher-node cstr-graph.node ->
                                              option
                                                (pair (list cstr-graph.node) 
                                                   (list cstr-graph.node)) ->
                                                option
                                                  (pair
                                                     (list cstr-graph.node) 
                                                     (list cstr-graph.node)) ->
                                                  prop.
type cstr-graph.internal.remove-lower-node cstr-graph.node ->
                                             option
                                               (pair (list cstr-graph.node) 
                                                  (list cstr-graph.node)) ->
                                               option
                                                 (pair
                                                    (list cstr-graph.node) 
                                                    (list cstr-graph.node)) ->
                                                 prop.
type cstr-graph.internal.to-precedence-graph list class-id ->
                                               constraint-graph ->
                                                 simple-graph class-id ->
                                                   prop.
type cstr-graph.internal.to-precedence-graph.aux pair class-id 
                                                   (pair
                                                      (list cstr-graph.node) 
                                                      (list cstr-graph.node)) ->
                                                   simple-graph int ->
                                                     simple-graph int -> prop.
type cstr-graph.internal.to-precedence-graph.aux2 class-id ->
                                                    cstr-graph.node ->
                                                      simple-graph int ->
                                                        simple-graph int ->
                                                          prop.
type cstr-graph.maximal-class class-id ->
                                constraint-graph -> param-class -> prop.
type cstr-graph.minimal-class class-id ->
                                constraint-graph -> param-class -> prop.
type cstr-graph.node.const param-class -> cstr-graph.node.
type cstr-graph.node.var cstr-graph.constraint-type ->
                           list class-id -> cstr-graph.node.
type cstr-graph.pp constraint-graph -> prop.
type cstr-graph.pp.aux pair class-id 
                         (pair (list cstr-graph.node) (list cstr-graph.node)) ->
                         prop.
type cstr.dep-arrow param-class -> param-class -> param-class -> prop.
type cstr.dep-gref gref -> term -> term -> gref -> prop.
type cstr.dep-pi param-class -> param-class -> param-class -> prop.
type cstr.dep-type param-class -> param-class -> prop.
type cstr.eq param-class -> param-class -> prop.
type cstr.geq param-class -> param-class -> prop.
type cstr.init prop.
type cstr.internal.c.db list prop -> prop.
type cstr.internal.c.dep-arrow class-id -> class-id -> class-id -> prop.
type cstr.internal.c.dep-gref class-id ->
                                gref ->
                                  term ->
                                    term -> gref -> list class-id -> prop.
type cstr.internal.c.dep-pi class-id -> class-id -> class-id -> prop.
type cstr.internal.c.dep-type class-id -> class-id -> prop.
type cstr.internal.c.geq or class-id param-class ->
                           or class-id param-class -> prop.
type cstr.internal.c.graph constraint-graph -> prop.
type cstr.internal.c.link param-class -> class-id -> prop.
type cstr.internal.c.link- param-class -> class-id -> prop.
type cstr.internal.c.link? param-class -> class-id -> prop.
type cstr.internal.c.reduce-graph prop.
type cstr.internal.c.univ-link param-class -> term -> term -> prop.
type cstr.internal.c.univ-link- param-class -> term -> term -> prop.
type cstr.internal.c.univ-link? param-class -> term -> term -> prop.
type cstr.internal.c.vars list class-id -> prop.
type cstr.internal.c.vars! list class-id -> prop.
type cstr.internal.c.vars? list class-id -> prop.
type cstr.internal.instantiate-coq pair class-id param-class -> prop.
type cstr.internal.link- param-class -> class-id -> prop.
type cstr.internal.link? param-class -> class-id -> prop.
type cstr.internal.reduce list class-id ->
                            constraint-graph ->
                              list (pair class-id param-class) -> prop.
type cstr.internal.univ-link- param-class -> term -> term -> prop.
type cstr.internal.vars! list class-id -> prop.
type cstr.internal.vars? list class-id -> prop.
type cstr.local-db list prop -> prop.
type cstr.reduce-graph prop.
type cstr.univ-link param-class -> term -> term -> prop.
type ctx-decl context-decl -> argument.
type current scope.
type decl term -> name -> term -> prop.
type declare-evar list prop -> term -> term -> term -> prop.
type declare_constraint any -> any -> any ..-> prop.
type def term -> name -> term -> term -> prop.
type distinct_names list any -> prop.
type (div) int -> int -> int.
type do-not-fail prop.
type dprint any ..-> prop.
type end-module modpath -> synterp-action.
type end-module-type modtypath -> synterp-action.
type end-record record-decl.
type end-section synterp-action.
type eof in_stream -> prop.
type eq cmp.
type eq univ.variable -> univ.variable -> univ-constraint.
type error string -> diagnostic.
type evar term -> term -> term -> prop.
type execution-site scope.
type expand conversion_strategy.
type explicit implicit_kind.
type export-module modpath -> synterp-action.
type fail prop.
type false prop.
type ff bool.
type field field-attributes ->
             id -> term -> (term -> record-decl) -> record-decl.
type findall_solutions prop -> list prop -> prop.
type fix name -> int -> term -> (term -> term) -> term.
type fix-red (term -> term) ->
               term ->
                 list term ->
                   constructor ->
                     list term -> list term -> term -> stack -> prop.
type float64 float64 -> primitive-value.
type floor float -> int.
type flush out_stream -> prop.
type fold-map term -> A -> term -> A -> prop.
type fold-map-arity arity -> A -> arity -> A -> prop.
type fold-map-ctx-item prop -> A -> prop -> A -> prop.
type fresh-type prop.
type fst pair A B -> A -> prop.
type fun name -> term -> (term -> term) -> term.
type funclass class.
type gc.compact prop.
type gc.full prop.
type gc.get int -> int -> int -> int -> int -> int -> int -> int -> prop.
type gc.major prop.
type gc.minor prop.
type gc.quick-stat float ->
                     float ->
                       float ->
                         int ->
                           int -> int -> int -> int -> int -> int -> prop.
type gc.set int -> int -> int -> int -> int -> int -> int -> int -> prop.
type gc.stat float ->
               float ->
                 float ->
                   int ->
                     int ->
                       int ->
                         int ->
                           int ->
                             int ->
                               int ->
                                 int ->
                                   int -> int -> int -> int -> int -> prop.
type ge_ A -> A -> prop.
type get-option string -> A -> prop.
type getenv string -> option string -> prop.
type gettimeofday float -> prop.
type global gref -> term.
type goal goal-ctx -> term -> term -> term -> list argument -> goal.
type gref gref -> module-item.
type grefclass gref -> class.
type ground_term any -> prop.
type gt cmp.
type gt_ A -> A -> prop.
type hack-8-17.propagate-Prop-constraint-inward term -> prop.
type halt any ..-> prop.
type hd-beta term -> stack -> term -> stack -> prop.
type hd-beta-zeta term -> stack -> term -> stack -> prop.
type hd-beta-zeta-reduce term -> term -> prop.
type high class-kind.
type (i+) int -> int -> int.
type (i-) int -> int -> int.
type (i<) int -> int -> prop.
type (i=<) int -> int -> prop.
type (i>) int -> int -> prop.
type (i>=) int -> int -> prop.
type iabs int -> int.
type if prop -> prop -> prop -> prop.
type if2 prop -> prop -> prop -> prop -> prop -> prop.
type implicit implicit_kind.
type import-module modpath -> synterp-action.
type in argument_mode.
type include-module modpath -> synterp-action.
type include-module-type modtypath -> synterp-action.
type indc constructor -> gref.
type indt inductive -> gref.
type indt-decl indt-decl -> argument.
type inductive id -> bool -> arity -> (term -> list indc-decl) -> indt-decl.
type inl A -> or A B.
type input in_stream -> int -> string -> prop.
type input_line in_stream -> string -> prop.
type inr B -> or A B.
type int attribute-type.
type int int -> argument.
type int_to_real int -> float.
type int_to_string int -> string.
type invariant univ.variable -> univ-variance.
type irrelevant univ.variable -> univ-variance.
type (is) A -> A -> prop.
type (is_cdata) any -> string -> prop.
type iter-under-fun.aux term ->
                          list term ->
                            list term ->
                              (term -> list term -> list term -> prop) ->
                                prop.
type (i~) int -> int.
type keep-only-label attribute -> attribute -> prop.
type known->gref prop -> prop -> prop.
type le univ.variable -> univ.variable -> univ-constraint.
type le_ A -> A -> prop.
type leaf-loc loc -> attribute-value.
type leaf-str string -> attribute-value.
type let name -> term -> term -> (term -> term) -> term.
type level int -> conversion_strategy.
type level.debug verbosity.
type level.info verbosity.
type level.off verbosity.
type level.trace verbosity.
type library scope.
type ln float -> float.
type load-rel gref -> list prop -> prop.
type load-rels list gref -> list prop -> prop.
type loc attribute-type.
type loc-abbreviation abbreviation -> located.
type loc-gref gref -> located.
type loc-modpath modpath -> located.
type loc-modtypath modtypath -> located.
type loc.fields loc -> string -> int -> int -> int -> int -> prop.
type log-level verbosity -> prop.
type logging.debug prop -> prop.
type logging.info prop -> prop.
type logging.trace prop -> prop.
type lookahead in_stream -> string -> prop.
type low class-kind.
type lt cmp.
type lt univ.variable -> univ.variable -> univ-constraint.
type lt_ A -> A -> prop.
type main list argument -> prop.
type main-interp list argument -> any -> prop.
type main-synterp list argument -> any -> prop.
type map-class.add-2-suffix string ->
                              map-class ->
                                map-class -> string -> string -> prop.
type map-class.add-suffix map-class -> string -> string -> prop.
type map-class.all-of-kind class-kind -> list map-class -> prop.
type map-class.all-weakenings-from map-class -> list map-class -> prop.
type map-class.cofields map-class -> list string -> prop.
type map-class.dep-arrow map-class -> param-class -> param-class -> prop.
type map-class.dep-pi map-class -> param-class -> param-class -> prop.
type map-class.fields map-class -> list string -> prop.
type map-class.geq map-class -> map-class -> prop.
type map-class.inter map-class -> map-class -> map-class -> prop.
type map-class.product list map-class ->
                         list map-class -> list param-class -> prop.
type map-class.to_string map-class -> string -> prop.
type map-class.union map-class -> map-class -> map-class -> prop.
type map-class.weakenings-from map-class -> list map-class -> prop.
type map-class.weakenings-to map-class -> list map-class -> prop.
type map-under-fun.aux term ->
                         list term ->
                           list term ->
                             (term -> list term -> list term -> term -> prop) ->
                               term -> prop.
type map0 map-class.
type map1 map-class.
type map2a map-class.
type map2b map-class.
type map3 map-class.
type map4 map-class.
type match term -> term -> list term -> term.
type match-red constructor ->
                 list term -> list term -> stack -> term -> stack -> prop.
type max int -> int -> int.
type max float -> float -> float.
type maximal implicit_kind.
type min int -> int -> int.
type min float -> float -> float.
type (mod) int -> int -> int.
type (mode-ground) hint-mode.
type (mode-input) hint-mode.
type (mode-output) hint-mode.
type (module-functor) modpath -> list modtypath -> module-item.
type (module-type) modtypath -> module-item.
type (module-type-functor) modtypath -> list modtypath -> module-item.
type msolve list sealed-goal -> list sealed-goal -> prop.
type nabla (term -> sealed-goal) -> sealed-goal.
type name any -> any ..-> prop.
type names list any -> prop.
type never simplification_strategy.
type new_int int -> prop.
type new_safe safe -> prop.
type node list attribute -> attribute-value.
type none option A.
type not prop -> prop.
type nth-stack int -> stack -> stack -> term -> stack -> prop.
type occurs any -> any -> prop.
type of term -> term -> term -> prop.
type off coercion-status.
type ok diagnostic.
type oneof list attribute-mapping -> attribute-type.
type opaque conversion_strategy.
type open-trm int -> term -> argument.
type open_append string -> out_stream -> prop.
type open_in string -> in_stream -> prop.
type open_out string -> out_stream -> prop.
type open_safe safe -> list A -> prop.
type open_string string -> in_stream -> prop.
type out argument_mode.
type output out_stream -> string -> prop.
type param term -> term -> term -> term -> prop.
type param-class.add-2-suffix string ->
                                param-class ->
                                  param-class -> string -> string -> prop.
type param-class.add-suffix param-class -> string -> string -> prop.
type param-class.all-of-kind class-kind -> list param-class -> prop.
type param-class.all-weakenings-from param-class -> list param-class -> prop.
type param-class.dep-arrow param-class -> param-class -> param-class -> prop.
type param-class.dep-pi param-class -> param-class -> param-class -> prop.
type param-class.forget param-class ->
                          param-class ->
                            (univ-instance -> term -> term -> term -> term) ->
                              prop.
type param-class.geq param-class -> param-class -> prop.
type param-class.inter param-class -> param-class -> param-class -> prop.
type param-class.negate param-class -> param-class -> prop.
type param-class.replace-out-ty param-class -> term -> term -> prop.
type param-class.requires-axiom param-class -> prop.
type param-class.to-string param-class -> string -> prop.
type param-class.to_string param-class -> string -> prop.
type param-class.type->class term -> list param-class -> list term -> prop.
type param-class.type->classes term ->
                                 param-class ->
                                   list param-class -> gref -> gref -> prop.
type param-class.type->classes.main term ->
                                      list param-class ->
                                        list param-class ->
                                          gref -> gref -> prop.
type param-class.type->classes.rec term ->
                                     list param-class ->
                                       list param-class -> prop.
type param-class.union param-class -> param-class -> param-class -> prop.
type param-class.weaken-out param-class -> gref -> term -> prop.
type param-class.weakenings-from param-class -> list param-class -> prop.
type param-class.weakenings-to param-class -> list param-class -> prop.
type param.args term ->
                  term ->
                    list term ->
                      list term -> list term -> (term -> term) -> prop.
type param.store term -> term -> term -> term -> prop.
type param.subst-weaken term -> term -> prop.
type parameter id -> implicit_kind -> term -> (term -> arity) -> arity.
type parameter id ->
                 implicit_kind -> term -> (term -> indt-decl) -> indt-decl.
type parse-attributes.aux list attribute -> string -> list prop -> prop.
type pc map-class -> map-class -> param-class.
type pglobal gref -> univ-instance -> term.
type pi (A -> prop) -> prop.
type pr A -> B -> pair A B.
type primitive primitive-value -> term.
type primitive? A -> string -> prop.
type print any ..-> prop.
type print_constraints prop.
type printterm out_stream -> A -> prop.
type prod name -> term -> (term -> term) -> term.
type proj projection -> int -> primitive-value.
type proj-red list term -> int -> stack -> term -> stack -> prop.
type prop sort.
type prune any -> list any -> prop.
type pstring pstring -> primitive-value.
type (r+) float -> float -> float.
type (r-) float -> float -> float.
type (r<) float -> float -> prop.
type (r=<) float -> float -> prop.
type (r>) float -> float -> prop.
type (r>=) float -> float -> prop.
type rabs float -> float.
type random.init int -> prop.
type random.int int -> int -> prop.
type random.self_init prop.
type real_to_string float -> string.
type record id -> term -> id -> record-decl -> indt-decl.
type refine term -> goal -> list sealed-goal -> prop.
type refine.elaborate term -> goal -> list sealed-goal -> prop.
type refine.no_check term -> goal -> list sealed-goal -> prop.
type refine.typecheck term -> goal -> list sealed-goal -> prop.
type regular coercion-status.
type remove id -> grafting.
type replace id -> grafting.
type reversible coercion-status.
type rex.match string -> string -> prop.
type rex.replace string -> string -> string -> string -> prop.
type rex.split string -> string -> list string -> prop.
type rex_match string -> string -> prop.
type rex_replace string -> string -> string -> string -> prop.
type rex_split string -> string -> list string -> prop.
type rhc string -> int.
type rm-evar term -> term -> prop.
type (r~) float -> float.
type (s<) string -> string -> prop.
type (s=<) string -> string -> prop.
type (s>) string -> string -> prop.
type (s>=) string -> string -> prop.
type same_term A -> A -> prop.
type same_var A -> A -> prop.
type seal goal -> sealed-goal.
type sigma (A -> prop) -> prop.
type simple-graph std.map A (list A) -> simple-graph A.
type simple-graph.add-edge A -> A -> simple-graph A -> simple-graph A -> prop.
type simple-graph.add-edge.aux A ->
                                 option (list A) -> option (list A) -> prop.
type simple-graph.add-node A -> simple-graph A -> simple-graph A -> prop.
type simple-graph.empty (A -> A -> cmp -> prop) -> simple-graph A -> prop.
type simple-graph.reversed-kahn list (pair A (list A)) ->
                                  list A -> option (list A) -> prop.
type simple-graph.toposort simple-graph A -> option (list A) -> prop.
type sin float -> float.
type size string -> int.
type snd pair A B -> B -> prop.
type solve goal -> list sealed-goal -> prop.
type some A -> option A.
type sort sort -> term.
type sortclass class.
type sprop sort.
type sqrt float -> float.
type stash_in_safe safe -> A -> prop.
type std.any->string A -> string -> prop.
type std.append list A -> list A -> list A -> prop.
type std.appendR list A -> list A -> list A -> prop.
type std.assert! prop -> string -> prop.
type std.assert-ok! (diagnostic -> prop) -> string -> prop.
type std.debug-print string -> A -> prop.
type std.do! list prop -> prop.
type std.do-ok! diagnostic -> list (diagnostic -> prop) -> prop.
type std.drop int -> list A -> list A -> prop.
type std.drop-last int -> list A -> list A -> prop.
type std.exists list A -> (A -> prop) -> prop.
type std.exists2 list A -> list B -> (A -> B -> prop) -> prop.
type std.fatal-error string -> prop.
type std.fatal-error-w-data string -> A -> prop.
type std.filter list A -> (A -> prop) -> list A -> prop.
type std.findall prop -> list prop -> prop.
type std.flatten list (list A) -> list A -> prop.
type std.flip (A -> B -> prop) -> B -> A -> prop.
type std.fold list B -> A -> (B -> A -> A -> prop) -> A -> prop.
type std.fold-map list A ->
                    B -> (A -> B -> C -> B -> prop) -> list C -> B -> prop.
type std.fold-right list B -> A -> (B -> A -> A -> prop) -> A -> prop.
type std.fold2 list C ->
                 list B -> A -> (C -> B -> A -> A -> prop) -> A -> prop.
type std.forall list A -> (A -> prop) -> prop.
type std.forall-ok list A -> (A -> diagnostic -> prop) -> diagnostic -> prop.
type std.forall2 list A -> list B -> (A -> B -> prop) -> prop.
type std.ignore-failure! prop -> prop.
type std.int.map.add int -> A -> std.int.map A -> std.int.map A -> prop.
type std.int.map.bindings std.int.map A -> list (pair int A) -> prop.
type std.int.map.empty std.int.map A -> prop.
type std.int.map.filter std.int.map A ->
                          (int -> A -> prop) -> std.int.map A -> prop.
type std.int.map.find int -> std.int.map A -> A -> prop.
type std.int.map.fold std.int.map A ->
                        C -> (int -> A -> C -> C -> prop) -> C -> prop.
type std.int.map.map std.int.map A ->
                       (int -> A -> B -> prop) -> std.int.map B -> prop.
type std.int.map.mem int -> std.int.map A -> prop.
type std.int.map.remove int -> std.int.map A -> std.int.map A -> prop.
type std.int.set.add int -> std.int.set -> std.int.set -> prop.
type std.int.set.cardinal std.int.set -> int -> prop.
type std.int.set.choose std.int.set -> int -> prop.
type std.int.set.diff std.int.set -> std.int.set -> std.int.set -> prop.
type std.int.set.elements std.int.set -> list int -> prop.
type std.int.set.empty std.int.set -> prop.
type std.int.set.equal std.int.set -> std.int.set -> prop.
type std.int.set.filter std.int.set -> (int -> prop) -> std.int.set -> prop.
type std.int.set.fold std.int.set ->
                        A -> (int -> A -> A -> prop) -> A -> prop.
type std.int.set.inter std.int.set -> std.int.set -> std.int.set -> prop.
type std.int.set.map std.int.set ->
                       (int -> int -> prop) -> std.int.set -> prop.
type std.int.set.max std.int.set -> int -> prop.
type std.int.set.mem int -> std.int.set -> prop.
type std.int.set.min std.int.set -> int -> prop.
type std.int.set.partition std.int.set ->
                             (int -> prop) ->
                               std.int.set -> std.int.set -> prop.
type std.int.set.remove int -> std.int.set -> std.int.set -> prop.
type std.int.set.subset std.int.set -> std.int.set -> prop.
type std.int.set.union std.int.set -> std.int.set -> std.int.set -> prop.
type std.intersperse A -> list A -> list A -> prop.
type std.iota int -> list int -> prop.
type std.last list A -> A -> prop.
type std.length list A -> int -> prop.
type std.lift-ok prop -> string -> diagnostic -> prop.
type std.list.init int -> (int -> A -> prop) -> list A -> prop.
type std.list.init.aux int -> int -> (int -> A -> prop) -> list A -> prop.
type std.list.make int -> A -> list A -> prop.
type std.loc.map.add loc -> A -> std.loc.map A -> std.loc.map A -> prop.
type std.loc.map.bindings std.loc.map A -> list (pair loc A) -> prop.
type std.loc.map.empty std.loc.map A -> prop.
type std.loc.map.filter std.loc.map A ->
                          (loc -> A -> prop) -> std.loc.map A -> prop.
type std.loc.map.find loc -> std.loc.map A -> A -> prop.
type std.loc.map.fold std.loc.map A ->
                        C -> (loc -> A -> C -> C -> prop) -> C -> prop.
type std.loc.map.map std.loc.map A ->
                       (loc -> A -> B -> prop) -> std.loc.map B -> prop.
type std.loc.map.mem loc -> std.loc.map A -> prop.
type std.loc.map.remove loc -> std.loc.map A -> std.loc.map A -> prop.
type std.loc.set.add loc -> std.loc.set -> std.loc.set -> prop.
type std.loc.set.cardinal std.loc.set -> int -> prop.
type std.loc.set.choose std.loc.set -> loc -> prop.
type std.loc.set.diff std.loc.set -> std.loc.set -> std.loc.set -> prop.
type std.loc.set.elements std.loc.set -> list loc -> prop.
type std.loc.set.empty std.loc.set -> prop.
type std.loc.set.equal std.loc.set -> std.loc.set -> prop.
type std.loc.set.filter std.loc.set -> (loc -> prop) -> std.loc.set -> prop.
type std.loc.set.fold std.loc.set ->
                        A -> (loc -> A -> A -> prop) -> A -> prop.
type std.loc.set.inter std.loc.set -> std.loc.set -> std.loc.set -> prop.
type std.loc.set.map std.loc.set ->
                       (loc -> loc -> prop) -> std.loc.set -> prop.
type std.loc.set.max std.loc.set -> loc -> prop.
type std.loc.set.mem loc -> std.loc.set -> prop.
type std.loc.set.min std.loc.set -> loc -> prop.
type std.loc.set.partition std.loc.set ->
                             (loc -> prop) ->
                               std.loc.set -> std.loc.set -> prop.
type std.loc.set.remove loc -> std.loc.set -> std.loc.set -> prop.
type std.loc.set.subset std.loc.set -> std.loc.set -> prop.
type std.loc.set.union std.loc.set -> std.loc.set -> std.loc.set -> prop.
type std.lookup list (pair A B) -> A -> B -> prop.
type std.lookup! list (pair A B) -> A -> B -> prop.
type std.map std.map.private.map K V ->
               (K -> K -> cmp -> prop) -> std.map K V.
type std.map list A -> (A -> B -> prop) -> list B -> prop.
type std.map-filter list A -> (A -> B -> prop) -> list B -> prop.
type std.map-i list A -> (int -> A -> B -> prop) -> list B -> prop.
type std.map-i.aux list A -> int -> (int -> A -> B -> prop) -> list B -> prop.
type std.map-ok list A ->
                  (A -> B -> diagnostic -> prop) ->
                    list B -> diagnostic -> prop.
type std.map.add K -> V -> std.map K V -> std.map K V -> prop.
type std.map.bindings std.map K V -> list (pair K V) -> prop.
type std.map.find K -> std.map K V -> V -> prop.
type std.map.make (K -> K -> cmp -> prop) -> std.map K V -> prop.
type std.map.private.add std.map.private.map K V ->
                           (K -> K -> cmp -> prop) ->
                             K -> V -> std.map.private.map K V -> prop.
type std.map.private.add.aux cmp ->
                               std.map.private.map K V ->
                                 (K -> K -> cmp -> prop) ->
                                   K -> V -> std.map.private.map K V -> prop.
type std.map.private.bal std.map.private.map K V ->
                           K ->
                             V ->
                               std.map.private.map K V ->
                                 std.map.private.map K V -> prop.
type std.map.private.bal.aux int ->
                               int ->
                                 int ->
                                   int ->
                                     std.map.private.map K V ->
                                       K ->
                                         V ->
                                           std.map.private.map K V ->
                                             std.map.private.map K V -> prop.
type std.map.private.bindings std.map.private.map K V ->
                                list (pair K V) -> list (pair K V) -> prop.
type std.map.private.create std.map.private.map K V ->
                              K ->
                                V ->
                                  std.map.private.map K V ->
                                    std.map.private.map K V -> prop.
type std.map.private.empty std.map.private.map K V.
type std.map.private.find std.map.private.map K V ->
                            (K -> K -> cmp -> prop) -> K -> V -> prop.
type std.map.private.find.aux cmp ->
                                (K -> K -> cmp -> prop) ->
                                  std.map.private.map K V ->
                                    std.map.private.map K V ->
                                      V -> K -> V -> prop.
type std.map.private.height std.map.private.map K V -> int -> prop.
type std.map.private.merge std.map.private.map K V ->
                             std.map.private.map K V ->
                               std.map.private.map K V -> prop.
type std.map.private.min-binding std.map.private.map K V -> K -> V -> prop.
type std.map.private.node std.map.private.map K V ->
                            K ->
                              V ->
                                std.map.private.map K V ->
                                  int -> std.map.private.map K V.
type std.map.private.remove std.map.private.map K V ->
                              (K -> K -> cmp -> prop) ->
                                K -> std.map.private.map K V -> prop.
type std.map.private.remove-min-binding std.map.private.map K V ->
                                          std.map.private.map K V -> prop.
type std.map.private.remove.aux cmp ->
                                  (K -> K -> cmp -> prop) ->
                                    std.map.private.map K V ->
                                      std.map.private.map K V ->
                                        K ->
                                          V ->
                                            K ->
                                              std.map.private.map K V -> prop.
type std.map.remove K -> std.map K V -> std.map K V -> prop.
type std.map2 list A -> list B -> (A -> B -> C -> prop) -> list C -> prop.
type std.map2-filter list A ->
                       list B -> (A -> B -> C -> prop) -> list C -> prop.
type std.max A -> A -> A -> prop.
type std.mem list A -> A -> prop.
type std.mem! list A -> A -> prop.
type std.nth int -> list A -> A -> prop.
type std.null list A -> prop.
type std.omap option A -> (A -> B -> prop) -> option B -> prop.
type std.once prop -> prop.
type std.rev list A -> list A -> prop.
type std.rev.aux list A -> list A -> list A -> prop.
type std.set std.set.private.set E -> (E -> E -> cmp -> prop) -> std.set E.
type std.set.add E -> std.set E -> std.set E -> prop.
type std.set.cardinal std.set E -> int -> prop.
type std.set.elements std.set E -> list E -> prop.
type std.set.make (E -> E -> cmp -> prop) -> std.set E -> prop.
type std.set.mem E -> std.set E -> prop.
type std.set.private.add std.set.private.set E ->
                           (E -> E -> cmp -> prop) ->
                             E -> std.set.private.set E -> prop.
type std.set.private.add.aux cmp ->
                               (E -> E -> cmp -> prop) ->
                                 std.set.private.set E ->
                                   std.set.private.set E ->
                                     E ->
                                       E ->
                                         int -> std.set.private.set E -> prop.
type std.set.private.bal std.set.private.set E ->
                           E ->
                             std.set.private.set E ->
                               std.set.private.set E -> prop.
type std.set.private.bal.aux int ->
                               int ->
                                 int ->
                                   int ->
                                     std.set.private.set E ->
                                       E ->
                                         std.set.private.set E ->
                                           std.set.private.set E -> prop.
type std.set.private.cardinal std.set.private.set E -> int -> prop.
type std.set.private.create std.set.private.set E ->
                              E ->
                                std.set.private.set E ->
                                  std.set.private.set E -> prop.
type std.set.private.elements std.set.private.set E ->
                                list E -> list E -> prop.
type std.set.private.empty std.set.private.set E.
type std.set.private.height std.set.private.set E -> int -> prop.
type std.set.private.mem std.set.private.set E ->
                           (E -> E -> cmp -> prop) -> E -> prop.
type std.set.private.mem.aux cmp ->
                               (E -> E -> cmp -> prop) ->
                                 std.set.private.set E ->
                                   std.set.private.set E -> E -> prop.
type std.set.private.merge std.set.private.set E ->
                             std.set.private.set E ->
                               std.set.private.set E -> prop.
type std.set.private.min-binding std.set.private.set E -> E -> prop.
type std.set.private.node std.set.private.set E ->
                            E ->
                              std.set.private.set E ->
                                int -> std.set.private.set E.
type std.set.private.remove std.set.private.set E ->
                              (E -> E -> cmp -> prop) ->
                                E -> std.set.private.set E -> prop.
type std.set.private.remove-min-binding std.set.private.set E ->
                                          std.set.private.set E -> prop.
type std.set.private.remove.aux cmp ->
                                  (E -> E -> cmp -> prop) ->
                                    std.set.private.set E ->
                                      std.set.private.set E ->
                                        E ->
                                          E -> std.set.private.set E -> prop.
type std.set.remove E -> std.set E -> std.set E -> prop.
type std.split-at int -> list A -> list A -> list A -> prop.
type std.spy prop -> prop.
type std.spy! prop -> prop.
type std.spy-do! list prop -> prop.
type std.string.concat string -> list string -> string -> prop.
type std.string.list->set list string -> std.string.set -> prop.
type std.string.map.add string ->
                          A -> std.string.map A -> std.string.map A -> prop.
type std.string.map.bindings std.string.map A -> list (pair string A) -> prop.
type std.string.map.empty std.string.map A -> prop.
type std.string.map.filter std.string.map A ->
                             (string -> A -> prop) ->
                               std.string.map A -> prop.
type std.string.map.find string -> std.string.map A -> A -> prop.
type std.string.map.fold std.string.map A ->
                           C -> (string -> A -> C -> C -> prop) -> C -> prop.
type std.string.map.map std.string.map A ->
                          (string -> A -> B -> prop) ->
                            std.string.map B -> prop.
type std.string.map.mem string -> std.string.map A -> prop.
type std.string.map.remove string ->
                             std.string.map A -> std.string.map A -> prop.
type std.string.set.add string -> std.string.set -> std.string.set -> prop.
type std.string.set.cardinal std.string.set -> int -> prop.
type std.string.set.choose std.string.set -> string -> prop.
type std.string.set.diff std.string.set ->
                           std.string.set -> std.string.set -> prop.
type std.string.set.elements std.string.set -> list string -> prop.
type std.string.set.empty std.string.set -> prop.
type std.string.set.equal std.string.set -> std.string.set -> prop.
type std.string.set.filter std.string.set ->
                             (string -> prop) -> std.string.set -> prop.
type std.string.set.fold std.string.set ->
                           A -> (string -> A -> A -> prop) -> A -> prop.
type std.string.set.inter std.string.set ->
                            std.string.set -> std.string.set -> prop.
type std.string.set.map std.string.set ->
                          (string -> string -> prop) ->
                            std.string.set -> prop.
type std.string.set.max std.string.set -> string -> prop.
type std.string.set.mem string -> std.string.set -> prop.
type std.string.set.min std.string.set -> string -> prop.
type std.string.set.partition std.string.set ->
                                (string -> prop) ->
                                  std.string.set -> std.string.set -> prop.
type std.string.set.remove string -> std.string.set -> std.string.set -> prop.
type std.string.set.subset std.string.set -> std.string.set -> prop.
type std.string.set.union std.string.set ->
                            std.string.set -> std.string.set -> prop.
type std.take int -> list A -> list A -> prop.
type std.take-last int -> list A -> list A -> prop.
type std.time prop -> float -> prop.
type std.unsafe-cast A -> B -> prop.
type std.unzip list (pair A B) -> list A -> list B -> prop.
type std.while-ok-do! diagnostic ->
                        list (diagnostic -> prop) -> diagnostic -> prop.
type std.zip list A -> list B -> list (pair A B) -> prop.
type std_err out_stream.
type std_in in_stream.
type std_out out_stream.
type stop string -> prop.
type stop prop.
type str string -> argument.
type string attribute-type.
type string->verbosity string -> verbosity -> prop.
type string_to_int string -> int.
type submodule modpath -> list module-item -> module-item.
type subst-gref term -> gref -> term -> prop.
type subst-univ univ -> term -> term -> prop.
type substring string -> int -> int -> string.
type supported-attribute attribute-signature -> prop.
type system string -> int -> prop.
type tac ltac1-tactic -> argument.
type tc-instance gref -> int -> tc-instance.
type term->annot-term term -> term -> prop.
type term_to_string any -> string -> prop.
type trace.counter string -> int -> prop.
type translate-goal list prop ->
                      term -> term -> param-class -> term -> term -> prop.
type triple A -> B -> C -> triple A B C.
type triple_1 triple A B C -> A -> prop.
type triple_2 triple A B C -> B -> prop.
type triple_3 triple A B C -> C -> prop.
type trm term -> argument.
type trocq.db.funext constant -> prop.
type trocq.db.gref gref ->
                     param-class -> list param-class -> gref -> gref -> prop.
type trocq.db.gref->class gref -> param-class -> prop.
type trocq.db.id-map map-class -> constant -> prop.
type trocq.db.id-map-sym map-class -> constant -> prop.
type trocq.db.id-param param-class -> constant -> prop.
type trocq.db.known-gref gref ->
                           gref ->
                             param-class ->
                               list param-class -> gref -> gref -> prop.
type trocq.db.map->class map-class -> gref -> prop.
type trocq.db.map-class->indc-class map-class -> gref -> prop.
type trocq.db.map-class->term map-class -> term -> prop.
type trocq.db.param-arrow param-class -> constant -> prop.
type trocq.db.param-forall param-class -> constant -> prop.
type trocq.db.param-sym param-class -> constant -> prop.
type trocq.db.param-type param-class -> param-class -> constant -> prop.
type trocq.db.paths univ-instance -> term -> prop.
type trocq.db.pparam-type param-class -> constant -> prop.
type trocq.db.pprop constant -> prop.
type trocq.db.ptype constant -> prop.
type trocq.db.ptype-or-pprop term -> constant -> prop.
type trocq.db.r param-class -> constant -> prop.
type trocq.db.rel param-class -> gref -> gref -> gref -> gref -> gref -> prop.
type trocq.db.sym-rel gref -> prop.
type trocq.db.term->map-class term -> map-class -> prop.
type trocq.db.univalence constant -> prop.
type trocq.db.weaken constant -> prop.
type true prop.
type truncate float -> int.
type tt bool.
type typ univ -> sort.
type uint63 uint63 -> primitive-value.
type unfold constant ->
              option univ-instance -> stack -> term -> stack -> prop.
type unify-eq term -> term -> prop.
type unify-leq term -> term -> prop.
type unix.process out_stream -> in_stream -> in_stream -> unix.process.
type unix.process.close unix.process -> diagnostic -> prop.
type unix.process.open string ->
                         list string ->
                           list string -> unix.process -> diagnostic -> prop.
type unwind term -> stack -> term -> prop.
type upoly-const-decl id -> option term -> arity -> upoly-decl -> argument.
type upoly-decl list univ.variable ->
                  bool -> list univ-constraint -> bool -> upoly-decl.
type upoly-decl-cumul list univ-variance ->
                        bool ->
                          list univ-constraint -> bool -> upoly-decl-cumul.
type upoly-indt-decl indt-decl -> upoly-decl -> argument.
type upoly-indt-decl indt-decl -> upoly-decl-cumul -> argument.
type usage prop.
type util.accumulate-replacing-named-clause scope -> id -> id -> prop -> prop.
type util.add-named-coe id -> gref -> gref -> constant -> prop.
type util.argument->gref argument -> gref -> prop.
type util.at-level verbosity -> prop -> prop.
type util.cmp-int int -> int -> cmp -> prop.
type util.delete A -> list A -> list A -> prop.
type util.if-suspend A -> prop -> prop -> prop -> prop.
type util.map.find-opt A -> std.map A B -> option B -> prop.
type util.map.update A ->
                       (option B -> option B -> prop) ->
                         std.map A B -> std.map A B -> prop.
type util.named-coe gref -> gref -> term -> int -> prop.
type util.named-coe.rec gref ->
                          std.string.map gref ->
                            list gref ->
                              list term ->
                                gref -> term -> term -> int -> prop.
type util.option.value option A -> A -> A -> prop.
type util.unless prop -> prop -> prop.
type util.when prop -> prop -> prop.
type uvar A.
type uvar evarkey -> list term -> term.
type var any -> any ..-> prop.
type verbosity->int verbosity -> int -> prop.
type weakening term -> term -> weakening -> prop.
type wfun (term -> term) -> weakening.
type whd term -> stack -> term -> stack -> prop.
type whd-indc term -> constructor -> stack -> prop.
type whd1 term -> term -> prop.
type when list int -> option int -> simplification_strategy.
type when-nomatch list int -> option int -> simplification_strategy.
type wsuspend (term -> term) -> (term -> term) -> weakening.
type (~) int -> int.
type (~) float -> float.
typeabbrv class-id (int).
typeabbrv cstr-graph.constraint-graph-content (std.map class-id 
                                                 (pair
                                                    (list cstr-graph.node) 
                                                    (list cstr-graph.node))).
typeabbrv field-attributes (list field-attribute).
typeabbrv goal-ctx (list prop).
typeabbrv id (string).
typeabbrv opaque? (bool).
typeabbrv open-tactic (goal -> list sealed-goal -> prop).
typeabbrv stack (list term).
typeabbrv tactic (sealed-goal -> list sealed-goal -> prop).
% File "elpi-builtin.elpi", line 11, column 0, characters 147-151: [1] 
true :- .
% File "elpi-builtin.elpi", line 34, column 0, characters 373-385: [2] 
A0 ; _ :- A0.
% File "elpi-builtin.elpi", line 36, column 0, characters 388-400: [3] 
_ ; A0 :- A0.
% File "elpi-builtin.elpi", line 62, column 0, characters 759-778: [4] 
not A0 :- A0, !, fail.
% File "elpi-builtin.elpi", line 64, column 0, characters 781-786: [5] 
not _ :- .
% File "elpi-builtin.elpi", line 77, column 0, characters 1124-1136: [6] 
stop :- halt.
% File "elpi-builtin.elpi", line 83, column 0, characters 1181-1199: [7] 
A1 is A0 :- calc A0 A1.
% File "elpi-builtin.elpi", line 182, column 0, characters 2993-3009: [8] 
A0 > A1 :- gt_ A0 A1.
% File "elpi-builtin.elpi", line 185, column 0, characters 3031-3047: [9] 
A0 < A1 :- lt_ A0 A1.
% File "elpi-builtin.elpi", line 188, column 0, characters 3070-3087: [10] 
A0 =< A1 :- le_ A0 A1.
% File "elpi-builtin.elpi", line 191, column 0, characters 3110-3127: [11] 
A0 >= A1 :- ge_ A0 A1.
% File "elpi-builtin.elpi", line 194, column 0, characters 3154-3171: [12] 
A0 i> A1 :- gt_ A0 A1.
% File "elpi-builtin.elpi", line 197, column 0, characters 3198-3215: [13] 
A0 i< A1 :- lt_ A0 A1.
% File "elpi-builtin.elpi", line 200, column 0, characters 3243-3261: [14] 
A0 i=< A1 :- le_ A0 A1.
% File "elpi-builtin.elpi", line 203, column 0, characters 3289-3307: [15] 
A0 i>= A1 :- ge_ A0 A1.
% File "elpi-builtin.elpi", line 206, column 0, characters 3338-3355: [16] 
A0 r> A1 :- gt_ A0 A1.
% File "elpi-builtin.elpi", line 209, column 0, characters 3386-3403: [17] 
A0 r< A1 :- lt_ A0 A1.
% File "elpi-builtin.elpi", line 212, column 0, characters 3435-3453: [18] 
A0 r=< A1 :- le_ A0 A1.
% File "elpi-builtin.elpi", line 215, column 0, characters 3485-3503: [19] 
A0 r>= A1 :- ge_ A0 A1.
% File "elpi-builtin.elpi", line 218, column 0, characters 3536-3553: [20] 
A0 s> A1 :- gt_ A0 A1.
% File "elpi-builtin.elpi", line 221, column 0, characters 3586-3603: [21] 
A0 s< A1 :- lt_ A0 A1.
% File "elpi-builtin.elpi", line 224, column 0, characters 3637-3655: [22] 
A0 s=< A1 :- le_ A0 A1.
% File "elpi-builtin.elpi", line 227, column 0, characters 3689-3707: [23] 
A0 s>= A1 :- ge_ A0 A1.
% File "elpi-builtin.elpi", line 248, column 0, characters 4099-4113: [24] 
fst (pr A0 _) A0 :- .
% File "elpi-builtin.elpi", line 252, column 0, characters 4144-4158: [25] 
snd (pr _ A0) A0 :- .
% File "elpi-builtin.elpi", line 259, column 0, characters 4281-4306: [26] 
triple_1 (triple A0 _ _) A0 :- .
% File "elpi-builtin.elpi", line 262, column 0, characters 4344-4369: [27] 
triple_2 (triple _ A0 _) A0 :- .
% File "elpi-builtin.elpi", line 265, column 0, characters 4407-4432: [28] 
triple_3 (triple _ _ A0) A0 :- .
% File "elpi-builtin.elpi", line 295, column 0, characters 5059-5091: [29] 
counter A0 A1 :- trace.counter A0 A1.
% File "elpi-builtin.elpi", line 321, column 0, characters 5969-6001: [30] 
rex_match A0 A1 :- rex.match A0 A1.
% File "elpi-builtin.elpi", line 325, column 0, characters 6091-6135: [31] 
rex_replace A0 A1 A2 A3 :- rex.replace A0 A1 A2 A3.
% File "elpi-builtin.elpi", line 329, column 0, characters 6216-6252: [32] 
rex_split A0 A1 A2 :- rex.split A0 A1 A2.
% File "elpi-builtin.elpi", line 359, column 0, characters 7377-7400: [33] 
A0 == A1 :- same_term A0 A1.
% File "elpi-builtin.elpi", line 392, column 0, characters 8555-8585: [34] 
primitive? A0 A1 :- is_cdata A0 A1.
% File "elpi-builtin.elpi", line 422, column 0, characters 9560-9579: [35] 
if A0 A1 _ :- A0, !, A1.
% File "elpi-builtin.elpi", line 423, column 0, characters 9581-9594: [36] 
if _ _ A0 :- A0.
% File "elpi-builtin.elpi", line 427, column 0, characters 9724-9754: [37] 
if2 A0 A1 _ _ _ :- A0, !, A1.
% File "elpi-builtin.elpi", line 428, column 0, characters 9756-9786: [38] 
if2 _ _ A0 A1 _ :- A0, !, A1.
% File "elpi-builtin.elpi", line 429, column 0, characters 9788-9813: [39] 
if2 _ _ _ _ A0 :- !, A0.
% File "/build/source/elpi/coq-lib-common.elpi", line 7, column 0, characters 302-358: [40; -265] 
std.fatal-error A0 :- !, stop A0.
% File "builtin_stdlib.elpi", line 17, column 0, characters 659-714: [40] default-fatal-error
std.fatal-error A0 :- halt A0.
% File "/build/source/elpi/coq-lib-common.elpi", line 10, column 0, characters 361-494: [41; -266] 
std.fatal-error-w-data A3 A0 :- !, term_to_string A0 A1, A2 is A3 ^ :  ^ A1, 
 stop A2.
% File "builtin_stdlib.elpi", line 21, column 0, characters 756-839: [41] default-fatal-error-w-data
std.fatal-error-w-data A0 A1 :- halt A0 : A1.
% File "/build/source/elpi/coq-lib-common.elpi", line 15, column 0, characters 497-568: [42; -267] 
std.debug-print A0 A1 :- !, coq.debug A0 A1.
% File "builtin_stdlib.elpi", line 25, column 0, characters 874-940: [42] default-debug-print
std.debug-print A0 A1 :- print A0 A1.
% File "builtin_stdlib.elpi", line 31, column 0, characters 1007-1032: [43] 
std.ignore-failure! A0 :- A0, !.
% File "builtin_stdlib.elpi", line 32, column 0, characters 1034-1051: [44] 
std.ignore-failure! _ :- .
% File "builtin_stdlib.elpi", line 35, column 0, characters 1072-1086: [45] 
std.once A0 :- A0, !.
% File "builtin_stdlib.elpi", line 39, column 0, characters 1190-1249: [46] 
std.assert! A0 A1 :- A0 ; std.fatal-error-w-data A1 A0, !.
% File "builtin_stdlib.elpi", line 44, column 0, characters 1440-1552: [47] 
std.assert-ok! A1 A3 :- A1 A0, !, 
 A0 = ok ; A0 = error A2 , std.fatal-error-w-data A3 A2, !.
% File "builtin_stdlib.elpi", line 45, column 0, characters 1554-1621: [48] 
std.assert-ok! _ A0 :- std.fatal-error-w-data A0 no diagnostic returned.
% File "builtin_stdlib.elpi", line 49, column 0, characters 1716-1895: [49] 
std.spy A1 :- trace.counter run A0, 
 if (not (A0 = 0)) (std.debug-print run= A0) true, 
 std.debug-print ----<<---- enter:  A1, A1, 
 std.debug-print ---->>---- exit:  A1.
% File "builtin_stdlib.elpi", line 53, column 0, characters 1897-1945: [50] 
std.spy A0 :- std.debug-print ---->>---- fail:  A0, fail.
% File "builtin_stdlib.elpi", line 57, column 0, characters 2035-2218: [51] 
std.spy! A1 :- trace.counter run A0, 
 if (not (A0 = 0)) (std.debug-print run= A0) true, 
 std.debug-print ----<<---- enter:  A1, A1, 
 std.debug-print ---->>---- exit:  A1, !.
% File "builtin_stdlib.elpi", line 61, column 0, characters 2220-2269: [52] 
std.spy! A0 :- std.debug-print ---->>---- fail:  A0, fail.
% File "builtin_stdlib.elpi", line 65, column 0, characters 2329-2353: [53] 
std.unsafe-cast A0 A0 :- .
% File "builtin_stdlib.elpi", line 70, column 0, characters 2410-2452: [54] 
std.length [_ | A0] A2 :- std.length A0 A1, A2 is A1 + 1.
% File "builtin_stdlib.elpi", line 71, column 0, characters 2454-2468: [55] 
std.length [] 0 :- .
% File "builtin_stdlib.elpi", line 74, column 0, characters 2500-2529: [56] 
std.rev A0 A1 :- std.rev.aux A0 [] A1.
% File "builtin_stdlib.elpi", line 77, column 0, characters 2575-2619: [57] 
std.rev.aux [A1 | A0] A2 A3 :- std.rev.aux A0 [A1 | A2] A3.
% File "builtin_stdlib.elpi", line 78, column 0, characters 2621-2635: [58] 
std.rev.aux [] A0 A0 :- .
% File "builtin_stdlib.elpi", line 81, column 0, characters 2663-2708: [59] 
std.last [] _ :- std.fatal-error last on empty list.
% File "builtin_stdlib.elpi", line 82, column 0, characters 2710-2725: [60] 
std.last [A0] A0 :- !.
% File "builtin_stdlib.elpi", line 83, column 0, characters 2727-2753: [61] 
std.last [_ | A0] A1 :- std.last A0 A1.
% File "builtin_stdlib.elpi", line 86, column 0, characters 2798-2838: [62] 
std.append [A3 | A0] A1 [A3 | A2] :- std.append A0 A1 A2.
% File "builtin_stdlib.elpi", line 87, column 0, characters 2841-2854: [63] 
std.append [] A0 A0 :- .
% File "builtin_stdlib.elpi", line 90, column 0, characters 2901-2915: [64] 
std.appendR [] A0 A0 :- .
% File "builtin_stdlib.elpi", line 91, column 0, characters 2917-2959: [65] 
std.appendR [A3 | A0] A1 [A3 | A2] :- std.appendR A0 A1 A2.
% File "builtin_stdlib.elpi", line 94, column 0, characters 2999-3015: [66] 
std.take 0 _ [] :- !.
% File "builtin_stdlib.elpi", line 95, column 0, characters 3017-3068: [67] 
std.take A1 [A4 | A2] [A4 | A3] :- !, A0 is A1 - 1, std.take A0 A2 A3.
% File "builtin_stdlib.elpi", line 96, column 0, characters 3070-3124: [68] 
std.take _ _ _ :- std.fatal-error take run out of list items.
% File "builtin_stdlib.elpi", line 99, column 0, characters 3169-3228: [69] 
std.take-last A3 A0 A4 :- std.length A0 A1, A2 is A1 - A3, std.drop A2 A0 A4.
% File "builtin_stdlib.elpi", line 105, column 0, characters 3268-3283: [70] 
std.drop 0 A0 A0 :- !.
% File "builtin_stdlib.elpi", line 106, column 0, characters 3285-3332: [71] 
std.drop A1 [_ | A2] A3 :- !, A0 is A1 - 1, std.drop A0 A2 A3.
% File "builtin_stdlib.elpi", line 107, column 0, characters 3334-3388: [72] 
std.drop _ _ _ :- std.fatal-error drop run out of list items.
% File "builtin_stdlib.elpi", line 110, column 0, characters 3433-3488: [73] 
std.drop-last A3 A0 A4 :- std.length A0 A1, A2 is A1 - A3, std.take A2 A0 A4.
% File "builtin_stdlib.elpi", line 114, column 0, characters 3542-3564: [74] 
std.split-at 0 A0 [] A0 :- !.
% File "builtin_stdlib.elpi", line 115, column 0, characters 3566-3633: [75] 
std.split-at A1 [A5 | A2] [A5 | A3] A4 :- !, A0 is A1 - 1, 
 std.split-at A0 A2 A3 A4.
% File "builtin_stdlib.elpi", line 116, column 0, characters 3635-3699: [76] 
std.split-at _ _ _ _ :- std.fatal-error split-at run out of list items.
% File "builtin_stdlib.elpi", line 119, column 0, characters 3756-3769: [77] 
std.fold [] A0 _ A0 :- .
% File "builtin_stdlib.elpi", line 120, column 0, characters 3771-3816: [78] 
std.fold [A0 | A4] A1 A3 A5 :- A3 A0 A1 A2, std.fold A4 A2 A3 A5.
% File "builtin_stdlib.elpi", line 123, column 0, characters 3879-3898: [79] 
std.fold-right [] A0 _ A0 :- .
% File "builtin_stdlib.elpi", line 124, column 0, characters 3900-3957: [80] 
std.fold-right [A4 | A0] A1 A2 A5 :- std.fold-right A0 A1 A2 A3, A2 A4 A3 A5.
% File "builtin_stdlib.elpi", line 127, column 0, characters 4030-4102: [81] 
std.fold2 [] [_ | _] _ _ _ :- std.fatal-error
                               fold2 on lists of different length.
% File "builtin_stdlib.elpi", line 128, column 0, characters 4104-4176: [82] 
std.fold2 [_ | _] [] _ _ _ :- std.fatal-error
                               fold2 on lists of different length.
% File "builtin_stdlib.elpi", line 129, column 0, characters 4178-4195: [83] 
std.fold2 [] [] A0 _ A0 :- .
% File "builtin_stdlib.elpi", line 130, column 0, characters 4197-4256: [84] 
std.fold2 [A0 | A5] [A1 | A6] A2 A4 A7 :- A4 A0 A1 A2 A3, 
 std.fold2 A5 A6 A3 A4 A7.
% File "builtin_stdlib.elpi", line 133, column 0, characters 4307-4318: [85] 
std.map [] _ [] :- .
% File "builtin_stdlib.elpi", line 134, column 0, characters 4320-4361: [86] 
std.map [A0 | A3] A2 [A1 | A4] :- A2 A0 A1, std.map A3 A2 A4.
% File "builtin_stdlib.elpi", line 137, column 0, characters 4421-4453: [87] 
std.map-i A0 A1 A2 :- std.map-i.aux A0 0 A1 A2.
% File "builtin_stdlib.elpi", line 140, column 0, characters 4524-4543: [88] 
std.map-i.aux [] _ _ [] :- .
% File "builtin_stdlib.elpi", line 141, column 0, characters 4545-4616: [89] 
std.map-i.aux [A1 | A5] A0 A3 [A2 | A6] :- A3 A0 A1 A2, A4 is A0 + 1, 
 std.map-i.aux A5 A4 A3 A6.
% File "builtin_stdlib.elpi", line 144, column 0, characters 4674-4692: [90] 
std.map-filter [] _ [] :- .
% File "builtin_stdlib.elpi", line 145, column 0, characters 4694-4752: [91] 
std.map-filter [A0 | A3] A2 [A1 | A4] :- A2 A0 A1, !, 
 std.map-filter A3 A2 A4.
% File "builtin_stdlib.elpi", line 146, column 0, characters 4754-4798: [92] 
std.map-filter [_ | A0] A1 A2 :- std.map-filter A0 A1 A2.
% File "builtin_stdlib.elpi", line 150, column 0, characters 4877-4945: [93] 
std.map2 [] [_ | _] _ _ :- std.fatal-error map2 on lists of different length.
% File "builtin_stdlib.elpi", line 151, column 0, characters 4947-5015: [94] 
std.map2 [_ | _] [] _ _ :- std.fatal-error map2 on lists of different length.
% File "builtin_stdlib.elpi", line 152, column 0, characters 5017-5032: [95] 
std.map2 [] [] _ [] :- .
% File "builtin_stdlib.elpi", line 153, column 0, characters 5034-5089: [96] 
std.map2 [A0 | A4] [A1 | A5] A3 [A2 | A6] :- A3 A0 A1 A2, 
 std.map2 A4 A5 A3 A6.
% File "builtin_stdlib.elpi", line 156, column 0, characters 5163-5245: [97] 
std.map2-filter [] [_ | _] _ _ :- std.fatal-error
                                   map2-filter on lists of different length.
% File "builtin_stdlib.elpi", line 157, column 0, characters 5247-5329: [98] 
std.map2-filter [_ | _] [] _ _ :- std.fatal-error
                                   map2-filter on lists of different length.
% File "builtin_stdlib.elpi", line 158, column 0, characters 5331-5353: [99] 
std.map2-filter [] [] _ [] :- .
% File "builtin_stdlib.elpi", line 159, column 0, characters 5355-5427: [100] 
std.map2-filter [A0 | A4] [A1 | A5] A3 [A2 | A6] :- A3 A0 A1 A2, !, 
 std.map2-filter A4 A5 A3 A6.
% File "builtin_stdlib.elpi", line 160, column 0, characters 5429-5485: [101] 
std.map2-filter [_ | A0] [_ | A1] A2 A3 :- std.map2-filter A0 A1 A2 A3.
% File "builtin_stdlib.elpi", line 163, column 0, characters 5567-5643: [102] 
std.map-ok [A0 | A4] A3 [A1 | A5] A6 :- A3 A0 A1 A2, 
 if (A2 = ok) (std.map-ok A4 A3 A5 A6) (A6 = A2).
% File "builtin_stdlib.elpi", line 164, column 0, characters 5645-5662: [103] 
std.map-ok [] _ [] ok :- .
% File "builtin_stdlib.elpi", line 167, column 0, characters 5738-5758: [104] 
std.fold-map [] A0 _ [] A0 :- .
% File "builtin_stdlib.elpi", line 168, column 0, characters 5760-5827: [105] 
std.fold-map [A0 | A5] A1 A4 [A2 | A6] A7 :- A4 A0 A1 A2 A3, 
 std.fold-map A5 A3 A4 A6 A7.
% File "builtin_stdlib.elpi", line 171, column 0, characters 5883-5899: [106] 
std.omap none _ none :- .
% File "builtin_stdlib.elpi", line 172, column 0, characters 5901-5934: [107] 
std.omap (some A0) A2 (some A1) :- A2 A0 A1.
% File "builtin_stdlib.elpi", line 176, column 0, characters 6041-6067: [108] 
std.nth 0 [A0 | _] A1 :- !, A0 = A1.
% File "builtin_stdlib.elpi", line 177, column 0, characters 6069-6121: [109] 
std.nth A0 [_ | A2] A3 :- A0 > 0, !, A1 is A0 - 1, std.nth A1 A2 A3.
% File "builtin_stdlib.elpi", line 178, column 0, characters 6123-6184: [110] 
std.nth A0 _ _ :- A0 < 0, !, std.fatal-error nth got a negative index.
% File "builtin_stdlib.elpi", line 179, column 0, characters 6186-6238: [111] 
std.nth _ _ _ :- std.fatal-error nth run out of list items.
% File "builtin_stdlib.elpi", line 183, column 0, characters 6327-6348: [112] 
std.lookup [pr A0 A1 | _] A0 A1 :- .
% File "builtin_stdlib.elpi", line 184, column 0, characters 6350-6390: [113] 
std.lookup [_ | A0] A1 A2 :- std.lookup A0 A1 A2.
% File "builtin_stdlib.elpi", line 188, column 0, characters 6509-6536: [114] 
std.lookup! [pr A0 A1 | _] A0 A1 :- !.
% File "builtin_stdlib.elpi", line 189, column 0, characters 6538-6580: [115] 
std.lookup! [_ | A0] A1 A2 :- std.lookup! A0 A1 A2.
% File "builtin_stdlib.elpi", line 193, column 0, characters 6657-6674: [116] 
std.mem! [A0 | _] A0 :- !.
% File "builtin_stdlib.elpi", line 194, column 0, characters 6676-6700: [117] 
std.mem! [_ | A0] A1 :- std.mem! A0 A1.
% File "builtin_stdlib.elpi", line 198, column 0, characters 6781-6792: [118] 
std.mem [A0 | _] A0 :- .
% File "builtin_stdlib.elpi", line 199, column 0, characters 6794-6816: [119] 
std.mem [_ | A0] A1 :- std.mem A0 A1.
% File "builtin_stdlib.elpi", line 202, column 0, characters 6855-6876: [120] 
std.exists [A0 | _] A1 :- A1 A0.
% File "builtin_stdlib.elpi", line 203, column 0, characters 6878-6906: [121] 
std.exists [_ | A0] A1 :- std.exists A0 A1.
% File "builtin_stdlib.elpi", line 206, column 0, characters 6961-7033: [122] 
std.exists2 [] [_ | _] _ :- std.fatal-error
                             exists2 on lists of different length.
% File "builtin_stdlib.elpi", line 207, column 0, characters 7035-7107: [123] 
std.exists2 [_ | _] [] _ :- std.fatal-error
                             exists2 on lists of different length.
% File "builtin_stdlib.elpi", line 208, column 0, characters 7109-7139: [124] 
std.exists2 [A0 | _] [A1 | _] A2 :- A2 A0 A1.
% File "builtin_stdlib.elpi", line 209, column 0, characters 7141-7179: [125] 
std.exists2 [_ | A0] [_ | A1] A2 :- std.exists2 A0 A1 A2.
% File "builtin_stdlib.elpi", line 212, column 0, characters 7218-7229: [126] 
std.forall [] _ :- .
% File "builtin_stdlib.elpi", line 213, column 0, characters 7231-7264: [127] 
std.forall [A0 | A2] A1 :- A1 A0, std.forall A2 A1.
% File "builtin_stdlib.elpi", line 216, column 0, characters 7334-7404: [128] 
std.forall-ok [A0 | A3] A2 A4 :- A2 A0 A1, 
 if (A1 = ok) (std.forall-ok A3 A2 A4) (A4 = A1).
% File "builtin_stdlib.elpi", line 217, column 0, characters 7406-7423: [129] 
std.forall-ok [] _ ok :- .
% File "builtin_stdlib.elpi", line 220, column 0, characters 7478-7550: [130] 
std.forall2 [] [_ | _] _ :- std.fatal-error
                             forall2 on lists of different length.
% File "builtin_stdlib.elpi", line 221, column 0, characters 7552-7624: [131] 
std.forall2 [_ | _] [] _ :- std.fatal-error
                             forall2 on lists of different length.
% File "builtin_stdlib.elpi", line 222, column 0, characters 7626-7675: [132] 
std.forall2 [A0 | A3] [A1 | A4] A2 :- A2 A0 A1, std.forall2 A3 A4 A2.
% File "builtin_stdlib.elpi", line 223, column 0, characters 7677-7692: [133] 
std.forall2 [] [] _ :- .
% File "builtin_stdlib.elpi", line 226, column 0, characters 7741-7758: [134] 
std.filter [] _ [] :- .
% File "builtin_stdlib.elpi", line 227, column 0, characters 7760-7826: [135] 
std.filter [A0 | A4] A1 A2 :- if (A1 A0) (A2 = [A0 | A3]) (A2 = A3), 
 std.filter A4 A1 A3.
% File "builtin_stdlib.elpi", line 230, column 0, characters 7877-7941: [136] 
std.zip [_ | _] [] _ :- std.fatal-error zip on lists of different length.
% File "builtin_stdlib.elpi", line 231, column 0, characters 7943-8007: [137] 
std.zip [] [_ | _] _ :- std.fatal-error zip on lists of different length.
% File "builtin_stdlib.elpi", line 232, column 0, characters 8009-8054: [138] 
std.zip [A3 | A0] [A4 | A1] [pr A3 A4 | A2] :- std.zip A0 A1 A2.
% File "builtin_stdlib.elpi", line 233, column 0, characters 8056-8068: [139] 
std.zip [] [] [] :- .
% File "builtin_stdlib.elpi", line 236, column 0, characters 8121-8135: [140] 
std.unzip [] [] [] :- .
% File "builtin_stdlib.elpi", line 237, column 0, characters 8137-8184: [141] 
std.unzip [pr A3 A4 | A0] [A3 | A1] [A4 | A2] :- std.unzip A0 A1 A2.
% File "builtin_stdlib.elpi", line 240, column 0, characters 8227-8277: [142] 
std.flatten [A2 | A0] A3 :- std.flatten A0 A1, std.append A2 A1 A3.
% File "builtin_stdlib.elpi", line 241, column 0, characters 8279-8296: [143] 
std.flatten [] [] :- .
% File "builtin_stdlib.elpi", line 244, column 0, characters 8319-8326: [144] 
std.null [] :- .
% File "builtin_stdlib.elpi", line 248, column 0, characters 8417-8438: [145] 
std.list.make 0 _ [] :- !.
% File "builtin_stdlib.elpi", line 249, column 0, characters 8440-8492: [146] 
std.list.make A1 A2 [A2 | A3] :- A0 is A1 - 1, std.list.make A0 A2 A3.
% File "builtin_stdlib.elpi", line 253, column 0, characters 8588-8628: [147] 
std.list.init A0 A1 A2 :- std.list.init.aux 0 A0 A1 A2.
% File "builtin_stdlib.elpi", line 256, column 0, characters 8695-8722: [148] 
std.list.init.aux A0 A0 _ [] :- !.
% File "builtin_stdlib.elpi", line 257, column 0, characters 8724-8795: [149] 
std.list.init.aux A0 A4 A2 [A1 | A5] :- A2 A0 A1, A3 is A0 + 1, 
 std.list.init.aux A3 A4 A2 A5.
% File "builtin_stdlib.elpi", line 260, column 0, characters 8827-8865: [150] 
std.iota A0 A1 :- std.list.init A0 (c0 \ c1 \ c0 = c1) A1.
% File "builtin_stdlib.elpi", line 265, column 0, characters 8969-8988: [151] 
std.intersperse _ [] [] :- .
% File "builtin_stdlib.elpi", line 266, column 0, characters 8990-9016: [152] 
std.intersperse _ [A0] [A0] :- !.
% File "builtin_stdlib.elpi", line 267, column 0, characters 9018-9076: [153] 
std.intersperse A0 [A3 | A1] [A3, A0 | A2] :- std.intersperse A0 A1 A2.
% File "builtin_stdlib.elpi", line 272, column 0, characters 9133-9152: [154] 
std.flip A2 A1 A0 :- A2 A0 A1.
% File "builtin_stdlib.elpi", line 275, column 0, characters 9182-9257: [155] 
std.time A1 A3 :- gettimeofday A0, A1, gettimeofday A2, A3 is A2 - A0.
% File "builtin_stdlib.elpi", line 278, column 0, characters 9282-9288: [156] 
std.do! [] :- .
% File "builtin_stdlib.elpi", line 279, column 0, characters 9290-9316: [157] 
std.do! [A0 | A1] :- A0, !, std.do! A1.
% File "builtin_stdlib.elpi", line 283, column 0, characters 9385-9397: [158] 
std.do-ok! ok [] :- .
% File "builtin_stdlib.elpi", line 284, column 0, characters 9399-9462: [159] 
std.do-ok! A2 [A1 | A3] :- A1 A0, !, 
 if (A0 = ok) (std.do-ok! A2 A3) (A2 = A0).
% File "builtin_stdlib.elpi", line 287, column 0, characters 9510-9555: [160] 
std.lift-ok A0 A2 A1 :- A0 , A1 = ok ; A1 = error A2.
% File "builtin_stdlib.elpi", line 290, column 0, characters 9584-9629: [161] 
std.spy-do! A0 :- std.map A0 (c0 \ c1 \ c1 = std.spy c0) A1, std.do! A1.
% File "builtin_stdlib.elpi", line 293, column 0, characters 9706-9737: [162] 
std.while-ok-do! (as (error _) A0) _ A0 :- .
% File "builtin_stdlib.elpi", line 294, column 0, characters 9739-9760: [163] 
std.while-ok-do! ok [] ok :- .
% File "builtin_stdlib.elpi", line 295, column 0, characters 9762-9817: [164] 
std.while-ok-do! ok [A1 | A2] A3 :- A1 A0, !, std.while-ok-do! A0 A2 A3.
% File "builtin_stdlib.elpi", line 298, column 0, characters 9852-9889: [165] 
std.any->string A0 A1 :- term_to_string A0 A1.
% File "builtin_stdlib.elpi", line 301, column 0, characters 9916-9938: [166] 
std.max A0 A1 A0 :- A0 >= A1, !.
% File "builtin_stdlib.elpi", line 302, column 0, characters 9940-9949: [167] 
std.max _ A0 A0 :- .
% File "builtin_stdlib.elpi", line 306, column 0, characters 10063-10099: [168] 
std.findall A0 A1 :- findall_solutions A0 A1.
% File "builtin_map.elpi", line 8, column 0, characters 10432-10468: [169] 
std.map.make A0 (std.map std.map.private.empty A0) :- .
% File "builtin_map.elpi", line 12, column 0, characters 10564-10614: [170] 
std.map.find A2 (std.map A0 A1) A3 :- std.map.private.find A0 A1 A2 A3.
% File "builtin_map.elpi", line 16, column 0, characters 10713-10781: [171] 
std.map.add A2 A3 (std.map A0 A1) (std.map A4 A1) :- std.map.private.add A0 
                                                      A1 A2 A3 A4.
% File "builtin_map.elpi", line 20, column 0, characters 10876-10946: [172] 
std.map.remove A2 (std.map A0 A1) (std.map A3 A1) :- std.map.private.remove
                                                      A0 A1 A2 A3.
% File "builtin_map.elpi", line 24, column 0, characters 11059-11110: [173] 
std.map.bindings (std.map A0 _) A1 :- std.map.private.bindings A0 [] A1.
% File "builtin_map.elpi", line 34, column 0, characters 11302-11316: [174] 
std.map.private.height std.map.private.empty 0 :- .
% File "builtin_map.elpi", line 35, column 0, characters 11318-11343: [175] 
std.map.private.height (std.map.private.node _ _ _ _ A0) A0 :- .
% File "builtin_map.elpi", line 38, column 0, characters 11401-11476: [176] 
std.map.private.create A0 A6 A7 A2 (std.map.private.node A0 A6 A7 A2 A5) :- 
 std.map.private.height A0 A1, std.map.private.height A2 A3, 
 std.max A1 A3 A4, A5 is A4 + 1.
% File "builtin_map.elpi", line 41, column 0, characters 11531-11645: [177] 
std.map.private.bal A0 A6 A7 A2 A8 :- std.map.private.height A0 A1, 
 std.map.private.height A2 A3, A4 is A1 + 2, A5 is A3 + 2, 
 std.map.private.bal.aux A1 A3 A4 A5 A0 A6 A7 A2 A8.
% File "builtin_map.elpi", line 49, column 0, characters 11732-11863: [178] 
std.map.private.bal.aux A0 _ _ A1 (std.map.private.node A2 A10 A11 A4 _) A6 
 A7 A8 A12 :- A0 > A1, std.map.private.height A2 A3, 
 std.map.private.height A4 A5, A3 >= A5, !, 
 std.map.private.create A4 A6 A7 A8 A9, 
 std.map.private.create A2 A10 A11 A9 A12.
% File "builtin_map.elpi", line 52, column 0, characters 11865-12012: [179] 
std.map.private.bal.aux A0 _ _ A1 
 (std.map.private.node A2 A3 A4 (std.map.private.node A5 A12 A13 A7 _) _) A8 
 A9 A10 A14 :- A0 > A1, !, std.map.private.create A2 A3 A4 A5 A6, 
 std.map.private.create A7 A8 A9 A10 A11, 
 std.map.private.create A6 A12 A13 A11 A14.
% File "builtin_map.elpi", line 55, column 0, characters 12014-12145: [180] 
std.map.private.bal.aux _ A0 A1 _ A6 A7 A8 
 (std.map.private.node A4 A10 A11 A2 _) A12 :- A0 > A1, 
 std.map.private.height A2 A3, std.map.private.height A4 A5, A3 >= A5, !, 
 std.map.private.create A6 A7 A8 A4 A9, 
 std.map.private.create A9 A10 A11 A2 A12.
% File "builtin_map.elpi", line 58, column 0, characters 12147-12294: [181] 
std.map.private.bal.aux _ A0 A1 _ A2 A3 A4 
 (std.map.private.node (std.map.private.node A5 A12 A13 A7 _) A8 A9 A10 _) 
 A14 :- A0 > A1, !, std.map.private.create A2 A3 A4 A5 A6, 
 std.map.private.create A7 A8 A9 A10 A11, 
 std.map.private.create A6 A12 A13 A11 A14.
% File "builtin_map.elpi", line 61, column 0, characters 12296-12341: [182] 
std.map.private.bal.aux _ _ _ _ A0 A1 A2 A3 A4 :- std.map.private.create A0 
                                                   A1 A2 A3 A4.
% File "builtin_map.elpi", line 64, column 0, characters 12411-12456: [183] 
std.map.private.add std.map.private.empty _ A0 A1 A2 :- std.map.private.create
                                                         std.map.private.empty 
                                                         A0 A1 
                                                         std.map.private.empty 
                                                         A2.
% File "builtin_map.elpi", line 65, column 0, characters 12458-12536: [184] 
std.map.private.add (as (std.map.private.node _ A1 _ _ _) A4) A3 A0 A5 A6 :- 
 A3 A0 A1 A2, std.map.private.add.aux A2 A4 A3 A0 A5 A6.
% File "builtin_map.elpi", line 68, column 0, characters 12617-12678: [185] 
std.map.private.add.aux eq (std.map.private.node A1 _ _ A4 A5) _ A2 A3 A0 :- 
 A0 = std.map.private.node A1 A2 A3 A4 A5.
% File "builtin_map.elpi", line 69, column 0, characters 12681-12751: [186] 
std.map.private.add.aux lt (std.map.private.node A0 A5 A6 A7 _) A1 A2 A3 A8 :- 
 std.map.private.add A0 A1 A2 A3 A4, std.map.private.bal A4 A5 A6 A7 A8.
% File "builtin_map.elpi", line 70, column 0, characters 12753-12823: [187] 
std.map.private.add.aux gt (std.map.private.node A5 A6 A7 A0 _) A1 A2 A3 A8 :- 
 std.map.private.add A0 A1 A2 A3 A4, std.map.private.bal A5 A6 A7 A4 A8.
% File "builtin_map.elpi", line 73, column 0, characters 12883-12955: [188] 
std.map.private.find (std.map.private.node A4 A1 A6 A5 _) A3 A0 A7 :- 
 A3 A0 A1 A2, std.map.private.find.aux A2 A3 A4 A5 A6 A0 A7.
% File "builtin_map.elpi", line 76, column 0, characters 13042-13067: [189] 
std.map.private.find.aux eq _ _ _ A0 _ A0 :- .
% File "builtin_map.elpi", line 77, column 0, characters 13069-13112: [190] 
std.map.private.find.aux lt A1 A0 _ _ A2 A3 :- std.map.private.find A0 A1 A2 
                                                A3.
% File "builtin_map.elpi", line 78, column 0, characters 13114-13157: [191] 
std.map.private.find.aux gt A1 _ A0 _ A2 A3 :- std.map.private.find A0 A1 A2 
                                                A3.
% File "builtin_map.elpi", line 81, column 0, characters 13206-13252: [192] 
std.map.private.remove-min-binding
 (std.map.private.node std.map.private.empty _ _ A0 _) A0 :- !.
% File "builtin_map.elpi", line 82, column 0, characters 13254-13329: [193] 
std.map.private.remove-min-binding (std.map.private.node A0 A2 A3 A4 _) A5 :- 
 std.map.private.remove-min-binding A0 A1, 
 std.map.private.bal A1 A2 A3 A4 A5.
% File "builtin_map.elpi", line 85, column 0, characters 13370-13411: [194] 
std.map.private.min-binding
 (std.map.private.node std.map.private.empty A0 A1 _ _) A0 A1 :- !.
% File "builtin_map.elpi", line 86, column 0, characters 13413-13466: [195] 
std.map.private.min-binding (std.map.private.node A0 _ _ _ _) A1 A2 :- 
 std.map.private.min-binding A0 A1 A2.
% File "builtin_map.elpi", line 89, column 0, characters 13513-13533: [196] 
std.map.private.merge std.map.private.empty A0 A0 :- !.
% File "builtin_map.elpi", line 90, column 0, characters 13535-13555: [197] 
std.map.private.merge A0 std.map.private.empty A0 :- !.
% File "builtin_map.elpi", line 91, column 0, characters 13557-13634: [198] 
std.map.private.merge A4 A0 A5 :- std.map.private.min-binding A0 A1 A2, 
 std.map.private.remove-min-binding A0 A3, 
 std.map.private.bal A4 A1 A2 A3 A5.
% File "builtin_map.elpi", line 96, column 0, characters 13702-13729: [199] 
std.map.private.remove std.map.private.empty _ _ std.map.private.empty :- !.
% File "builtin_map.elpi", line 97, column 0, characters 13731-13805: [200] 
std.map.private.remove (std.map.private.node A4 A1 A6 A5 _) A3 A0 A7 :- 
 A3 A0 A1 A2, std.map.private.remove.aux A2 A3 A4 A5 A1 A6 A0 A7.
% File "builtin_map.elpi", line 100, column 0, characters 13905-13949: [201] 
std.map.private.remove.aux eq _ A0 A1 _ _ _ A2 :- std.map.private.merge A0 
                                                   A1 A2.
% File "builtin_map.elpi", line 101, column 0, characters 13951-14012: [202] 
std.map.private.remove.aux lt A1 A0 A6 A4 A5 A2 A7 :- std.map.private.remove
                                                       A0 A1 A2 A3, 
 std.map.private.bal A3 A4 A5 A6 A7.
% File "builtin_map.elpi", line 102, column 0, characters 14014-14075: [203] 
std.map.private.remove.aux gt A1 A4 A0 A5 A6 A2 A7 :- std.map.private.remove
                                                       A0 A1 A2 A3, 
 std.map.private.bal A4 A5 A6 A3 A7.
% File "builtin_map.elpi", line 105, column 0, characters 14141-14159: [204] 
std.map.private.bindings std.map.private.empty A0 A0 :- .
% File "builtin_map.elpi", line 106, column 0, characters 14161-14234: [205] 
std.map.private.bindings (std.map.private.node A3 A4 A5 A0 _) A1 A6 :- 
 std.map.private.bindings A0 A1 A2, 
 std.map.private.bindings A3 [pr A4 A5 | A2] A6.
% File "builtin_set.elpi", line 8, column 0, characters 22779-22815: [206] 
std.set.make A0 (std.set std.set.private.empty A0) :- .
% File "builtin_set.elpi", line 12, column 0, characters 22876-22919: [207] 
std.set.mem A2 (std.set A0 A1) :- std.set.private.mem A0 A1 A2.
% File "builtin_set.elpi", line 16, column 0, characters 22991-23055: [208] 
std.set.add A2 (std.set A0 A1) (std.set A3 A1) :- std.set.private.add A0 A1 
                                                   A2 A3.
% File "builtin_set.elpi", line 20, column 0, characters 23133-23203: [209] 
std.set.remove A2 (std.set A0 A1) (std.set A3 A1) :- std.set.private.remove
                                                      A0 A1 A2 A3.
% File "builtin_set.elpi", line 24, column 0, characters 23290-23338: [210] 
std.set.cardinal (std.set A0 _) A1 :- std.set.private.cardinal A0 A1.
% File "builtin_set.elpi", line 27, column 0, characters 23378-23429: [211] 
std.set.elements (std.set A0 _) A1 :- std.set.private.elements A0 [] A1.
% File "builtin_set.elpi", line 37, column 0, characters 23598-23612: [212] 
std.set.private.height std.set.private.empty 0 :- .
% File "builtin_set.elpi", line 38, column 0, characters 23614-23637: [213] 
std.set.private.height (std.set.private.node _ _ _ A0) A0 :- .
% File "builtin_set.elpi", line 41, column 0, characters 23684-23755: [214] 
std.set.private.create A0 A6 A2 (std.set.private.node A0 A6 A2 A5) :- 
 std.set.private.height A0 A1, std.set.private.height A2 A3, 
 std.max A1 A3 A4, A5 is A4 + 1.
% File "builtin_set.elpi", line 44, column 0, characters 23799-23909: [215] 
std.set.private.bal A0 A6 A2 A7 :- std.set.private.height A0 A1, 
 std.set.private.height A2 A3, A4 is A1 + 2, A5 is A3 + 2, 
 std.set.private.bal.aux A1 A3 A4 A5 A0 A6 A2 A7.
% File "builtin_set.elpi", line 52, column 0, characters 23985-24106: [216] 
std.set.private.bal.aux A0 _ _ A1 (std.set.private.node A2 A9 A4 _) A6 A7 A10 :- 
 A0 > A1, std.set.private.height A2 A3, std.set.private.height A4 A5, 
 A3 >= A5, !, std.set.private.create A4 A6 A7 A8, 
 std.set.private.create A2 A9 A8 A10.
% File "builtin_set.elpi", line 55, column 0, characters 24108-24237: [217] 
std.set.private.bal.aux A0 _ _ A1 
 (std.set.private.node A2 A3 (std.set.private.node A4 A10 A6 _) _) A7 A8 A11 :- 
 A0 > A1, !, std.set.private.create A2 A3 A4 A5, 
 std.set.private.create A6 A7 A8 A9, std.set.private.create A5 A10 A9 A11.
% File "builtin_set.elpi", line 58, column 0, characters 24239-24360: [218] 
std.set.private.bal.aux _ A0 A1 _ A6 A7 (std.set.private.node A4 A9 A2 _) A10 :- 
 A0 > A1, std.set.private.height A2 A3, std.set.private.height A4 A5, 
 A3 >= A5, !, std.set.private.create A6 A7 A4 A8, 
 std.set.private.create A8 A9 A2 A10.
% File "builtin_set.elpi", line 61, column 0, characters 24362-24491: [219] 
std.set.private.bal.aux _ A0 A1 _ A2 A3 
 (std.set.private.node (std.set.private.node A4 A10 A6 _) A7 A8 _) A11 :- 
 A0 > A1, !, std.set.private.create A2 A3 A4 A5, 
 std.set.private.create A6 A7 A8 A9, std.set.private.create A5 A10 A9 A11.
% File "builtin_set.elpi", line 64, column 0, characters 24493-24534: [220] 
std.set.private.bal.aux _ _ _ _ A0 A1 A2 A3 :- std.set.private.create A0 A1 
                                                A2 A3.
% File "builtin_set.elpi", line 67, column 0, characters 24595-24636: [221] 
std.set.private.add std.set.private.empty _ A0 A1 :- std.set.private.create
                                                      std.set.private.empty 
                                                      A0 
                                                      std.set.private.empty 
                                                      A1.
% File "builtin_set.elpi", line 68, column 0, characters 24638-24707: [222] 
std.set.private.add (std.set.private.node A4 A1 A5 A6) A3 A0 A7 :- A3 A0 A1 
                                                                    A2, 
 std.set.private.add.aux A2 A3 A4 A5 A1 A0 A6 A7.
% File "builtin_set.elpi", line 71, column 0, characters 24800-24839: [223] 
std.set.private.add.aux eq _ A0 A1 A2 _ A3 (std.set.private.node A0 A2 A1 A3) :- .
% File "builtin_set.elpi", line 72, column 0, characters 24841-24894: [224] 
std.set.private.add.aux lt A1 A0 A5 A4 A2 _ A6 :- std.set.private.add A0 A1 
                                                   A2 A3, 
 std.set.private.bal A3 A4 A5 A6.
% File "builtin_set.elpi", line 73, column 0, characters 24896-24949: [225] 
std.set.private.add.aux gt A1 A4 A0 A5 A2 _ A6 :- std.set.private.add A0 A1 
                                                   A2 A3, 
 std.set.private.bal A4 A5 A3 A6.
% File "builtin_set.elpi", line 76, column 0, characters 25001-25059: [226] 
std.set.private.mem (std.set.private.node A4 A1 A5 _) A3 A0 :- A3 A0 A1 A2, 
 std.set.private.mem.aux A2 A3 A4 A5 A0.
% File "builtin_set.elpi", line 77, column 0, characters 25061-25079: [227] 
std.set.private.mem.aux eq _ _ _ _ :- .
% File "builtin_set.elpi", line 80, column 0, characters 25151-25186: [228] 
std.set.private.mem.aux lt A1 A0 _ A2 :- std.set.private.mem A0 A1 A2.
% File "builtin_set.elpi", line 81, column 0, characters 25188-25223: [229] 
std.set.private.mem.aux gt A1 _ A0 A2 :- std.set.private.mem A0 A1 A2.
% File "builtin_set.elpi", line 84, column 0, characters 25268-25312: [230] 
std.set.private.remove-min-binding
 (std.set.private.node std.set.private.empty _ A0 _) A0 :- !.
% File "builtin_set.elpi", line 85, column 0, characters 25314-25385: [231] 
std.set.private.remove-min-binding (std.set.private.node A0 A2 A3 _) A4 :- 
 std.set.private.remove-min-binding A0 A1, std.set.private.bal A1 A2 A3 A4.
% File "builtin_set.elpi", line 88, column 0, characters 25419-25456: [232] 
std.set.private.min-binding
 (std.set.private.node std.set.private.empty A0 _ _) A0 :- !.
% File "builtin_set.elpi", line 89, column 0, characters 25458-25505: [233] 
std.set.private.min-binding (std.set.private.node A0 _ _ _) A1 :- std.set.private.min-binding
                                                                   A0 A1.
% File "builtin_set.elpi", line 92, column 0, characters 25546-25566: [234] 
std.set.private.merge std.set.private.empty A0 A0 :- !.
% File "builtin_set.elpi", line 93, column 0, characters 25568-25588: [235] 
std.set.private.merge A0 std.set.private.empty A0 :- !.
% File "builtin_set.elpi", line 94, column 0, characters 25590-25663: [236] 
std.set.private.merge A3 A0 A4 :- std.set.private.min-binding A0 A1, 
 std.set.private.remove-min-binding A0 A2, std.set.private.bal A3 A1 A2 A4.
% File "builtin_set.elpi", line 99, column 0, characters 25727-25749: [237] 
std.set.private.remove std.set.private.empty _ _ std.set.private.empty :- .
% File "builtin_set.elpi", line 100, column 0, characters 25751-25821: [238] 
std.set.private.remove (std.set.private.node A4 A1 A5 _) A3 A0 A6 :- 
 A3 A0 A1 A2, std.set.private.remove.aux A2 A3 A4 A5 A1 A0 A6.
% File "builtin_set.elpi", line 103, column 0, characters 25910-25952: [239] 
std.set.private.remove.aux eq _ A0 A1 _ _ A2 :- std.set.private.merge A0 A1 
                                                 A2.
% File "builtin_set.elpi", line 104, column 0, characters 25954-26011: [240] 
std.set.private.remove.aux lt A1 A0 A5 A4 A2 A6 :- std.set.private.remove A0 
                                                    A1 A2 A3, 
 std.set.private.bal A3 A4 A5 A6.
% File "builtin_set.elpi", line 105, column 0, characters 26013-26070: [241] 
std.set.private.remove.aux gt A1 A4 A0 A5 A2 A6 :- std.set.private.remove A0 
                                                    A1 A2 A3, 
 std.set.private.bal A4 A5 A3 A6.
% File "builtin_set.elpi", line 108, column 0, characters 26103-26119: [242] 
std.set.private.cardinal std.set.private.empty 0 :- .
% File "builtin_set.elpi", line 109, column 0, characters 26121-26186: [243] 
std.set.private.cardinal (std.set.private.node A0 _ A2 _) A4 :- std.set.private.cardinal
                                                                 A0 A1, 
 std.set.private.cardinal A2 A3, A4 is A1 + 1 + A3.
% File "builtin_set.elpi", line 112, column 0, characters 26232-26250: [244] 
std.set.private.elements std.set.private.empty A0 A0 :- .
% File "builtin_set.elpi", line 113, column 0, characters 26252-26320: [245] 
std.set.private.elements (std.set.private.node A3 A4 A0 _) A1 A5 :- std.set.private.elements
                                                                    A0 A1 A2, 
 std.set.private.elements A3 [A4 | A2] A5.
% File "builtin_set.elpi", line 255, column 0, characters 31127-31176: [246] 
printterm A2 A0 :- term_to_string A0 A1, output A2 A1.
% File "coq-builtin.elpi", line 270, column 0, characters 10866-10986: [247] default-declare-evar
declare-evar A0 A1 A2 A3 :- declare_constraint (declare-evar A0 A1 A2 A3) 
                             [A1].
% File "coq-builtin.elpi", line 279, column 0, characters 11226-11301: [248] 
rm-evar (as uvar A0) (as uvar A1) :- !, 
 declare_constraint (rm-evar A0 A1) [A0, A1].
% File "coq-builtin.elpi", line 280, column 0, characters 11303-11314: [249] 
rm-evar _ _ :- .
% File "coq-builtin.elpi", line 301, column 0, characters 12083-12186: [250] 
evar (as uvar A3) A2 A0 :- var A0 _ A1, !, prune A2 A1, prune A3 A1, 
 declare_constraint (evar A3 A2 A0) [A3, A0].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 14, column 0, characters 961-1006: [251; -558; -1582] 
evar _ _ _ :- !.
% File "/build/source/elpi/coq-elaborator.elpi", line 7, column 0, characters 296-388: [251; -558] coq-assign-evar-raw
evar A1 A2 A0 :- var A0, !, of A1 A2 A0.
% File "/build/source/elpi/coq-elaborator.elpi", line 11, column 0, characters 391-621: [251; -559] coq-assign-evar-refined-hack-8-17-Prop
evar A2 A1 A0 :- not (var A0), same_term A1 (sort prop), 
 coq.version _ 8 17 _, !, hack-8-17.propagate-Prop-constraint-inward A0, 
 coq.typecheck A0 A1 ok, A2 = A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 17, column 0, characters 1009-1058: [251; -560; -1583] 
evar _ _ _ :- !.
% File "/build/source/elpi/coq-elaborator.elpi", line 16, column 0, characters 624-744: [251; -560] coq-assign-evar-refined
evar A2 A1 A0 :- not (var A0), !, coq.typecheck A0 A1 ok, A2 = A0.
% File "coq-builtin.elpi", line 304, column 0, characters 12189-12227: [251] default-assign-evar
evar _ _ _ :- .
% File "coq-builtin.elpi", line 754, column 2, characters 30787-30946: [252] 
coq.env.const-opaque? A0 :- coq.warning elpi.deprecated elpi.const-opaque 
                             use coq.env.opaque? in place of coq.env.const-opaque?, 
 coq.env.opaque? A0.
% File "coq-builtin.elpi", line 761, column 2, characters 31035-31209: [253] 
coq.env.const-primitive? A0 :- coq.warning elpi.deprecated 
                                elpi.const-primitive 
                                use coq.env.primitive? in place of coq.env.const-primitive?, 
 coq.env.primitive? A0.
% File "coq-builtin.elpi", line 818, column 0, characters 33298-33329: [254] 
coq.env.add-context context-end :- .
% File "coq-builtin.elpi", line 819, column 0, characters 33331-33488: [255] 
coq.env.add-context (context-item A0 A1 A2 none A5) :- coq.env.add-section-variable
                                                        A0 A1 A2 A3, 
 coq.env.global (const A3) A4, coq.env.add-context (A5 A4).
% File "coq-builtin.elpi", line 822, column 0, characters 33490-33646: [256] 
coq.env.add-context (context-item A0 _ A2 (some A1) A5) :- coq.env.add-const
                                                            A0 A1 A2 ff A3, 
 coq.env.global (const A3) A4, coq.env.add-context (A5 A4).
% File "coq-builtin.elpi", line 855, column 0, characters 34835-34906: [257] 
coq.env.begin-module A0 A1 :- coq.env.begin-module-functor A0 A1 [].
% File "coq-builtin.elpi", line 868, column 0, characters 35316-35393: [258] 
coq.env.begin-module-type A0 :- coq.env.begin-module-type-functor A0 [].
% File "coq-builtin.elpi", line 1260, column 0, characters 50704-50894: [259] 
coq.CS.canonical-projections A0 A1 :- coq.warning elpi.deprecated 
                                       elpi.canonical-projections 
                                       use coq.env.projections in place of coq.CS.canonical-projections, 
 coq.env.projections A0 A1.
% File "coq-builtin.elpi", line 1571, column 0, characters 63732-63912: [260] 
coq.reduction.cbv.whd_all A0 A1 :- coq.warning elpi.deprecated 
                                    elpi.cbv-whd-all 
                                    use coq.reduction.cbv.norm in place of coq.reduction.cbv.whd_all, 
 coq.reduction.cbv.norm A0 A1.
% File "coq-builtin.elpi", line 1578, column 0, characters 64010-64191: [261] 
coq.reduction.vm.whd_all A0 A1 A2 :- coq.warning elpi.deprecated 
                                      elpi.vm-whd-all 
                                      use coq.reduction.vm.norm in place of coq.reduction.vm.whd_all, 
 coq.reduction.vm.norm A0 A1 A2.
% File "coq-builtin.elpi", line 1585, column 0, characters 64244-64337: [262] 
coq.reduction.lazy.whd_all A0 A1 :- get-option coq:redflags coq.redflags.all
                                     => coq.reduction.lazy.whd A0 A1.
% File "coq-builtin.elpi", line 1707, column 0, characters 68961-69001: [263] 
coq.id->name A0 A1 :- coq.string->name A0 A1.
% File "coq-builtin.elpi", line 1850, column 0, characters 74798-74862: [264] 
coq.elpi.accumulate A0 A1 A2 :- coq.elpi.accumulate-clauses A0 A1 [A2].
% File "/build/source/elpi/coq-lib.elpi", line 11, column 0, characters 503-580: [268; -302] 
stop A1 :- get-option ltac:fail A0, !, coq.ltac.fail A0 A1.
% File "/build/source/elpi/coq-lib-common.elpi", line 20, column 0, characters 633-673: [268] stop:begin
stop A0 :- coq.error A0.
% File "/build/source/elpi/coq-lib-common.elpi", line 62, column 0, characters 2132-2172: [269] 
supported-attribute (att elpi.loc loc) :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 63, column 0, characters 2174-2240: [270] 
supported-attribute (att A0 string) :- rex_match ^elpi\. A0.
% File "/build/source/elpi/coq-lib-common.elpi", line 79, column 0, characters 2777-3083: [271] 
coq.valid-str-attribute A0 A2 A5 A4 :- if (supported-attribute (att A0 A1)) 
                                        (coq.typecheck-attribute A0 A1 A2 A3 
                                          A4 , A5 = some A3) 
                                        (if
                                          (supported-attribute
                                            att-ignore-unknown) 
                                          (A5 = none , A4 = ok) 
                                          (calc
                                            (Attribute  ^ A0 ^
                                               is not supported) A6 ,
                                            A4 = error A6)).
% File "/build/source/elpi/coq-lib-common.elpi", line 85, column 0, characters 3145-3506: [272] 
coq.valid-loc-attribute A0 A1 A2 :- if (supported-attribute (att A0 loc)) 
                                     (if (primitive? A1 loc) (A2 = ok) 
                                       ((std.any->string A1 A3 ,
                                          calc
                                           (Attribute  ^ A0 ^
                                              takes a loc, got  ^ A3) A4) ,
                                         A2 = error A4)) 
                                     (if
                                       (supported-attribute
                                         att-ignore-unknown) (A2 = ok) 
                                       (calc
                                         (Attribute  ^ A0 ^  is not supported) 
                                         A5 , A2 = error A5)).
% File "/build/source/elpi/coq-lib-common.elpi", line 94, column 0, characters 3613-3684: [273] 
coq.typecheck-attribute _ int A1 A0 ok :- A0 is string_to_int A1, !.
% File "/build/source/elpi/coq-lib-common.elpi", line 95, column 0, characters 3686-3801: [274] 
coq.typecheck-attribute A1 int A2 _ (error A0) :- A0 is
                                                   Attribute  ^ A1 ^
                                                     takes an integer, got: 
                                                    ^ A2.
% File "/build/source/elpi/coq-lib-common.elpi", line 98, column 0, characters 3804-3843: [275] 
coq.typecheck-attribute _ string A0 A0 ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 100, column 0, characters 3846-3890: [276] 
coq.typecheck-attribute _ bool true tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 101, column 0, characters 3892-3936: [277] 
coq.typecheck-attribute _ bool tt tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 102, column 0, characters 3938-3982: [278] 
coq.typecheck-attribute _ bool True tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 103, column 0, characters 3984-4028: [279] 
coq.typecheck-attribute _ bool on tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 104, column 0, characters 4030-4075: [280] 
coq.typecheck-attribute _ bool yes tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 105, column 0, characters 4077-4121: [281] 
coq.typecheck-attribute _ bool  tt ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 106, column 0, characters 4123-4167: [282] 
coq.typecheck-attribute _ bool false ff ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 107, column 0, characters 4169-4213: [283] 
coq.typecheck-attribute _ bool False ff ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 108, column 0, characters 4215-4259: [284] 
coq.typecheck-attribute _ bool off ff ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 109, column 0, characters 4261-4305: [285] 
coq.typecheck-attribute _ bool ff ff ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 110, column 0, characters 4307-4351: [286] 
coq.typecheck-attribute _ bool no ff ok :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 111, column 0, characters 4353-4469: [287] 
coq.typecheck-attribute A1 bool A2 _ (error A0) :- A0 is
                                                    Attribute  ^ A1 ^
                                                      takes an boolean, got: 
                                                     ^ A2.
% File "/build/source/elpi/coq-lib-common.elpi", line 115, column 0, characters 4529-4556: [288] 
coq.is-one-of A0 A1 (A0 `-> A1) :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 117, column 0, characters 4559-4640: [289] 
coq.typecheck-attribute _ (oneof A0) A1 A2 ok :- std.exists A0 
                                                  (coq.is-one-of A1 A2), !.
% File "/build/source/elpi/coq-lib-common.elpi", line 118, column 0, characters 4642-4863: [290] 
coq.typecheck-attribute A4 (oneof A0) A5 _ (error A3) :- std.map A0 (c0 \
                                                          c1 \
                                                          sigma c2 \
                                                           c0 = c1 `-> c2) A1, 
 std.fold A1  (c0 \ c1 \ calc (c1 ^   ^ c0)) A2, 
 A3 is Attribute  ^ A4 ^  takes one of  ^ A2 ^ , got:  ^ A5.
% File "/build/source/elpi/coq-lib-common.elpi", line 124, column 0, characters 4915-4940: [291] 
append-string  A0 A0 :- !.
% File "/build/source/elpi/coq-lib-common.elpi", line 125, column 0, characters 4942-4981: [292] 
append-string A1 A2 A0 :- A0 is A1 ^ . ^ A2.
% File "/build/source/elpi/coq-lib-common.elpi", line 128, column 0, characters 5031-5090: [293] 
keep-only-label (attribute A0 _) (attribute A0 (leaf-str )) :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 130, column 0, characters 5093-5210: [294] 
coq.parse-attributes A2 A0 A3 :- std.map A0 (c0 \ c1 \
                                  c1 = supported-attribute c0) A1, 
 A1 => parse-attributes.aux A2  A3, !.
% File "/build/source/elpi/coq-lib-common.elpi", line 135, column 0, characters 5280-5308: [295] 
parse-attributes.aux [] _ [] :- .
% File "/build/source/elpi/coq-lib-common.elpi", line 136, column 0, characters 5310-5599: [296] 
parse-attributes.aux [attribute A1 (node A5) | A3] A0 A7 :- append-string A0 
                                                             A1 A2, 
 supported-attribute (att A2 attlist), !, parse-attributes.aux A3 A0 A4, 
 pi c0 \ supported-attribute (att c0 bool) :- ! =>
  parse-attributes.aux A5  A6, std.append A4 [get-option A2 A6] A7.
% File "/build/source/elpi/coq-lib-common.elpi", line 141, column 0, characters 5601-5891: [297] 
parse-attributes.aux [attribute A1 (node A5) | A3] A0 A7 :- append-string A0 
                                                             A1 A2, 
 supported-attribute (att A2 attmap), !, parse-attributes.aux A3 A0 A4, 
 pi c0 \ supported-attribute (att c0 string) :- ! =>
  parse-attributes.aux A5  A6, std.append A4 [get-option A2 A6] A7.
% File "/build/source/elpi/coq-lib-common.elpi", line 146, column 0, characters 5893-6255: [298] 
parse-attributes.aux [attribute A1 (node A5) | A3] A0 A9 :- append-string A0 
                                                             A1 A2, 
 supported-attribute (att A2 attlabel), !, parse-attributes.aux A3 A0 A4, 
 std.map A5 keep-only-label A6, 
 pi c0 \ supported-attribute (att c0 bool) :- ! =>
  parse-attributes.aux A6  A7, parse-attributes.aux A5 A0 A8, 
 std.append A4 [get-option A2 A7 | A8] A9.
% File "/build/source/elpi/coq-lib-common.elpi", line 153, column 0, characters 6257-6437: [299] 
parse-attributes.aux [attribute A3 (node A5) | A0] A1 A7 :- !, 
 parse-attributes.aux A0 A1 A2, append-string A1 A3 A4, 
 parse-attributes.aux A5 A4 A6, std.append A2 A6 A7.
% File "/build/source/elpi/coq-lib-common.elpi", line 158, column 0, characters 6439-6728: [300] 
parse-attributes.aux [attribute A1 (leaf-str A3) | A10] A0 A8 :- !, 
 append-string A0 A1 A2, coq.valid-str-attribute A2 A3 A4 A5, 
 if (A5 = error A6) (coq.error A6) true, 
 if (A4 = some A7) (A8 = [get-option A2 A7 | A9]) (A8 = A9), 
 parse-attributes.aux A10 A0 A9.
% File "/build/source/elpi/coq-lib-common.elpi", line 164, column 0, characters 6730-6973: [301] 
parse-attributes.aux [attribute A1 (leaf-loc A3) | A8] A0 A6 :- !, 
 append-string A0 A1 A2, coq.valid-loc-attribute A2 A3 A4, 
 if (A4 = error A5) (coq.error A5) true, A6 = [get-option A2 A3 | A7], 
 parse-attributes.aux A8 A0 A7.
% File "/build/source/elpi/coq-lib.elpi", line 25, column 0, characters 1038-1064: [303] 
coq.subst-prod [] A0 A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 26, column 0, characters 1066-1134: [304] 
coq.subst-prod [A1 | A0] (prod _ _ A2) A3 :- !, coq.subst-prod A0 (A2 A1) A3.
% File "/build/source/elpi/coq-lib.elpi", line 27, column 0, characters 1136-1201: [305] 
coq.subst-prod A0 (let _ _ A1 A2) A3 :- !, coq.subst-prod A0 (A2 A1) A3.
% File "/build/source/elpi/coq-lib.elpi", line 28, column 0, characters 1203-1308: [306] subst-prod:fail
coq.subst-prod [_ | _] A0 _ :- !, 
 std.fatal-error-w-data subst-prod: not a product A0.
% File "/build/source/elpi/coq-lib.elpi", line 33, column 0, characters 1359-1384: [307] 
coq.subst-fun [] A0 A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 34, column 0, characters 1386-1451: [308] 
coq.subst-fun [A1 | A0] (fun _ _ A2) A3 :- !, coq.subst-fun A0 (A2 A1) A3.
% File "/build/source/elpi/coq-lib.elpi", line 35, column 0, characters 1453-1516: [309] 
coq.subst-fun A0 (let _ _ A1 A2) A3 :- !, coq.subst-fun A0 (A2 A1) A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 18, column 0, characters 1210-1291: [310; -1421] 
coq.subst-fun A1 A0 A2 :- !, coq.mk-app A0 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 18, column 0, characters 1150-1231: [310; -1545] 
coq.subst-fun A1 A0 A2 :- !, coq.mk-app A0 A1 A2.
% File "/build/source/elpi/coq-lib.elpi", line 36, column 0, characters 1518-1620: [310] subst-fun:fail
coq.subst-fun [_ | _] A0 _ :- !, 
 std.fatal-error-w-data subst-fun: not a lambda A0.
% File "/build/source/elpi/coq-lib.elpi", line 41, column 0, characters 1659-1737: [311] 
coq.prod-R-fun (prod A2 A3 A0) (fun A2 A3 A1) :- !, 
 pi c0 \ coq.prod-R-fun (A0 c0) (A1 c0).
% File "/build/source/elpi/coq-lib.elpi", line 42, column 0, characters 1739-1820: [312] 
coq.prod-R-fun (let A2 A3 A4 A0) (let A2 A3 A4 A1) :- !, 
 pi c0 \ coq.prod-R-fun (A0 c0) (A1 c0).
% File "/build/source/elpi/coq-lib.elpi", line 43, column 0, characters 1822-1840: [313] 
coq.prod-R-fun A0 A0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 46, column 0, characters 1878-1954: [314] 
coq.prod->fun (prod A2 A3 A0) (fun A2 A3 A1) :- !, 
 pi c0 \ coq.prod->fun (A0 c0) (A1 c0).
% File "/build/source/elpi/coq-lib.elpi", line 47, column 0, characters 1956-2035: [315] 
coq.prod->fun (let A2 A3 A4 A0) (let A2 A3 A4 A1) :- !, 
 pi c0 \ coq.prod->fun (A0 c0) (A1 c0).
% File "/build/source/elpi/coq-lib.elpi", line 48, column 0, characters 2037-2054: [316] 
coq.prod->fun A0 A0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 51, column 0, characters 2093-2187: [317] 
coq.count-prods (prod A2 A3 A0) A4 :- !, 
 pi c0 \ decl c0 A2 A3 => coq.count-prods (A0 c0) A1, A4 is A1 + 1.
% File "/build/source/elpi/coq-lib.elpi", line 53, column 0, characters 2189-2271: [318] 
coq.count-prods (let A3 A4 A5 A0) A1 :- !, 
 pi c0 \ def c0 A3 A4 A5 => cache c0 A2 => coq.count-prods (A0 c0) A1.
% File "/build/source/elpi/coq-lib.elpi", line 55, column 0, characters 2273-2375: [319] 
coq.count-prods A0 A2 :- !, coq.reduction.lazy.whd A0 A1, 
 if (A0 == A1) (A2 = 0) (coq.count-prods A1 A2).
% File "/build/source/elpi/coq-lib.elpi", line 60, column 0, characters 2416-2441: [320] 
coq.mk-n-holes 0 [] :- !.
% File "/build/source/elpi/coq-lib.elpi", line 61, column 0, characters 2443-2508: [321] 
coq.mk-n-holes A1 [A3 | A2] :- !, A0 is A1 - 1, coq.mk-n-holes A0 A2.
% File "/build/source/elpi/coq-lib.elpi", line 64, column 0, characters 2563-2664: [322] 
coq.safe-dest-app (app [A0 | A3]) A1 A4 :- !, coq.safe-dest-app A0 A1 A2, 
 std.append A2 A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 66, column 0, characters 2666-2690: [323] 
coq.safe-dest-app A0 A0 [] :- .
% File "/build/source/elpi/coq-lib.elpi", line 69, column 0, characters 2738-2762: [324] 
coq.mk-app A0 [] A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 70, column 0, characters 2764-2825: [325] 
coq.mk-app (app A0) A1 (app A2) :- !, std.append A0 A1 A2.
% File "/build/source/elpi/coq-lib.elpi", line 71, column 0, characters 2827-2890: [326] 
coq.mk-app (fun _ _ A1) [A0 | A2] A3 :- !, coq.mk-app (A1 A0) A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 72, column 0, characters 2892-2953: [327] 
coq.mk-app (let _ _ A0 A1) A2 A3 :- !, coq.mk-app (A1 A0) A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 73, column 0, characters 2955-2989: [328] 
coq.mk-app A0 A1 (app [A0 | A1]) :- .
% File "/build/source/elpi/coq-lib.elpi", line 76, column 0, characters 3041-3070: [329] 
coq.mk-app-uvar A0 [] A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 77, column 0, characters 3072-3164: [330] 
coq.mk-app-uvar (as uvar A0) [A2 | A3] A4 :- !, std.unsafe-cast A0 A1, 
 coq.mk-app-uvar (A1 A2) A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 83, column 0, characters 3401-3424: [331] 
coq.mk-eta 0 _ A0 A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 84, column 0, characters 3426-3545: [332] 
coq.mk-eta A1 (prod A5 A6 A2) (fun _ _ A3) (fun A5 A6 A4) :- !, 
 A0 is A1 - 1, pi c0 \ coq.mk-eta A0 (A2 c0) (A3 c0) (A4 c0).
% File "/build/source/elpi/coq-lib.elpi", line 86, column 0, characters 3547-3679: [333] 
coq.mk-eta A1 (prod A6 A7 A4) A2 (fun A6 A7 A5) :- !, A0 is A1 - 1, 
 pi c0 \ coq.mk-app A2 [c0] (A3 c0) , coq.mk-eta A0 (A4 c0) (A3 c0) (A5 c0).
% File "/build/source/elpi/coq-lib.elpi", line 88, column 0, characters 3681-3723: [334] mk-eta:end
coq.mk-eta _ _ A0 A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 92, column 0, characters 3768-3895: [335] 
coq.saturate A0 A4 A7 :- whd A0 [] (prod A1 A2 A3) [], !, 
 coq.mk-app A4 [A5] A6, pi c0 \ decl c0 A1 A2 => coq.saturate (A3 c0) A6 A7.
% File "/build/source/elpi/coq-lib.elpi", line 95, column 0, characters 3897-3915: [336] 
coq.saturate _ A0 A0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 101, column 0, characters 4092-4142: [337] copy:start
copy A0 A1 :- name A0, !, A0 = A1, !.
% File "/build/source/elpi/coq-lib.elpi", line 103, column 0, characters 4182-4209: [338] 
copy (as (global _) A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 104, column 0, characters 4211-4241: [339] 
copy (as (pglobal _ _) A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 105, column 0, characters 4243-4268: [340] 
copy (as (sort _) A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 106, column 0, characters 4270-4343: [341] 
copy (fun A4 A0 A2) (fun A4 A1 A3) :- !, copy A0 A1, 
 pi c0 \ copy (A2 c0) (A3 c0).
% File "/build/source/elpi/coq-lib.elpi", line 108, column 0, characters 4345-4434: [342] 
copy (let A6 A0 A2 A4) (let A6 A1 A3 A5) :- !, copy A0 A1, copy A2 A3, 
 pi c0 \ copy (A4 c0) (A5 c0).
% File "/build/source/elpi/coq-lib.elpi", line 110, column 0, characters 4436-4513: [343] 
copy (prod A4 A0 A2) (prod A4 A1 A3) :- !, copy A0 A1, 
 pi c0 \ copy (A2 c0) (A3 c0).
% File "/build/source/elpi/coq-lib.elpi", line 112, column 0, characters 4515-4556: [344] 
copy (app A0) (app A1) :- !, std.map A0 copy A1.
% File "/build/source/elpi/coq-lib.elpi", line 113, column 0, characters 4558-4643: [345] 
copy (fix A4 A5 A0 A2) (fix A4 A5 A1 A3) :- !, copy A0 A1, 
 pi c0 \ copy (A2 c0) (A3 c0).
% File "/build/source/elpi/coq-lib.elpi", line 115, column 0, characters 4645-4732: [346] 
copy (match A0 A2 A4) (match A1 A3 A5) :- !, copy A0 A1, copy A2 A3, 
 std.map A4 copy A5.
% File "/build/source/elpi/coq-lib.elpi", line 117, column 0, characters 4734-4764: [347] 
copy (as (primitive _) A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 118, column 0, characters 4766-4839: [348] 
copy (as (uvar A3 A1) A0) A4 :- var A0, !, std.map A1 copy A2, 
 coq.mk-app-uvar A3 A2 A4.
% File "/build/source/elpi/coq-lib.elpi", line 120, column 0, characters 4866-4910: [349] 
copy (uvar A2 A0) (uvar A2 A1) :- std.map A0 copy A1.
% File "/build/source/elpi/coq-lib.elpi", line 123, column 0, characters 4948-5013: [350] 
copy-ctx-item (decl A0 A4 A2) (decl A1 A4 A3) :- copy A0 A1, copy A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 124, column 0, characters 5015-5096: [351] 
copy-ctx-item (def A0 A6 A2 A4) (def A1 A6 A3 A5) :- copy A0 A1, copy A2 A3, 
 copy A4 A5.
% File "/build/source/elpi/coq-lib.elpi", line 128, column 0, characters 5133-5237: [352] 
copy-arity (parameter A4 A5 A0 A2) (parameter A4 A5 A1 A3) :- copy A0 A1, 
 pi c0 \ copy-arity (A2 c0) (A3 c0).
% File "/build/source/elpi/coq-lib.elpi", line 130, column 0, characters 5239-5283: [353] 
copy-arity (arity A0) (arity A1) :- copy A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 133, column 0, characters 5332-5464: [354] 
copy-indt-decl (parameter A2 A5 A0 A3) (parameter A2 A5 A1 A4) :- copy A0 A1, 
 sigma c0 \
  coq.id->name A2 c0 ,
   pi c1 \ decl c1 c0 A1 => copy-indt-decl (A3 c1) (A4 c1).
% File "/build/source/elpi/coq-lib.elpi", line 136, column 0, characters 5466-5611: [355] 
copy-indt-decl (inductive A2 A6 A0 A4) (inductive A2 A6 A1 A5) :- copy-arity
                                                                   A0 A1, 
 sigma c0 \
  , (coq.id->name A2 c0) (coq.arity->term A1 A3) 
   (pi c1 \ decl c1 c0 A3 => std.map (A4 c1) copy-constructor (A5 c1)).
% File "/build/source/elpi/coq-lib.elpi", line 139, column 0, characters 5613-5704: [356] 
copy-indt-decl (record A4 A0 A5 A2) (record A4 A1 A5 A3) :- copy A0 A1, 
 copy-fields A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 144, column 0, characters 5754-5787: [357] 
copy-fields end-record end-record :- .
% File "/build/source/elpi/coq-lib.elpi", line 145, column 0, characters 5789-5906: [358] 
copy-fields (field A5 A2 A0 A3) (field A5 A2 A1 A4) :- copy A0 A1, 
 sigma c0 \
  coq.id->name A2 c0 , pi c1 \ decl c1 c0 A1 => copy-fields (A3 c1) (A4 c1).
% File "/build/source/elpi/coq-lib.elpi", line 150, column 0, characters 5957-6031: [359] 
copy-constructor (constructor A2 A0) (constructor A2 A1) :- copy-arity A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 153, column 0, characters 6074-6136: [360] fold-map:start
fold-map A0 A2 A1 A2 :- name A0, !, A0 = A1, !.
% File "/build/source/elpi/coq-lib.elpi", line 155, column 0, characters 6184-6219: [361] 
fold-map (as (global _) A0) A1 A0 A1 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 156, column 0, characters 6221-6259: [362] 
fold-map (as (pglobal _ _) A0) A1 A0 A1 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 157, column 0, characters 6261-6294: [363] 
fold-map (as (sort _) A0) A1 A0 A1 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 158, column 0, characters 6296-6397: [364] 
fold-map (fun A7 A0 A4) A1 (fun A7 A2 A5) A6 :- !, fold-map A0 A1 A2 A3, 
 pi c0 \ fold-map (A4 c0) A3 (A5 c0) A6.
% File "/build/source/elpi/coq-lib.elpi", line 160, column 0, characters 6399-6526: [365] 
fold-map (let A10 A0 A4 A7) A1 (let A10 A2 A5 A8) A9 :- !, 
 fold-map A0 A1 A2 A3, fold-map A4 A3 A5 A6, 
 pi c0 \ fold-map (A7 c0) A6 (A8 c0) A9.
% File "/build/source/elpi/coq-lib.elpi", line 162, column 0, characters 6528-6633: [366] 
fold-map (prod A7 A0 A4) A1 (prod A7 A2 A5) A6 :- !, fold-map A0 A1 A2 A3, 
 pi c0 \ fold-map (A4 c0) A3 (A5 c0) A6.
% File "/build/source/elpi/coq-lib.elpi", line 164, column 0, characters 6635-6703: [367] 
fold-map (app A0) A1 (app A2) A3 :- !, std.fold-map A0 A1 fold-map A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 165, column 0, characters 6705-6818: [368] 
fold-map (fix A7 A8 A0 A4) A1 (fix A7 A8 A2 A5) A6 :- !, 
 fold-map A0 A1 A2 A3, pi c0 \ fold-map (A4 c0) A3 (A5 c0) A6.
% File "/build/source/elpi/coq-lib.elpi", line 167, column 0, characters 6820-6954: [369] 
fold-map (match A0 A4 A7) A1 (match A2 A5 A8) A9 :- !, fold-map A0 A1 A2 A3, 
 fold-map A4 A3 A5 A6, std.fold-map A7 A6 fold-map A8 A9.
% File "/build/source/elpi/coq-lib.elpi", line 169, column 0, characters 6956-6994: [370] 
fold-map (as (primitive _) A0) A1 A0 A1 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 170, column 0, characters 6996-7096: [371] 
fold-map (as (uvar A5 A1) A0) A2 A6 A4 :- var A0, !, 
 std.fold-map A1 A2 fold-map A3 A4, coq.mk-app-uvar A5 A3 A6.
% File "/build/source/elpi/coq-lib.elpi", line 172, column 0, characters 7123-7194: [372] 
fold-map (uvar A4 A0) A1 (uvar A4 A2) A3 :- std.fold-map A0 A1 fold-map A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 175, column 0, characters 7246-7339: [373] 
fold-map-ctx-item (decl A0 A7 A4) A1 (decl A2 A7 A5) A6 :- fold-map A0 A1 A2 
                                                            A3, 
 fold-map A4 A3 A5 A6.
% File "/build/source/elpi/coq-lib.elpi", line 176, column 0, characters 7341-7460: [374] 
fold-map-ctx-item (def A0 A10 A4 A7) A1 (def A2 A10 A5 A8) A9 :- fold-map A0 
                                                                  A1 A2 A3, 
 fold-map A4 A3 A5 A6, fold-map A7 A6 A8 A9.
% File "/build/source/elpi/coq-lib.elpi", line 180, column 0, characters 7512-7644: [375] 
fold-map-arity (parameter A7 A8 A0 A4) A1 (parameter A7 A8 A2 A5) A6 :- 
 fold-map A0 A1 A2 A3, pi c0 \ fold-map-arity (A4 c0) A3 (A5 c0) A6.
% File "/build/source/elpi/coq-lib.elpi", line 182, column 0, characters 7646-7708: [376] 
fold-map-arity (arity A0) A1 (arity A2) A3 :- fold-map A0 A1 A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 190, column 0, characters 7937-8001: [377] 
coq.upoly-decl->attribute (upoly-decl A0 A1 A2 A3) 
 (get-option coq:udecl (upoly-decl A0 A1 A2 A3)) :- .
% File "/build/source/elpi/coq-lib.elpi", line 191, column 0, characters 8003-8079: [378] 
coq.upoly-decl->attribute (upoly-decl-cumul A0 A1 A2 A3) 
 (get-option coq:udecl-cumul (upoly-decl-cumul A0 A1 A2 A3)) :- .
% File "/build/source/elpi/coq-lib.elpi", line 194, column 0, characters 8151-8402: [379] 
coq.upoly-decl.complete-constraints (upoly-decl A0 A6 A3 A7) 
 (upoly-decl A0 A6 A5 A7) :- std.do!
                              [std.map A0 (coq.univ.variable.constraints) A1, 
                               std.flatten A1 A2, 
                               std.filter A2 (c0 \ not (std.mem A3 c0)) A4, 
                               std.append A3 A4 A5].
% File "/build/source/elpi/coq-lib.elpi", line 201, column 0, characters 8491-8776: [380] 
coq.upoly-decl-cumul.complete-constraints (upoly-decl-cumul A0 A6 A3 A7) 
 (upoly-decl-cumul A0 A6 A5 A7) :- std.do!
                                    [std.map A0 
                                      coq.upoly-decl-cumul.complete-constraints.aux 
                                      A1, std.flatten A1 A2, 
                                     std.filter A2 (c0 \
                                      not (std.mem A3 c0)) A4, 
                                     std.append A3 A4 A5].
% File "/build/source/elpi/coq-lib.elpi", line 208, column 0, characters 8870-8965: [381] 
coq.upoly-decl-cumul.complete-constraints.aux (auto A0) A1 :- coq.univ.variable.constraints
                                                               A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 209, column 0, characters 8967-9067: [382] 
coq.upoly-decl-cumul.complete-constraints.aux (covariant A0) A1 :- coq.univ.variable.constraints
                                                                    A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 210, column 0, characters 9069-9169: [383] 
coq.upoly-decl-cumul.complete-constraints.aux (invariant A0) A1 :- coq.univ.variable.constraints
                                                                    A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 211, column 0, characters 9171-9272: [384] 
coq.upoly-decl-cumul.complete-constraints.aux (irrelevant A0) A1 :- coq.univ.variable.constraints
                                                                    A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 217, column 0, characters 9413-9540: [385] 
coq.build-indt-decl A0 A1 A2 A3 A4 A5 A6 A7 :- coq.build-indt-decl-aux A0 A1 
                                                A2 A3 A4 A5 A6 [] A7.
% File "/build/source/elpi/coq-lib.elpi", line 222, column 0, characters 9694-10397: [386] 
coq.build-indt-decl-aux (pr A8 A11) A12 A1 0 A0 A9 A3 A5 
 (inductive A11 A12 A2 A10) :- !, coq.term->arity A0 A1 A2, 
 std.map A3 (c0 \ coq.term->arity c0 A1) A4, std.rev A5 A6, 
 pi c0 \
  A7 c0 =
   [pi c1 \
     pi c2 \
      copy (app [global (indt A8) | c2]) (app [c0 | c1]) :-
       ! , std.appendR A6 c1 c2, 
    pi c1 \
     pi c2 \
      pi c3 \
       copy (app [pglobal (indt A8) c3 | c2]) (app [c0 | c1]) :-
        ! , std.appendR A6 c1 c2, (copy (global (indt A8)) c0 :- !), 
    pi c1 \ copy (pglobal (indt A8) c1) c0 :- !], 
 pi c0 \
  std.map2 A9 A4 (c1 \ c2 \ c3 \
   sigma c4 \
    sigma c5 \
     , (A7 c0 => copy-arity c2 c4) (c1 = pr _ c5) (c3 = constructor c5 c4)) 
   (A10 c0).
% File "/build/source/elpi/coq-lib.elpi", line 240, column 0, characters 10400-10726: [387] 
coq.build-indt-decl-aux A8 A9 A0 A1 (prod A2 A14 A10) A11 A6 A12 
 (parameter A3 explicit A14 A13) :- A0 > 0, A1 > 0, !, coq.name->id A2 A3, 
 A4 is A0 - 1, A5 is A1 - 1, 
 pi c0 \
  std.map A6 (coq.subst-prod [c0]) (A7 c0) ,
   coq.build-indt-decl-aux A8 A9 A4 A5 (A10 c0) A11 (A7 c0) [c0 | A12] 
    (A13 c0).
% File "/build/source/elpi/coq-lib.elpi", line 248, column 0, characters 10729-10874: [388] coq.build-indt-decl-aux:fail
coq.build-indt-decl-aux _ _ _ _ _ _ _ _ _ :- !, 
 std.fatal-error coq.build-indt-decl-aux: invalid declaration.
% File "/build/source/elpi/coq-lib.elpi", line 256, column 0, characters 10945-11092: [389] 
coq.rename-arity A2 (parameter A0 A6 A5 A3) (parameter A1 A6 A5 A4) :- 
 A2 A0 A1, 
 sigma c0 \
  coq.id->name A0 c0 ,
   pi c1 \ decl c1 c0 A5 => coq.rename-arity A2 (A3 c1) (A4 c1).
% File "/build/source/elpi/coq-lib.elpi", line 260, column 0, characters 11094-11132: [390] 
coq.rename-arity _ (arity A0) (arity A0) :- .
% File "/build/source/elpi/coq-lib.elpi", line 269, column 0, characters 11404-11571: [391] 
coq.rename-indt-decl A2 A3 A4 (parameter A0 A8 A7 A5) (parameter A1 A8 A7 A6) :- 
 A2 A0 A1, 
 sigma c0 \
  coq.id->name A0 c0 ,
   pi c1 \ decl c1 c0 A7 => coq.rename-indt-decl A2 A3 A4 (A5 c1) (A6 c1).
% File "/build/source/elpi/coq-lib.elpi", line 273, column 0, characters 11573-11830: [392] 
coq.rename-indt-decl A3 A2 A9 (inductive A0 A11 A4 A8) 
 (inductive A1 A11 A5 A10) :- A2 A0 A1, coq.rename-arity A3 A4 A5, 
 coq.id->name A0 A6, coq.arity->term A4 A7, 
 pi c0 \
  decl c0 A6 A7 =>
   std.map (A8 c0) (coq.rename-indt-decl.aux A3 A2 A9) (A10 c0).
% File "/build/source/elpi/coq-lib.elpi", line 280, column 0, characters 11832-11932: [393] 
coq.rename-indt-decl _ A2 A5 (record A0 A6 A3 A7) (record A1 A6 A4 A7) :- 
 A2 A0 A1, A5 A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 289, column 0, characters 12065-12180: [394] 
coq.rename-indt-decl.aux A3 _ A2 (constructor A0 A4) (constructor A1 A5) :- 
 A2 A0 A1, coq.rename-arity A3 A4 A5.
% File "/build/source/elpi/coq-lib.elpi", line 294, column 0, characters 12235-12430: [395] 
coq.ensure-fresh-global-id A1 A2 :- A0 is A1, coq.env.fresh-global-id A0 A2, 
 if (A0 = A2) true 
  (coq.warning elpi elpi.renamed Global name A0 is taken, using A2 instead).
% File "/build/source/elpi/coq-lib.elpi", line 302, column 0, characters 12551-12667: [396] 
coq.typecheck-indt-decl.heuristic-var-type (as (uvar _ _) A1) A2 :- !, 
 coq.univ.new A0, coq.unify-eq A1 (sort (typ A0)) A2.
% File "/build/source/elpi/coq-lib.elpi", line 304, column 0, characters 12669-12716: [397] 
coq.typecheck-indt-decl.heuristic-var-type _ ok :- .
% File "/build/source/elpi/coq-lib.elpi", line 307, column 0, characters 12787-13033: [398] 
coq.typecheck-indt-arity (parameter A2 _ A1 A3) (prod A7 A1 A4) A6 A0 :- 
 std.do-ok! A0 
  [coq.typecheck-ty A1 _, (c0 \
   sigma c1 \
    coq.id->name A2 c1 ,
     pi c2 \ decl c2 c1 A1 => coq.typecheck-indt-arity (A3 c2) (A4 c2) A5 c0), 
   std.lift-ok (A6 is A5 + 1) , std.lift-ok (coq.id->name A2 A7) ].
% File "/build/source/elpi/coq-lib.elpi", line 313, column 0, characters 13035-13169: [399] 
coq.typecheck-indt-arity (arity A1) A1 0 A0 :- std.do-ok! A0 
                                                [coq.typecheck-ty A1 _, 
                                                 coq.typecheck-indt-decl.heuristic-var-type
                                                  A1].
% File "/build/source/elpi/coq-lib.elpi", line 319, column 0, characters 13228-13388: [400] 
coq.typecheck-indt-decl (parameter A2 _ A1 A3) A0 :- std.do-ok! A0 
                                                      [coq.typecheck-ty A1 _, 
                                                       (c0 \
                                                       sigma c1 \
                                                        coq.id->name A2 c1 ,
                                                         pi c2 \
                                                          decl c2 c1 A1 =>
                                                           coq.typecheck-indt-decl
                                                            (A3 c2) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 323, column 0, characters 13390-13595: [401] 
coq.typecheck-indt-decl (inductive A4 _ A1 A5) A0 :- std.do-ok! A0 
                                                      [coq.typecheck-indt-arity
                                                        A1 A2 A3, (c0 \
                                                       sigma c1 \
                                                        coq.id->name A4 c1 ,
                                                         pi c2 \
                                                          decl c2 c1 A2 =>
                                                           std.forall-ok
                                                            (A5 c2) 
                                                            (coq.typecheck-indt-decl-c
                                                              c2 A2 A3) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 327, column 0, characters 13597-13870: [402] 
coq.typecheck-indt-decl (record A2 A1 _ A3) A0 :- std.do-ok! A0 
                                                   [coq.typecheck-ty A1 _, 
                                                    (c0 \
                                                    sigma c1 \
                                                     coq.id->name A2 c1 ,
                                                      pi c2 \
                                                       decl c2 c1 A1 =>
                                                        std.do-ok! c0 
                                                         [std.lift-ok
                                                           (coq.typecheck-indt-decl-field
                                                             c2 A3 (A4 c2)) , 
                                                          coq.typecheck-indt-decl-c
                                                           c2 A1 0 
                                                           (constructor
                                                             fields 
                                                             (arity (A4 c2)))])].
% File "/build/source/elpi/coq-lib.elpi", line 336, column 0, characters 13949-14043: [403] 
coq.typecheck-indc-arity A0 0 A1 A2 A3 :- !, coq.arity->term A0 A1, 
 coq.typecheck-ty A1 A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 339, column 0, characters 14045-14307: [404] 
coq.typecheck-indc-arity (parameter A4 _ A1 A5) A3 (prod A8 A1 A6) A7 A0 :- 
 std.do-ok! A0 
  [coq.typecheck-ty A1 _, std.lift-ok (A2 is A3 - 1) , (c0 \
   sigma c1 \
    coq.id->name A4 c1 ,
     pi c2 \
      decl c2 c1 A1 => coq.typecheck-indc-arity (A5 c2) A2 (A6 c2) A7 c0), 
   std.lift-ok (coq.id->name A4 A8) ].
% File "/build/source/elpi/coq-lib.elpi", line 347, column 0, characters 14391-14673: [405] 
coq.typecheck-indt-decl-c A5 A6 A2 (constructor _ A1) A0 :- std.do-ok! A0 
                                                             [coq.typecheck-indc-arity
                                                               A1 A2 A3 A4, 
                                                              coq.typecheck-indt-decl-c.unify-arrow-tgt
                                                               A5 0 A6 A3, 
                                                              std.lift-ok
                                                               (coq.arity->sort
                                                                 A6 A7) , 
                                                              std.lift-ok
                                                               (coq.sort.leq
                                                                 A4 A7) 
                                                               constructor universe too large].
% File "/build/source/elpi/coq-lib.elpi", line 355, column 0, characters 14768-14907: [406] 
coq.typecheck-indt-decl-c.unify-arrow-tgt A0 A1 A2 (prod A5 A6 A3) A4 :- 
 pi c0 \
  decl c0 A5 A6 =>
   coq.typecheck-indt-decl-c.unify-arrow-tgt A0 A1 A2 (A3 c0) A4.
% File "/build/source/elpi/coq-lib.elpi", line 357, column 0, characters 14909-15050: [407] 
coq.typecheck-indt-decl-c.unify-arrow-tgt A0 A1 A2 (let A6 A7 A8 A3) A4 :- 
 pi c0 \
  def c0 A6 A7 A8 =>
   cache c0 A5 =>
    coq.typecheck-indt-decl-c.unify-arrow-tgt A0 A1 A2 (A3 c0) A4.
% File "/build/source/elpi/coq-lib.elpi", line 359, column 0, characters 15052-15228: [408] 
coq.typecheck-indt-decl-c.unify-arrow-tgt A5 A2 A0 A7 A8 :- coq.count-prods
                                                             A0 A1, 
 calc (A1 + A2) A3, coq.mk-n-holes A3 A4, coq.mk-app A5 A4 A6, 
 coq.unify-eq A7 A6 A8.
% File "/build/source/elpi/coq-lib.elpi", line 366, column 0, characters 15297-15341: [409] 
coq.typecheck-indt-decl-field A0 end-record A0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 367, column 0, characters 15343-15492: [410] 
coq.typecheck-indt-decl-field A2 (field _ A0 A5 A3) (prod A1 A5 A4) :- 
 coq.id->name A0 A1, 
 pi c0 \ decl c0 A1 A5 => coq.typecheck-indt-decl-field A2 (A3 c0) (A4 c0).
% File "/build/source/elpi/coq-lib.elpi", line 373, column 0, characters 15630-15861: [411] 
coq.elaborate-indt-decl-skeleton (parameter A3 A6 A1 A4) 
 (parameter A3 A6 A2 A5) A0 :- std.do-ok! A0 
                                [coq.elaborate-ty-skeleton A1 _ A2, (c0 \
                                 sigma c1 \
                                  coq.id->name A3 c1 ,
                                   pi c2 \
                                    decl c2 c1 A2 =>
                                     coq.elaborate-indt-decl-skeleton
                                      (A4 c2) (A5 c2) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 377, column 0, characters 15863-16290: [412] 
coq.elaborate-indt-decl-skeleton (inductive A5 A8 A1 A6) 
 (inductive A5 A8 A2 A7) A0 :- std.do-ok! A0 
                                [coq.elaborate-arity-skeleton A1 _ A2, 
                                 std.lift-ok (coq.arity->nparams A2 A3) , 
                                 (c0 \
                                 coq.arity->term A2 A4 ,
                                  std.do-ok! c0 
                                   [coq.typecheck-indt-decl.heuristic-var-type
                                     A4, (c1 \
                                    sigma c2 \
                                     coq.id->name A5 c2 ,
                                      pi c3 \
                                       decl c3 c2 A4 =>
                                        std.map-ok (A6 c3) 
                                         (coq.elaborate-indt-decl-skeleton-c
                                           c3 A2 A3) (A7 c3) c1)])].
% File "/build/source/elpi/coq-lib.elpi", line 385, column 0, characters 16292-16572: [413] 
coq.elaborate-indt-decl-skeleton (record A4 A1 A7 A5) (record A4 A2 A7 A6) A0 :- 
 std.do-ok! A0 
  [coq.elaborate-ty-skeleton A1 _ A2, 
   std.lift-ok (A2 = sort A3) record type is not a sort, (c0 \
   sigma c1 \
    coq.id->name A4 c1 ,
     pi c2 \
      decl c2 c1 A2 => coq.elaborate-indt-decl-skeleton-fields A3 A5 A6 c0)].
% File "/build/source/elpi/coq-lib.elpi", line 392, column 0, characters 16672-16738: [414] 
coq.elaborate-indt-decl-skeleton-fields _ end-record end-record ok :- .
% File "/build/source/elpi/coq-lib.elpi", line 393, column 0, characters 16740-17058: [415] 
coq.elaborate-indt-decl-skeleton-fields A4 (field A8 A5 A1 A6) 
 (field A8 A5 A3 A7) A0 :- std.do-ok! A0 
                            [coq.elaborate-ty-skeleton A1 A2 A3, 
                             std.lift-ok (coq.sort.leq A2 A4) 
                              constructor universe too large, (c0 \
                             sigma c1 \
                              coq.id->name A5 c1 ,
                               pi c2 \
                                decl c2 c1 A3 =>
                                 coq.elaborate-indt-decl-skeleton-fields A4 
                                  (A6 c2) (A7 c2) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 401, column 0, characters 17165-17519: [416] 
coq.elaborate-indt-decl-skeleton-c A5 A6 A2 (constructor A9 A1) 
 (constructor A9 A4) A0 :- std.do-ok! A0 
                            [coq.elaborate-arity-skeleton-nuparams A1 A2 A3 
                              A4, 
                             coq.typecheck-indt-decl-c.unify-arity A5 0 A6 A4, 
                             std.lift-ok
                              (coq.arity->term A6 A7 , coq.arity->sort A7 A8) 
                              , 
                             std.lift-ok (coq.sort.leq A3 A8) 
                              constructor universe too large].
% File "/build/source/elpi/coq-lib.elpi", line 409, column 0, characters 17612-17854: [417] 
coq.typecheck-indt-decl-c.unify-arity A6 A4 (parameter _ _ A1 A7) 
 (parameter A5 _ A2 A8) A0 :- std.do-ok! A0 
                               [coq.unify-eq A1 A2, 
                                std.lift-ok (A3 is A4 + 1) , (c0 \
                                sigma c1 \
                                 coq.id->name A5 c1 ,
                                  pi c2 \
                                   decl c2 c1 A2 =>
                                    coq.typecheck-indt-decl-c.unify-arity A6 
                                     A3 (A7 c2) (A8 c2) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 414, column 0, characters 17856-18021: [418] 
coq.typecheck-indt-decl-c.unify-arity A1 A2 (arity A3) 
 (parameter A0 _ A6 A4) A5 :- sigma c0 \
                               coq.id->name A0 c0 ,
                                pi c1 \
                                 decl c1 c0 A6 =>
                                  coq.typecheck-indt-decl-c.unify-arity A1 
                                   A2 (arity A3) (A4 c1) A5.
% File "/build/source/elpi/coq-lib.elpi", line 416, column 0, characters 18023-18147: [419] 
coq.typecheck-indt-decl-c.unify-arity A0 A1 (arity A2) (arity A3) A4 :- 
 coq.typecheck-indt-decl-c.unify-arrow-tgt A0 A1 A2 A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 421, column 0, characters 18264-18574: [420] 
coq.elaborate-arity-skeleton (parameter A4 A9 A1 A5) A8 
 (parameter A4 A9 A3 A7) A0 :- std.do-ok! A0 
                                [coq.elaborate-ty-skeleton A1 A2 A3, (c0 \
                                 sigma c1 \
                                  coq.id->name A4 c1 ,
                                   pi c2 \
                                    decl c2 c1 A3 =>
                                     coq.elaborate-arity-skeleton (A5 c2) A6 
                                      (A7 c2) c0), 
                                 std.lift-ok (coq.sort.pts-triple A2 A6 A8) 
                                  coq.elaborate-arity-skeleton: should not happen].
% File "/build/source/elpi/coq-lib.elpi", line 426, column 0, characters 18576-18675: [421] 
coq.elaborate-arity-skeleton (arity A0) A1 (arity A2) A3 :- coq.elaborate-ty-skeleton
                                                             A0 A1 A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 430, column 0, characters 18768-19112: [422] 
coq.elaborate-arity-skeleton-nuparams (parameter A4 A9 A1 A5) 0 A8 
 (parameter A4 A9 A3 A7) A0 :- !, 
 std.do-ok! A0 
  [coq.elaborate-ty-skeleton A1 A2 A3, (c0 \
   sigma c1 \
    coq.id->name A4 c1 ,
     pi c2 \
      decl c2 c1 A3 =>
       coq.elaborate-arity-skeleton-nuparams (A5 c2) 0 A6 (A7 c2) c0), 
   std.lift-ok (coq.sort.pts-triple A2 A6 A8) 
    coq.elaborate-arity-skeleton-nuparams: should not happen].
% File "/build/source/elpi/coq-lib.elpi", line 435, column 0, characters 19114-19378: [423] 
coq.elaborate-arity-skeleton-nuparams (parameter A5 A9 A1 A6) A4 A7 
 (parameter A5 A9 A2 A8) A0 :- std.do-ok! A0 
                                [coq.elaborate-ty-skeleton A1 _ A2, 
                                 std.lift-ok (A3 is A4 - 1) , (c0 \
                                 sigma c1 \
                                  coq.id->name A5 c1 ,
                                   pi c2 \
                                    decl c2 c1 A2 =>
                                     coq.elaborate-arity-skeleton-nuparams
                                      (A6 c2) A3 A7 (A8 c2) c0)].
% File "/build/source/elpi/coq-lib.elpi", line 440, column 0, characters 19380-19490: [424] 
coq.elaborate-arity-skeleton-nuparams (arity A0) _ A1 (arity A2) A3 :- 
 coq.elaborate-ty-skeleton A0 A1 A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 445, column 0, characters 19561-19698: [425] 
coq.arity->term (parameter A0 _ A4 A2) (prod A1 A4 A3) :- coq.id->name A0 A1, 
 pi c0 \ decl c0 A1 A4 => coq.arity->term (A2 c0) (A3 c0).
% File "/build/source/elpi/coq-lib.elpi", line 448, column 0, characters 19700-19727: [426] 
coq.arity->term (arity A0) A0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 451, column 0, characters 19775-19804: [427] 
coq.term->arity A0 0 (arity A0) :- .
% File "/build/source/elpi/coq-lib.elpi", line 452, column 0, characters 19806-19959: [428] 
coq.term->arity (prod A2 A6 A4) A1 (parameter A3 explicit A6 A5) :- A0 is
                                                                    A1 - 1, 
 coq.name->id A2 A3, 
 pi c0 \ decl c0 A2 A6 => coq.term->arity (A4 c0) A0 (A5 c0).
% File "/build/source/elpi/coq-lib.elpi", line 459, column 0, characters 20042-20118: [429] 
coq.arity->sort (prod A2 A3 A0) A1 :- !, 
 pi c0 \ decl c0 A2 A3 => coq.arity->sort (A0 c0) A1.
% File "/build/source/elpi/coq-lib.elpi", line 460, column 0, characters 20120-20198: [430] 
coq.arity->sort (let A3 A4 A5 A0) A1 :- !, 
 pi c0 \ def c0 A3 A4 A5 => cache c0 A2 => coq.arity->sort (A0 c0) A1.
% File "/build/source/elpi/coq-lib.elpi", line 461, column 0, characters 20200-20231: [431] 
coq.arity->sort (sort A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 462, column 0, characters 20233-20325: [432] 
coq.arity->sort A0 A2 :- coq.reduction.lazy.whd A0 A1, not (A0 == A1), !, 
 coq.arity->sort A1 A2.
% File "/build/source/elpi/coq-lib.elpi", line 464, column 0, characters 20327-20404: [433] 
coq.arity->sort A0 _ :- std.fatal-error-w-data
                         arity->sort: not a sort or prod A0.
% File "/build/source/elpi/coq-lib.elpi", line 468, column 0, characters 20486-20580: [434] 
coq.arity->nparams (parameter _ _ _ A0) A2 :- pi c0 \
                                               coq.arity->nparams (A0 c0) A1
                                                , A2 is A1 + 1.
% File "/build/source/elpi/coq-lib.elpi", line 470, column 0, characters 20582-20612: [435] 
coq.arity->nparams (arity _) 0 :- .
% File "/build/source/elpi/coq-lib.elpi", line 474, column 0, characters 20671-21119: [436] 
coq.arity->pp (parameter A2 A6 A7 A8) (coq.pp.glue A0) :- A0 =
                                                           [coq.pp.box
                                                             (coq.pp.hv 2) 
                                                             [coq.pp.str A1, 
                                                              coq.pp.str A2, 
                                                              coq.pp.str  :, 
                                                              coq.pp.spc, 
                                                              A3, 
                                                              coq.pp.str A4], 
                                                            coq.pp.spc, A5], 
 if2 (A6 = explicit) (A1 = ( , A4 = )) (A6 = maximal) (A1 = { , A4 = }) 
  (A1 = [ , A4 = ]), coq.term->pp A7 A3, 
 sigma c0 \
  coq.id->name A2 c0 , pi c1 \ decl c1 c0 A7 => coq.arity->pp (A8 c1) A5.
% File "/build/source/elpi/coq-lib.elpi", line 484, column 0, characters 21121-21202: [437] 
coq.arity->pp (arity A0) (coq.pp.glue [coq.pp.str  : , A1]) :- coq.term->pp
                                                                A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 488, column 0, characters 21298-21405: [438] 
coq.arity->implicits (parameter A0 A4 A3 A1) [A4 | A2] :- sigma c0 \
                                                           coq.id->name A0 c0
                                                            ,
                                                            pi c1 \
                                                             decl c1 c0 A3 =>
                                                              coq.arity->implicits
                                                               (A1 c1) A2.
% File "/build/source/elpi/coq-lib.elpi", line 490, column 0, characters 21407-21440: [439] 
coq.arity->implicits (arity _) [] :- .
% File "/build/source/elpi/coq-lib.elpi", line 494, column 0, characters 21577-21729: [440] 
coq.indt-decl->implicits (parameter A0 A4 A6 A1) [A4 | A2] A5 :- sigma c0 \
                                                                  coq.id->name
                                                                   A0 c0 ,
                                                                   pi c1 \
                                                                    decl c1 
                                                                    c0 A6 =>
                                                                    (coq.indt-decl->implicits
                                                                    (A1 c1) 
                                                                    A2 A3 ,
                                                                    std.map
                                                                    A3 (c2 \
                                                                    c3 \
                                                                    c3 =
                                                                    [A4 | c2]) 
                                                                    A5).
% File "/build/source/elpi/coq-lib.elpi", line 497, column 0, characters 21731-21780: [441] 
coq.indt-decl->implicits (record _ _ _ _) [] [[]] :- .
% File "/build/source/elpi/coq-lib.elpi", line 498, column 0, characters 21782-21969: [442] 
coq.indt-decl->implicits (inductive A2 _ A0 A4) A1 A5 :- coq.arity->implicits
                                                          A0 A1, 
 sigma c0 \
  , (coq.id->name A2 c0) (coq.arity->term A0 A3) 
   (pi c1 \
     decl c1 c0 A3 =>
      std.map (A4 c1) (c2 \ c3 \
       sigma c4 \ c2 = constructor _ c4 , coq.arity->implicits c4 c3) A5).
% File "/build/source/elpi/coq-lib.elpi", line 505, column 0, characters 22051-22108: [443] 
coq.any-implicit? A0 :- std.exists A0 c0 \ not (c0 = explicit).
% File "/build/source/elpi/coq-lib.elpi", line 509, column 0, characters 22197-22231: [444] 
coq.term->gref (global A0) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 510, column 0, characters 22233-22270: [445] 
coq.term->gref (pglobal A0 _) A0 :- !.
% File "/build/source/elpi/coq-lib.elpi", line 511, column 0, characters 22272-22329: [446] 
coq.term->gref (app [A0 | _]) A1 :- !, coq.term->gref A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 512, column 0, characters 22331-22390: [447] 
coq.term->gref (let _ _ A0 c0 \ c0) A1 :- !, coq.term->gref A0 A1.
% File "/build/source/elpi/coq-lib.elpi", line 513, column 0, characters 22392-22487: [448] 
coq.term->gref (primitive (proj A0 _)) (const A1) :- coq.env.primitive-projection?
                                                      A0 A1 _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 21, column 0, characters 1453-1522: [449; -1566] 
coq.term->gref _ _ :- do-not-fail, !, false.
% File "/build/source/elpi/coq-lib.elpi", line 514, column 0, characters 22489-22607: [449] term->gref:fail
coq.term->gref A0 _ :- std.fatal-error-w-data
                        term->gref: input has no global reference A0.
% File "/build/source/elpi/coq-lib.elpi", line 519, column 0, characters 22638-22685: [450] 
coq.fresh-type (sort (typ A0)) :- coq.univ.new A0.
% File "/build/source/elpi/coq-lib.elpi", line 522, column 0, characters 22711-22729: [451] 
coq.sort? (sort _) :- .
% File "/build/source/elpi/coq-lib.elpi", line 523, column 0, characters 22731-22769: [452] 
coq.sort? A0 :- whd1 A0 A1, coq.sort? A1.
% File "/build/source/elpi/coq-lib.elpi", line 530, column 0, characters 22963-23019: [453] 
coq.map-under-fun A0 A1 A2 :- map-under-fun.aux A0 [] [] A1 A2.
% File "/build/source/elpi/coq-lib.elpi", line 536, column 0, characters 23145-23274: [454] 
map-under-fun.aux (fun A6 A2 A0) A1 A3 A4 (fun A6 A2 A5) :- !, 
 pi c0 \
  decl c0 A6 A2 => map-under-fun.aux (A0 c0) [c0 | A1] [A2 | A3] A4 (A5 c0).
% File "/build/source/elpi/coq-lib.elpi", line 538, column 0, characters 23276-23402: [455] 
map-under-fun.aux (let A6 A7 A8 A0) A1 A2 A3 (let A6 A7 A8 A4) :- !, 
 pi c0 \
  def c0 A6 A7 A8 =>
   cache c0 A5 => map-under-fun.aux (A0 c0) A1 A2 A3 (A4 c0).
% File "/build/source/elpi/coq-lib.elpi", line 540, column 0, characters 23404-23474: [456] 
map-under-fun.aux A4 A0 A2 A6 A5 :- std.rev A0 A1, std.rev A2 A3, 
 A6 A4 A1 A3 A5.
% File "/build/source/elpi/coq-lib.elpi", line 545, column 0, characters 23602-23656: [457] 
coq.iter-under-fun A0 A1 :- iter-under-fun.aux A0 [] [] A1.
% File "/build/source/elpi/coq-lib.elpi", line 550, column 0, characters 23765-23878: [458] 
iter-under-fun.aux (fun A5 A2 A0) A1 A3 A4 :- !, 
 pi c0 \ decl c0 A5 A2 => iter-under-fun.aux (A0 c0) [c0 | A1] [A2 | A3] A4.
% File "/build/source/elpi/coq-lib.elpi", line 552, column 0, characters 23880-23971: [459] 
iter-under-fun.aux (let _ _ A0 A1) A2 A3 A4 :- !, 
 iter-under-fun.aux (A1 A0) A2 A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 554, column 0, characters 23973-24040: [460] 
iter-under-fun.aux A4 A0 A2 A5 :- std.rev A0 A1, std.rev A2 A3, A5 A4 A1 A3.
% File "/build/source/elpi/coq-lib.elpi", line 566, column 0, characters 24580-25286: [461] 
coq.build-match A21 A0 A13 A19 (match A21 A14 A20) :- whd A0 [] A1 A2, 
 if2 (A1 = global (indt A3)) true (A1 = pglobal (indt A3) A4) true fail, 
 get-option coq:uinstance A4 => coq.env.indt A3 _ A5 _ A6 A7 A8, 
 std.take A5 A2 A9, 
 get-option coq:uinstance A4 =>
  (coq.env.global (indt A3) A10 , coq.mk-app A10 A9 A11), 
 coq.subst-prod A9 A6 A12, coq.bind-ind-arity-no-let A11 A12 A13 A14, 
 std.map A8 (coq.subst-prod A9) A15, std.map A15 hd-beta-zeta-reduce A16, 
 std.map A16 coq.prod->fun A17, 
 std.map A7 (c0 \ c1 \
  sigma c2 \ coq.env.global (indc c0) c2 , coq.mk-app c2 A9 c1) A18, 
 std.map2 A18 A17 (c0 \ c1 \ coq.map-under-fun c1 (A19 c0)) A20.
% File "/build/source/elpi/coq-lib.elpi", line 595, column 0, characters 25702-25848: [462] 
coq.bind-ind-arity.aux (prod A7 A3 A0) (fun A7 A3 A1) A2 A4 A5 A6 :- !, 
 pi c0 \
  decl c0 A7 A3 =>
   coq.bind-ind-arity.aux (A0 c0) (A1 c0) [c0 | A2] [A3 | A4] A5 A6.
% File "/build/source/elpi/coq-lib.elpi", line 597, column 0, characters 25850-25992: [463] 
coq.bind-ind-arity.aux (let A7 A8 A9 A0) (let A7 A8 A9 A1) A2 A3 A4 A5 :- !, 
 pi c0 \
  def c0 A7 A8 A9 =>
   cache c0 A6 => coq.bind-ind-arity.aux (A0 c0) (A1 c0) A2 A3 A4 A5.
% File "/build/source/elpi/coq-lib.elpi", line 599, column 0, characters 25994-26182: [464] 
coq.bind-ind-arity.aux (as (sort _) A7) (fun `i` A3 A8) A0 A5 A2 A9 :- 
 std.rev A0 A1, coq.mk-app A2 A1 A3, 
 pi c0 \
  decl c0 `i` A3 =>
   (std.append A1 [c0] (A4 c0) ,
     std.rev [A3 | A5] (A6 c0) , A9 A7 (A4 c0) (A6 c0) (A8 c0)).
% File "/build/source/elpi/coq-lib.elpi", line 603, column 0, characters 26184-26260: [465] 
coq.bind-ind-arity A2 A0 A3 A1 :- coq.bind-ind-arity.aux A0 A1 [] [] A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 606, column 0, characters 26404-26644: [466] 
coq.bind-ind-arity-no-let A2 A0 A3 A1 :- pi c0 \
                                          pi c1 \
                                           pi c2 \
                                            pi c3 \
                                             pi c4 \
                                              pi c5 \
                                               pi c6 \
                                                pi c7 \
                                                 pi c8 \
                                                  coq.bind-ind-arity.aux
                                                   (let c0 c1 c2 c3) c4 c5 
                                                   c6 c7 c8 :-
                                                   ! ,
                                                    coq.bind-ind-arity.aux
                                                     (c3 c2) c4 c5 c6 c7 c8
                                          =>
                                          coq.bind-ind-arity.aux A0 A1 [] [] 
                                           A2 A3.
% File "/build/source/elpi/coq-lib.elpi", line 613, column 0, characters 26751-26857: [467] 
coq.bind-ind-parameters A0 A3 A4 :- coq.env.indt A0 _ _ A1 A2 _ _, 
 coq.bind-ind-parameters.aux A1 A2 [] [] A3 A4.
% File "/build/source/elpi/coq-lib.elpi", line 617, column 0, characters 26993-27080: [468] 
coq.bind-ind-parameters.aux 0 A4 A0 A2 A6 A5 :- !, std.rev A0 A1, 
 std.rev A2 A3, A6 A4 A1 A3 A5.
% File "/build/source/elpi/coq-lib.elpi", line 618, column 0, characters 27082-27249: [469] 
coq.bind-ind-parameters.aux A0 (prod A8 A4 A2) A3 A5 A6 (fun A8 A4 A7) :- 
 A0 > 0, !, A1 is A0 - 1, 
 pi c0 \
  decl c0 A8 A4 =>
   coq.bind-ind-parameters.aux A1 (A2 c0) [c0 | A3] [A4 | A5] A6 (A7 c0).
% File "/build/source/elpi/coq-lib.elpi", line 621, column 0, characters 27251-27420: [470] 
coq.bind-ind-parameters.aux A0 (let A9 A4 A10 A2) A3 A5 A6 (fun A9 A4 A7) :- 
 A0 > 0, !, A1 is A0 - 1, 
 pi c0 \
  def c0 A9 A4 A10 =>
   cache c0 A8 =>
    coq.bind-ind-parameters.aux A1 (A2 c0) [c0 | A3] [A4 | A5] A6 (A7 c0).
% File "/build/source/elpi/coq-lib.elpi", line 624, column 0, characters 27422-27532: [471] 
coq.bind-ind-parameters.aux A0 A1 A3 A4 A5 A6 :- A0 > 0, whd1 A1 A2, !, 
 coq.bind-ind-parameters.aux A0 A2 A3 A4 A5 A6.
% File "/build/source/elpi/coq-lib.elpi", line 630, column 0, characters 27744-27893: [472] 
coq.with-TC A0 A3 A5 :- coq.term->gref A0 A1, coq.TC.db-for A1 A2, 
 std.map A2 A3 A4, !, A4 => A5.
% File "/build/source/elpi/coq-lib.elpi", line 638, column 0, characters 28026-28098: [473] 
coq.replay-synterp-action (begin-module A0) :- coq.env.begin-module A0 _.
% File "/build/source/elpi/coq-lib.elpi", line 639, column 0, characters 28100-28166: [474] 
coq.replay-synterp-action (end-module A0) :- coq.env.end-module A0.
% File "/build/source/elpi/coq-lib.elpi", line 640, column 0, characters 28168-28248: [475] 
coq.replay-synterp-action (begin-module-type A0) :- coq.env.begin-module-type
                                                     A0.
% File "/build/source/elpi/coq-lib.elpi", line 641, column 0, characters 28250-28328: [476] 
coq.replay-synterp-action (end-module-type A0) :- coq.env.end-module-type A0.
% File "/build/source/elpi/coq-lib.elpi", line 642, column 0, characters 28330-28426: [477] 
coq.replay-synterp-action (apply-module-functor A0) :- coq.env.apply-module-functor
                                                        A0 _ _ _ _ _.
% File "/build/source/elpi/coq-lib.elpi", line 643, column 0, characters 28428-28532: [478] 
coq.replay-synterp-action (apply-module-type-functor A0) :- coq.env.apply-module-type-functor
                                                             A0 _ _ _ _.
% File "/build/source/elpi/coq-lib.elpi", line 644, column 0, characters 28534-28610: [479] 
coq.replay-synterp-action (include-module A0) :- coq.env.include-module A0 _.
% File "/build/source/elpi/coq-lib.elpi", line 645, column 0, characters 28612-28698: [480] 
coq.replay-synterp-action (include-module-type A0) :- coq.env.include-module-type
                                                       A0 _.
% File "/build/source/elpi/coq-lib.elpi", line 646, column 0, characters 28700-28772: [481] 
coq.replay-synterp-action (import-module A0) :- coq.env.import-module A0.
% File "/build/source/elpi/coq-lib.elpi", line 647, column 0, characters 28774-28846: [482] 
coq.replay-synterp-action (export-module A0) :- coq.env.export-module A0.
% File "/build/source/elpi/coq-lib.elpi", line 648, column 0, characters 28848-28920: [483] 
coq.replay-synterp-action (begin-section A0) :- coq.env.begin-section A0.
% File "/build/source/elpi/coq-lib.elpi", line 649, column 0, characters 28922-28984: [484] 
coq.replay-synterp-action end-section :- coq.env.end-section.
% File "/build/source/elpi/coq-lib.elpi", line 652, column 0, characters 29025-29169: [485] 
coq.replay-next-synterp-actions :- coq.next-synterp-action A0, !, 
 coq.replay-synterp-action A0, !, coq.replay-next-synterp-actions.
% File "/build/source/elpi/coq-lib.elpi", line 656, column 0, characters 29171-29202: [486] 
coq.replay-next-synterp-actions :- .
% File "/build/source/elpi/elpi-reduction.elpi", line 22, column 0, characters 758-827: [487] 
unwind A0 A1 A2 :- if (var A0) (coq.mk-app-uvar A0 A1 A2) 
                    (coq.mk-app A0 A1 A2).
% File "/build/source/elpi/elpi-reduction.elpi", line 25, column 0, characters 888-919: [488] 
nth-stack 0 [A0 | A1] [] A0 A1 :- !.
% File "/build/source/elpi/elpi-reduction.elpi", line 26, column 0, characters 921-1007: [489] 
nth-stack A1 [A6 | A2] [A6 | A3] A4 A5 :- A0 is A1 - 1, 
 nth-stack A0 A2 A3 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 30, column 0, characters 1048-1108: [490] 
whd (app [A3 | A0]) A1 A4 A5 :- !, std.append A0 A1 A2, whd A3 A2 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 31, column 0, characters 1110-1143: [491] 
whd (as (fun _ _ _) A0) [] A0 [] :- !.
% File "/build/source/elpi/elpi-reduction.elpi", line 32, column 0, characters 1145-1264: [492] 
whd (fun A5 A6 A0) [A7 | A1] A8 A9 :- !, 
 pi c0 \ def c0 A5 A6 A7 => cache c0 A4 => whd (A0 c0) A1 (A2 c0) (A3 c0), 
 A8 = A2 A7, A9 = A3 A7.
% File "/build/source/elpi/elpi-reduction.elpi", line 34, column 0, characters 1266-1383: [493] 
whd (let A5 A6 A7 A0) A1 A8 A9 :- !, 
 pi c0 \ def c0 A5 A6 A7 => cache c0 A4 => whd (A0 c0) A1 (A2 c0) (A3 c0), 
 A8 = A2 A7, A9 = A3 A7.
% File "/build/source/elpi/elpi-reduction.elpi", line 36, column 0, characters 1385-1458: [494] 
whd (global (const A0)) A1 A4 A5 :- unfold A0 none A1 A2 A3, !, 
 whd A2 A3 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 37, column 0, characters 1460-1540: [495] 
whd (pglobal (const A0) A1) A2 A5 A6 :- unfold A0 (some A1) A2 A3 A4, !, 
 whd A3 A4 A5 A6.
% File "/build/source/elpi/elpi-reduction.elpi", line 38, column 0, characters 1542-1631: [496] 
whd (primitive (proj _ A2)) [A0 | A3] A6 A7 :- whd-indc A0 _ A1, !, 
 proj-red A1 A2 A3 A4 A5, whd A4 A5 A6 A7.
% File "/build/source/elpi/elpi-reduction.elpi", line 40, column 0, characters 1633-1812: [497] 
whd (as (global (const A0)) A1) A2 A5 A6 :- coq.env.primitive? A0, !, 
 unwind A1 A2 A3, coq.reduction.lazy.whd_all A3 A4, 
 if (same_term A3 A4) (A5 = A1 , A6 = A2) (whd A4 [] A5 A6).
% File "/build/source/elpi/elpi-reduction.elpi", line 44, column 0, characters 1814-1895: [498] 
whd (match A0 _ A3) A4 A7 A8 :- whd-indc A0 A1 A2, !, 
 match-red A1 A2 A3 A4 A5 A6, whd A5 A6 A7 A8.
% File "/build/source/elpi/elpi-reduction.elpi", line 46, column 0, characters 1897-2014: [499] 
whd (as (fix _ A0 _ A7) A8) A1 A11 A12 :- nth-stack A0 A1 A2 A3 A4, 
 whd-indc A3 A5 A6, !, fix-red A7 A8 A2 A5 A6 A4 A9 A10, whd A9 A10 A11 A12.
% File "/build/source/elpi/elpi-reduction.elpi", line 48, column 0, characters 2016-2087: [500] 
whd A0 A3 A4 A5 :- name A0, def A0 _ _ A1, !, cache-whd A0 A2 A1, 
 whd A2 A3 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 49, column 0, characters 2089-2100: [501] 
whd A0 A1 A0 A1 :- .
% File "/build/source/elpi/elpi-reduction.elpi", line 52, column 0, characters 2139-2219: [502] 
whd-indc A0 A3 A4 :- whd A0 [] A1 A2, !, not (var A1), 
 A1 = global (indc A3), A4 = A2.
% File "/build/source/elpi/elpi-reduction.elpi", line 55, column 0, characters 2281-2353: [503] 
whd1 A0 A3 :- whd A0 [] A1 A2, unwind A1 A2 A3, not (same_term A0 A3).
% File "/build/source/elpi/elpi-reduction.elpi", line 62, column 0, characters 2450-2588: [504] 
match-red A0 A3 A5 A8 A9 A10 :- coq.env.indc A0 A1 _ A2 _, 
 std.drop A1 A3 A4, std.nth A2 A5 A6, coq.mk-app A6 A4 A7, 
 hd-beta A7 A8 A9 A10.
% File "/build/source/elpi/elpi-reduction.elpi", line 68, column 0, characters 2650-2701: [505] 
proj-red A1 A0 A3 A2 A3 :- std.nth A0 A1 A2.
% File "/build/source/elpi/elpi-reduction.elpi", line 75, column 0, characters 2831-2984: [506] 
fix-red A7 A6 A3 A0 A1 A4 A9 A10 :- coq.mk-app (global (indc A0)) A1 A2, 
 std.append A3 [A2 | A4] A5, coq.mk-app (A7 A6) A5 A8, hd-beta A8 [] A9 A10.
% File "/build/source/elpi/elpi-reduction.elpi", line 85, column 0, characters 3268-3342: [507] 
unfold A0 none A2 A3 A4 :- coq.env.const A0 (some A1) _, hd-beta A1 A2 A3 A4.
% File "/build/source/elpi/elpi-reduction.elpi", line 86, column 0, characters 3344-3442: [508] 
unfold A0 (some A2) A3 A4 A5 :- get-option coq:uinstance A2 =>
                                 coq.env.const A0 (some A1) _, 
 hd-beta A1 A3 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 91, column 0, characters 3565-3644: [509] 
cache-whd A0 A5 A2 :- cache A0 A1, var A1, !, whd A2 [] A3 A4, 
 unwind A3 A4 A1, A5 = A1.
% File "/build/source/elpi/elpi-reduction.elpi", line 92, column 0, characters 3646-3677: [510] 
cache-whd A0 A1 _ :- cache A0 A1, !.
% File "/build/source/elpi/elpi-reduction.elpi", line 93, column 0, characters 3679-3758: [511] 
cache-whd A0 _ _ :- coq.term->string A0 A1, 
 coq.error anomaly: def with no cache: A1.
% File "/build/source/elpi/elpi-reduction.elpi", line 95, column 0, characters 3761-3827: [512] 
hd-beta (app [A3 | A0]) A1 A4 A5 :- !, std.append A0 A1 A2, 
 hd-beta A3 A2 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 96, column 0, characters 3829-3886: [513] 
hd-beta (fun _ _ A1) [A0 | A2] A3 A4 :- !, hd-beta (A1 A0) A2 A3 A4.
% File "/build/source/elpi/elpi-reduction.elpi", line 97, column 0, characters 3888-3923: [514] hd-beta:end
hd-beta A0 A1 A0 A1 :- .
% File "/build/source/elpi/elpi-reduction.elpi", line 100, column 0, characters 3926-4002: [515] 
hd-beta-zeta (app [A3 | A0]) A1 A4 A5 :- !, std.append A0 A1 A2, 
 hd-beta-zeta A3 A2 A4 A5.
% File "/build/source/elpi/elpi-reduction.elpi", line 101, column 0, characters 4004-4071: [516] 
hd-beta-zeta (fun _ _ A1) [A0 | A2] A3 A4 :- !, 
 hd-beta-zeta (A1 A0) A2 A3 A4.
% File "/build/source/elpi/elpi-reduction.elpi", line 102, column 0, characters 4073-4138: [517] 
hd-beta-zeta (let _ _ A0 A1) A2 A3 A4 :- !, hd-beta-zeta (A1 A0) A2 A3 A4.
% File "/build/source/elpi/elpi-reduction.elpi", line 103, column 0, characters 4140-4185: [518] hd-beta-zeta:end
hd-beta-zeta A0 A1 A0 A1 :- .
% File "/build/source/elpi/elpi-reduction.elpi", line 106, column 0, characters 4188-4250: [519] 
hd-beta-zeta-reduce A0 A3 :- hd-beta-zeta A0 [] A1 A2, unwind A1 A2 A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 9, column 0, characters 491-531: [520] 
refine A0 A1 A2 :- refine.elaborate A0 A1 A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 12, column 0, characters 592-770: [521] 
refine.elaborate A2 (goal _ A0 A3 A1 _) A5 :- rm-evar A0 A1, 
 get-option coq:keepunivs tt => coq.elaborate-skeleton A2 A3 A4 ok, 
 coq.ltac.collect-goals A4 A5 _, A0 = A2, A1 = A4.
% File "/build/source/elpi/elpi-ltac.elpi", line 20, column 0, characters 831-978: [522] 
refine.typecheck A2 (goal _ A0 A3 A1 _) A4 :- rm-evar A0 A1, 
 coq.typecheck A2 A3 ok, coq.ltac.collect-goals A2 A4 _, A0 = A2, A1 = A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 28, column 0, characters 1038-1158: [523] 
refine.no_check A2 (goal _ A0 _ A1 _) A3 :- rm-evar A0 A1, 
 coq.ltac.collect-goals A2 A3 _, A0 = A2, A1 = A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 37, column 0, characters 1301-1366: [524] 
coq.ltac A0 A1 A2 :- coq.ltac.open (coq.ltac.call-ltac1 A0) A1 A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 42, column 0, characters 1456-1557: [525] 
coq.ltac.call A3 A0 A1 A4 :- coq.ltac.set-goal-arguments A0 A1 (seal A1) 
                              (seal A2), coq.ltac.call-ltac1 A3 A2 A4.
% File "/build/source/elpi/elpi-ltac.elpi", line 47, column 0, characters 1639-1727: [526] 
coq.ltac.set-goal-arguments A0 A1 (nabla A2) (nabla A3) :- pi c0 \
                                                            coq.ltac.set-goal-arguments
                                                             A0 A1 (A2 c0) 
                                                             (A3 c0).
% File "/build/source/elpi/elpi-ltac.elpi", line 48, column 0, characters 1729-1872: [527] 
coq.ltac.set-goal-arguments A2 (goal A0 _ _ _ _) (seal (goal A1 A4 A5 A6 _)) 
 (seal (goal A1 A4 A5 A6 A3)) :- same_term A0 A1, !, A2 = A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 50, column 0, characters 1874-2038: [528] 
coq.ltac.set-goal-arguments A0 (goal A1 _ _ _ _) (seal (goal A2 A4 A5 A6 _)) 
 (seal (goal A2 A4 A5 A6 A3)) :- std.map A0 
                                  (coq.ltac.private.move-goal-argument A1 A2) 
                                  A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 56, column 0, characters 2173-2193: [529] 
coq.ltac.try A2 A0 A1 :- A2 A0 A1.
% File "/build/source/elpi/elpi-ltac.elpi", line 57, column 0, characters 2195-2206: [530] 
coq.ltac.try _ A0 [A0] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 61, column 0, characters 2280-2337: [531] 
coq.ltac.all A2 [A0 | A3] A5 :- A2 A0 A1, coq.ltac.all A2 A3 A4, 
 std.append A1 A4 A5.
% File "/build/source/elpi/elpi-ltac.elpi", line 62, column 0, characters 2339-2350: [532] 
coq.ltac.all _ [] [] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 65, column 0, characters 2414-2428: [533] 
coq.ltac.thenl [] A0 [A0] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 66, column 0, characters 2430-2479: [534] 
coq.ltac.thenl [A2 | A3] A0 A4 :- A2 A0 A1, 
 coq.ltac.all (coq.ltac.thenl A3) A1 A4.
% File "/build/source/elpi/elpi-ltac.elpi", line 69, column 0, characters 2539-2586: [535] 
coq.ltac.repeat A2 A0 A3 :- A2 A0 A1, 
 coq.ltac.all (coq.ltac.repeat A2) A1 A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 70, column 0, characters 2588-2602: [536] 
coq.ltac.repeat _ A0 [A0] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 73, column 0, characters 2663-2714: [537] 
coq.ltac.repeat! A2 A0 A3 :- A2 A0 A1, !, 
 coq.ltac.all (coq.ltac.repeat A2) A1 A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 74, column 0, characters 2716-2731: [538] 
coq.ltac.repeat! _ A0 [A0] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 77, column 0, characters 2792-2831: [539] 
coq.ltac.or A0 A1 A2 :- std.exists A0 c0 \ c0 A1 A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 81, column 0, characters 2906-2986: [540] 
coq.ltac.open A0 (nabla A1) A3 :- pi c0 \ coq.ltac.open A0 (A1 c0) (A2 c0), 
 coq.ltac.private.distribute-nabla A2 A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 82, column 0, characters 2988-3053: [541] 
coq.ltac.open _ (seal (goal _ _ _ A0 _)) [] :- not (var A0), !.
% File "/build/source/elpi/elpi-ltac.elpi", line 83, column 0, characters 3079-3292: [542] 
coq.ltac.open A4 (seal (as (goal A0 _ _ _ _) A2)) A3 :- std.filter A0 
                                                         coq.ltac.private.not-already-assumed 
                                                         A1, A1 => A4 A2 A3, 
 if (var A3) 
  (, (A2 = goal _ _ _ A5 _) (coq.ltac.collect-goals A5 A6 A7) 
    (std.append A6 A7 A3)) true.
% File "/build/source/elpi/elpi-ltac.elpi", line 96, column 0, characters 3483-3520: [543] 
coq.ltac.private.move-goal-argument _ _ (as (int _) A0) A0 :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 97, column 0, characters 3522-3559: [544] 
coq.ltac.private.move-goal-argument _ _ (as (str _) A0) A0 :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 98, column 0, characters 3561-3660: [545] 
coq.ltac.private.move-goal-argument _ _ (tac _) _ :- coq.error
                                                      NIY: move tactic goal argument to another context.
% File "/build/source/elpi/elpi-ltac.elpi", line 100, column 0, characters 3662-3823: [546] 
coq.ltac.private.move-goal-argument A0 A2 (trm A4) (trm A5) :- std.rev A0 A1, 
 std.rev A2 A3, 
 std.assert! (coq.ltac.private.move-term A1 A3 A4 A5) 
  cannot move goal argument to the right context, !.
% File "/build/source/elpi/elpi-ltac.elpi", line 106, column 0, characters 3893-3925: [547] 
coq.ltac.private.move-term [] _ A0 A1 :- copy A0 A1.
% File "/build/source/elpi/elpi-ltac.elpi", line 107, column 0, characters 3927-4059: [548] 
coq.ltac.private.move-term [decl A7 _ A0 | A3] [decl A8 _ A2 | A4] A5 A6 :- 
 std.do! [copy A0 A1, same_term A1 A2], !, 
 copy A7 A8 => coq.ltac.private.move-term A3 A4 A5 A6.
% File "/build/source/elpi/elpi-ltac.elpi", line 109, column 0, characters 4061-4228: [549] 
coq.ltac.private.move-term [def A10 _ A0 A3 | A6] [def A11 _ A2 A5 | A7] A8 
 A9 :- std.do! [copy A0 A1, same_term A1 A2, copy A3 A4, same_term A4 A5], 
 !, copy A10 A11 => coq.ltac.private.move-term A6 A7 A8 A9.
% File "/build/source/elpi/elpi-ltac.elpi", line 111, column 0, characters 4230-4307: [550] 
coq.ltac.private.move-term [decl A0 _ _ | A2] A3 A1 A4 :- not (occurs A0 A1), 
 !, coq.ltac.private.move-term A2 A3 A1 A4.
% File "/build/source/elpi/elpi-ltac.elpi", line 112, column 0, characters 4309-4387: [551] 
coq.ltac.private.move-term [def A0 _ _ _ | A2] A3 A1 A4 :- not (occurs A0 A1), 
 !, coq.ltac.private.move-term A2 A3 A1 A4.
% File "/build/source/elpi/elpi-ltac.elpi", line 113, column 0, characters 4389-4437: [552] 
coq.ltac.private.move-term A0 [_ | A1] A2 A3 :- coq.ltac.private.move-term
                                                 A0 A1 A2 A3.
% File "/build/source/elpi/elpi-ltac.elpi", line 116, column 0, characters 4512-4539: [553] 
coq.ltac.private.distribute-nabla (c0 \ []) [] :- .
% File "/build/source/elpi/elpi-ltac.elpi", line 117, column 0, characters 4541-4640: [554] 
coq.ltac.private.distribute-nabla (c0 \ [A0 c0 | A1 c0]) [nabla A0 | A2] :- 
 pi c0 \ occurs c0 (A0 c0), !, coq.ltac.private.distribute-nabla A1 A2.
% File "/build/source/elpi/elpi-ltac.elpi", line 119, column 0, characters 4642-4704: [555] 
coq.ltac.private.distribute-nabla (c0 \ [A2 | A0 c0]) [A2 | A1] :- coq.ltac.private.distribute-nabla
                                                                    A0 A1.
% File "/build/source/elpi/elpi-ltac.elpi", line 122, column 0, characters 4740-4807: [556] 
coq.ltac.private.not-already-assumed (decl A0 _ _) :- not
                                                       (decl A0 _ _ ;
                                                         def A0 _ _ _).
% File "/build/source/elpi/elpi-ltac.elpi", line 123, column 0, characters 4809-4879: [557] 
coq.ltac.private.not-already-assumed (def A0 _ _ _) :- not
                                                        (decl A0 _ _ ;
                                                          def A0 _ _ _).
% File "/build/source/elpi/coq-elaborator.elpi", line 21, column 0, characters 777-812: [561] 
unify-eq A0 A1 :- coq.unify-eq A0 A1 ok.
% File "/build/source/elpi/coq-elaborator.elpi", line 24, column 0, characters 846-883: [562] 
unify-leq A0 A1 :- coq.unify-leq A0 A1 ok.
% File "/build/source/elpi/coq-elaborator.elpi", line 27, column 0, characters 918-968: [563] 
of A0 A1 A2 :- !, coq.elaborate-skeleton A0 A1 A2 ok.
% File "/build/source/elpi/coq-elaborator.elpi", line 37, column 0, characters 1327-1462: [564] 
hack-8-17.propagate-Prop-constraint-inward (prod `x` A1 c0 \ A0 c0) :- !, 
 pi c0 \ decl c0 `x` A1 => hack-8-17.propagate-Prop-constraint-inward (A0 c0).
% File "/build/source/elpi/coq-elaborator.elpi", line 40, column 0, characters 1464-1597: [565] 
hack-8-17.propagate-Prop-constraint-inward
 (app [global (indt «and»), A0, A1]) :- !, 
 hack-8-17.propagate-Prop-constraint-inward A0, 
 hack-8-17.propagate-Prop-constraint-inward A1.
% File "/build/source/elpi/coq-elaborator.elpi", line 43, column 0, characters 1599-1731: [566] 
hack-8-17.propagate-Prop-constraint-inward
 (app [global (indt «or»), A0, A1]) :- !, 
 hack-8-17.propagate-Prop-constraint-inward A0, 
 hack-8-17.propagate-Prop-constraint-inward A1.
% File "/build/source/elpi/coq-elaborator.elpi", line 46, column 0, characters 1733-1821: [567] 
hack-8-17.propagate-Prop-constraint-inward (app [global (const «not»), A0]) :- !, 
 hack-8-17.propagate-Prop-constraint-inward A0.
% File "/build/source/elpi/coq-elaborator.elpi", line 48, column 0, characters 1823-1905: [568] 
hack-8-17.propagate-Prop-constraint-inward (as uvar A0) :- !, 
 coq.typecheck A0 (sort prop) ok.
% File "/build/source/elpi/coq-elaborator.elpi", line 50, column 0, characters 1907-1996: [569] 
hack-8-17.propagate-Prop-constraint-inward (as (app [uvar | _]) A0) :- !, 
 coq.typecheck A0 (sort prop) ok.
% File "/build/source/elpi/coq-elaborator.elpi", line 52, column 0, characters 1998-2032: [570] 
hack-8-17.propagate-Prop-constraint-inward _ :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 21, column 0, characters 1112-1224: [571] 
trocq.db.map-class->term A0 (pglobal A1 A2) :- std.do!
                                                [trocq.db.map-class->indc-class
                                                  A0 A1, 
                                                 coq.univ-instance A2 []].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 25, column 0, characters 1269-1343: [572] 
trocq.db.term->map-class (pglobal A1 _) A0 :- trocq.db.map-class->indc-class
                                               A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 42, column 0, characters 1893-1948: [573] 
trocq.db.gref->class A1 A0 :- trocq.db.rel A0 A1 _ _ _ _.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 45, column 0, characters 1985-2054: [574] default-r
trocq.db.r A0 A1 :- var A0, !, declare_constraint (trocq.db.r A0 A1) [A0].
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 815] 
trocq.db.r (pc map4 map4) «Param44.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 813] 
trocq.db.r (pc map4 map3) «Param43.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 811] 
trocq.db.r (pc map4 map2b) «Param42b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 809] 
trocq.db.r (pc map4 map2a) «Param42a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 807] 
trocq.db.r (pc map4 map1) «Param41.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 805] 
trocq.db.r (pc map4 map0) «Param40.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 803] 
trocq.db.r (pc map3 map4) «Param34.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 801] 
trocq.db.r (pc map3 map3) «Param33.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 799] 
trocq.db.r (pc map3 map2b) «Param32b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 797] 
trocq.db.r (pc map3 map2a) «Param32a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 795] 
trocq.db.r (pc map3 map1) «Param31.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 793] 
trocq.db.r (pc map3 map0) «Param30.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 791] 
trocq.db.r (pc map2b map4) «Param2b4.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 789] 
trocq.db.r (pc map2b map3) «Param2b3.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 787] 
trocq.db.r (pc map2b map2b) «Param2b2b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 785] 
trocq.db.r (pc map2b map2a) «Param2b2a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 783] 
trocq.db.r (pc map2b map1) «Param2b1.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 781] 
trocq.db.r (pc map2b map0) «Param2b0.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 779] 
trocq.db.r (pc map2a map4) «Param2a4.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 777] 
trocq.db.r (pc map2a map3) «Param2a3.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 775] 
trocq.db.r (pc map2a map2b) «Param2a2b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 773] 
trocq.db.r (pc map2a map2a) «Param2a2a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 771] 
trocq.db.r (pc map2a map1) «Param2a1.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 769] 
trocq.db.r (pc map2a map0) «Param2a0.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 767] 
trocq.db.r (pc map1 map4) «Param14.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 765] 
trocq.db.r (pc map1 map3) «Param13.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 763] 
trocq.db.r (pc map1 map2b) «Param12b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 761] 
trocq.db.r (pc map1 map2a) «Param12a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 759] 
trocq.db.r (pc map1 map1) «Param11.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 757] 
trocq.db.r (pc map1 map0) «Param10.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 755] 
trocq.db.r (pc map0 map4) «Param04.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 753] 
trocq.db.r (pc map0 map3) «Param03.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 751] 
trocq.db.r (pc map0 map2b) «Param02b.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 749] 
trocq.db.r (pc map0 map2a) «Param02a.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 747] 
trocq.db.r (pc map0 map1) «Param01.R» :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [574; 745] 
trocq.db.r (pc map0 map0) «Param00.R» :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 77, column 0, characters 3078-3155: [575] 
trocq.db.ptype-or-pprop (pglobal (const A0) _) A0 :- !, 
 trocq.db.ptype A0 ; trocq.db.pprop A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 86, column 0, characters 3414-3480: [576] 
trocq.db.pparam-type A0 _ :- logging.trace (coq.say [db] pparam A0), fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 88, column 0, characters 3482-3599: [577] default-pparam-type
trocq.db.pparam-type A0 A1 :- var A0, !, 
 declare_constraint (trocq.db.pparam-type A0 A1) [A0].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 94, column 0, characters 3685-3750: [578] 
trocq.db.param-arrow A0 _ :- logging.trace (coq.say [db] arrow A0), fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 96, column 0, characters 3752-3869: [579] default-param-arrow
trocq.db.param-arrow A0 A1 :- var A0, !, 
 declare_constraint (trocq.db.param-arrow A0 A1) [A0].
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1260] 
trocq.db.param-arrow (pc map4 map4) «Param44_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1259] 
trocq.db.param-arrow (pc map4 map3) «Param43_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1258] 
trocq.db.param-arrow (pc map4 map2b) «Param42b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1257] 
trocq.db.param-arrow (pc map4 map2a) «Param42a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1256] 
trocq.db.param-arrow (pc map4 map1) «Param41_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1255] 
trocq.db.param-arrow (pc map4 map0) «Param40_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1254] 
trocq.db.param-arrow (pc map3 map4) «Param34_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1253] 
trocq.db.param-arrow (pc map3 map3) «Param33_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1252] 
trocq.db.param-arrow (pc map3 map2b) «Param32b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1251] 
trocq.db.param-arrow (pc map3 map2a) «Param32a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1250] 
trocq.db.param-arrow (pc map3 map1) «Param31_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1249] 
trocq.db.param-arrow (pc map3 map0) «Param30_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1248] 
trocq.db.param-arrow (pc map2b map4) «Param2b4_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1247] 
trocq.db.param-arrow (pc map2b map3) «Param2b3_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1246] 
trocq.db.param-arrow (pc map2b map2b) «Param2b2b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1245] 
trocq.db.param-arrow (pc map2b map2a) «Param2b2a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1244] 
trocq.db.param-arrow (pc map2b map1) «Param2b1_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1243] 
trocq.db.param-arrow (pc map2b map0) «Param2b0_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1242] 
trocq.db.param-arrow (pc map2a map4) «Param2a4_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1241] 
trocq.db.param-arrow (pc map2a map3) «Param2a3_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1240] 
trocq.db.param-arrow (pc map2a map2b) «Param2a2b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1239] 
trocq.db.param-arrow (pc map2a map2a) «Param2a2a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1238] 
trocq.db.param-arrow (pc map2a map1) «Param2a1_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1237] 
trocq.db.param-arrow (pc map2a map0) «Param2a0_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1236] 
trocq.db.param-arrow (pc map1 map4) «Param14_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1235] 
trocq.db.param-arrow (pc map1 map3) «Param13_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1234] 
trocq.db.param-arrow (pc map1 map2b) «Param12b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1233] 
trocq.db.param-arrow (pc map1 map2a) «Param12a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1232] 
trocq.db.param-arrow (pc map1 map1) «Param11_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1231] 
trocq.db.param-arrow (pc map1 map0) «Param10_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1230] 
trocq.db.param-arrow (pc map0 map4) «Param04_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1229] 
trocq.db.param-arrow (pc map0 map3) «Param03_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1228] 
trocq.db.param-arrow (pc map0 map2b) «Param02b_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1227] 
trocq.db.param-arrow (pc map0 map2a) «Param02a_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1226] 
trocq.db.param-arrow (pc map0 map1) «Param01_arrow» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [579; 1225] 
trocq.db.param-arrow (pc map0 map0) «Param00_arrow» :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 102, column 0, characters 3958-4025: [580] 
trocq.db.param-forall A0 _ :- logging.trace (coq.say [db] forall A0), fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 104, column 0, characters 4027-4149: [581] default-param-forall
trocq.db.param-forall A0 A1 :- var A0, !, 
 declare_constraint (trocq.db.param-forall A0 A1) [A0].
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1296] 
trocq.db.param-forall (pc map4 map4) «Param44_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1295] 
trocq.db.param-forall (pc map4 map3) «Param43_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1294] 
trocq.db.param-forall (pc map4 map2b) «Param42b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1293] 
trocq.db.param-forall (pc map4 map2a) «Param42a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1292] 
trocq.db.param-forall (pc map4 map1) «Param41_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1291] 
trocq.db.param-forall (pc map4 map0) «Param40_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1290] 
trocq.db.param-forall (pc map3 map4) «Param34_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1289] 
trocq.db.param-forall (pc map3 map3) «Param33_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1288] 
trocq.db.param-forall (pc map3 map2b) «Param32b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1287] 
trocq.db.param-forall (pc map3 map2a) «Param32a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1286] 
trocq.db.param-forall (pc map3 map1) «Param31_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1285] 
trocq.db.param-forall (pc map3 map0) «Param30_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1284] 
trocq.db.param-forall (pc map2b map4) «Param2b4_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1283] 
trocq.db.param-forall (pc map2b map3) «Param2b3_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1282] 
trocq.db.param-forall (pc map2b map2b) «Param2b2b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1281] 
trocq.db.param-forall (pc map2b map2a) «Param2b2a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1280] 
trocq.db.param-forall (pc map2b map1) «Param2b1_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1279] 
trocq.db.param-forall (pc map2b map0) «Param2b0_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1278] 
trocq.db.param-forall (pc map2a map4) «Param2a4_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1277] 
trocq.db.param-forall (pc map2a map3) «Param2a3_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1276] 
trocq.db.param-forall (pc map2a map2b) «Param2a2b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1275] 
trocq.db.param-forall (pc map2a map2a) «Param2a2a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1274] 
trocq.db.param-forall (pc map2a map1) «Param2a1_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1273] 
trocq.db.param-forall (pc map2a map0) «Param2a0_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1272] 
trocq.db.param-forall (pc map1 map4) «Param14_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1271] 
trocq.db.param-forall (pc map1 map3) «Param13_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1270] 
trocq.db.param-forall (pc map1 map2b) «Param12b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1269] 
trocq.db.param-forall (pc map1 map2a) «Param12a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1268] 
trocq.db.param-forall (pc map1 map1) «Param11_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1267] 
trocq.db.param-forall (pc map1 map0) «Param10_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1266] 
trocq.db.param-forall (pc map0 map4) «Param04_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1265] 
trocq.db.param-forall (pc map0 map3) «Param03_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1264] 
trocq.db.param-forall (pc map0 map2b) «Param02b_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1263] 
trocq.db.param-forall (pc map0 map2a) «Param02a_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1262] 
trocq.db.param-forall (pc map0 map1) «Param01_forall» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [581; 1261] 
trocq.db.param-forall (pc map0 map0) «Param00_forall» :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 119, column 0, characters 4493-4573: [582] default-univalence
trocq.db.univalence _ :- coq.error univalence axiom required.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 123, column 0, characters 4600-4685: [583] default-funext
trocq.db.funext _ :- coq.error function extensionality axiom required.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 136, column 0, characters 5202-5271: [584] default-gref
trocq.db.gref _ _ _ _ _ :- do-not-fail, !, false.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/database.elpi", line 138, column 0, characters 5273-5348: [585] 
trocq.db.gref A0 A1 _ _ _ :- coq.error cannot find A0 at out class A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 33, column 0, characters 1557-1584: [586] 
verbosity->int level.off -1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 34, column 0, characters 1586-1613: [587] 
verbosity->int level.info 0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 35, column 0, characters 1615-1643: [588] 
verbosity->int level.debug 1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 36, column 0, characters 1645-1673: [589] 
verbosity->int level.trace 2 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 40, column 0, characters 1765-1798: [590] 
string->verbosity off level.off :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 41, column 0, characters 1800-1835: [591] 
string->verbosity info level.info :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 42, column 0, characters 1837-1874: [592] 
string->verbosity debug level.debug :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 43, column 0, characters 1876-1913: [593] 
string->verbosity trace level.trace :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 46, column 0, characters 1944-1982: [594] log-level
log-level level.info :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 50, column 0, characters 2011-2055: [595] 
logging.info A0 :- util.at-level level.info A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 52, column 0, characters 2084-2130: [596] 
logging.debug A0 :- util.at-level level.debug A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 54, column 0, characters 2159-2205: [597] 
logging.trace A0 :- util.at-level level.trace A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 59, column 0, characters 2266-2299: [598] 
util.option.value none A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 60, column 0, characters 2301-2326: [599] 
util.option.value (some A0) _ A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 63, column 0, characters 2363-2389: [600] 
util.cmp-int A0 A1 lt :- A0 < A1, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 64, column 0, characters 2391-2417: [601] 
util.cmp-int A0 A1 eq :- A0 = A1, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 65, column 0, characters 2419-2433: [602] 
util.cmp-int _ _ gt :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 68, column 0, characters 2471-2605: [603] 
util.at-level A2 A4 :- log-level A0, !, 
 if (verbosity->int A0 A1 , verbosity->int A2 A3 , A1 >= A3) A4 true.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 70, column 0, characters 2607-2619: [604] 
util.at-level _ _ :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 73, column 0, characters 2648-2697: [605] 
util.when A0 A1 :- if A0 A1 true.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 77, column 0, characters 2728-2779: [606] 
util.unless A0 A1 :- if A0 true A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 81, column 0, characters 2827-2892: [607] 
util.if-suspend A0 A1 A2 A3 :- var A0, !, 
 declare_constraint (if A1 A2 A3) [A0].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 82, column 0, characters 2894-2924: [608] 
util.if-suspend _ A0 A1 A2 :- if A0 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 85, column 0, characters 2977-3027: [609] 
util.map.find-opt A0 A1 (some A2) :- std.map.find A0 A1 A2, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 86, column 0, characters 3029-3050: [610] 
util.map.find-opt _ _ none :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 89, column 0, characters 3138-3298: [611] 
util.map.update A0 A4 A1 A6 :- util.map.find-opt A0 A1 (some A2), !, 
 A4 (some A2) A3, 
 if (A3 = some A5) (std.map.add A0 A5 A1 A6) (std.map.remove A0 A1 A6).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 95, column 0, characters 3309-3375: [612] 
util.map.update A2 A1 A3 A4 :- A1 none (some A0), std.map.add A2 A0 A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 98, column 0, characters 3387-3405: [613] 
util.map.update _ _ A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 101, column 0, characters 3462-3485: [614] 
util.delete A0 [A0 | A1] A1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 102, column 0, characters 3487-3529: [615] 
util.delete A0 [A3 | A1] [A3 | A2] :- util.delete A0 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 103, column 0, characters 3531-3545: [616] 
util.delete _ [] [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 112, column 0, characters 4088-4552: [617] 
util.accumulate-replacing-named-clause A2 A3 A1 A4 :- A0 is
                                                       A1 ^
                                                        -temporary-grafting-point, 
 coq.elpi.accumulate A2 A3 (clause A0 (after A1) A4), 
 coq.elpi.accumulate A2 A3 (clause _ (remove A1) A4), 
 coq.elpi.accumulate A2 A3 (clause A1 (before A0) A4), 
 coq.elpi.accumulate A2 A3 (clause _ (remove A0) A4).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 122, column 0, characters 4624-4683: [618] 
std.string.list->set [] A0 :- std.string.set.empty A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util.elpi", line 123, column 0, characters 4685-4776: [619] 
std.string.list->set [A2 | A0] A3 :- std.string.list->set A0 A1, 
 std.string.set.add A2 A1 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 37, column 0, characters 1682-1736: [620] 
map-class.all-of-kind all [map0, map1, map2a, map2b, map3, map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 38, column 0, characters 1738-1773: [621] 
map-class.all-of-kind low [map0, map1, map2a] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 39, column 0, characters 1775-1811: [622] 
map-class.all-of-kind high [map2b, map3, map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 42, column 0, characters 1852-1871: [623] 
map-class.to_string map0 0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 43, column 0, characters 1873-1892: [624] 
map-class.to_string map1 1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 44, column 0, characters 1894-1914: [625] 
map-class.to_string map2a 2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 45, column 0, characters 1916-1936: [626] 
map-class.to_string map2b 2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 46, column 0, characters 1938-1957: [627] 
map-class.to_string map3 3 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 47, column 0, characters 1959-1978: [628] 
map-class.to_string map4 4 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 50, column 0, characters 2030-2090: [629] 
map-class.add-suffix A0 A3 A2 :- map-class.to_string A0 A1, A2 is A3 ^ A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 54, column 0, characters 2169-2284: [630] 
map-class.add-2-suffix A6 A0 A2 A5 A4 :- map-class.to_string A0 A1, 
 map-class.to_string A2 A3, A4 is A5 ^ A1 ^ A6 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 59, column 0, characters 2389-2404: [631] 
map-class.fields map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 60, column 0, characters 2406-2426: [632] 
map-class.fields map1 [map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 61, column 0, characters 2428-2460: [633] 
map-class.fields map2a [map, map_in_R] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 62, column 0, characters 2462-2494: [634] 
map-class.fields map2b [map, R_in_map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 63, column 0, characters 2496-2540: [635] 
map-class.fields map3 [map, map_in_R, R_in_map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 64, column 0, characters 2542-2599: [636] 
map-class.fields map4 [map, map_in_R, R_in_map, R_in_mapK] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 67, column 0, characters 2644-2661: [637] 
map-class.cofields map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 68, column 0, characters 2663-2687: [638] 
map-class.cofields map1 [comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 69, column 0, characters 2689-2727: [639] 
map-class.cofields map2a [comap, comap_in_R] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 70, column 0, characters 2729-2767: [640] 
map-class.cofields map2b [comap, R_in_comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 71, column 0, characters 2769-2821: [641] 
map-class.cofields map3 [comap, comap_in_R, R_in_comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 72, column 0, characters 2823-2890: [642] 
map-class.cofields map4 [comap, comap_in_R, R_in_comap, R_in_comapK] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 76, column 0, characters 3000-3024: [643] 
map-class.weakenings-from map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 77, column 0, characters 3026-3054: [644] 
map-class.weakenings-from map1 [map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 78, column 0, characters 3056-3084: [645] 
map-class.weakenings-from map2a [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 79, column 0, characters 3086-3114: [646] 
map-class.weakenings-from map2b [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 80, column 0, characters 3116-3152: [647] 
map-class.weakenings-from map3 [map2a, map2b] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 81, column 0, characters 3154-3182: [648] 
map-class.weakenings-from map4 [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 84, column 0, characters 3235-3261: [649] 
map-class.weakenings-to map0 [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 85, column 0, characters 3263-3297: [650] 
map-class.weakenings-to map1 [map2a, map2b] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 86, column 0, characters 3299-3325: [651] 
map-class.weakenings-to map2a [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 87, column 0, characters 3327-3353: [652] 
map-class.weakenings-to map2b [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 88, column 0, characters 3355-3381: [653] 
map-class.weakenings-to map3 [map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 89, column 0, characters 3383-3405: [654] 
map-class.weakenings-to map4 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 93, column 0, characters 3519-3547: [655] 
map-class.all-weakenings-from map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 94, column 0, characters 3549-3581: [656] 
map-class.all-weakenings-from map1 [map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 95, column 0, characters 3583-3621: [657] 
map-class.all-weakenings-from map2a [map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 96, column 0, characters 3623-3661: [658] 
map-class.all-weakenings-from map2b [map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 97, column 0, characters 3663-3715: [659] 
map-class.all-weakenings-from map3 [map2a, map2b, map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 98, column 0, characters 3717-3775: [660] 
map-class.all-weakenings-from map4 [map3, map2a, map2b, map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 102, column 0, characters 3946-4075: [661] 
map-class.product A0 A1 A3 :- std.map A0 (c0 \ c1 \
                               std.map A1 (c2 \ c3 \ c3 = pc c0 c2) c1) A2, 
 std.flatten A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 110, column 0, characters 4206-4228: [662] 
map-class.union map4 _ map4 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 111, column 0, characters 4230-4257: [663] 
map-class.union map3 map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 112, column 0, characters 4259-4281: [664] 
map-class.union map3 _ map3 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 113, column 0, characters 4283-4310: [665] 
map-class.union map2b map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 114, column 0, characters 4312-4339: [666] 
map-class.union map2b map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 115, column 0, characters 4341-4368: [667] 
map-class.union map2b map2a map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 116, column 0, characters 4370-4393: [668] 
map-class.union map2b _ map2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 117, column 0, characters 4395-4422: [669] 
map-class.union map2a map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 118, column 0, characters 4424-4451: [670] 
map-class.union map2a map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 119, column 0, characters 4453-4480: [671] 
map-class.union map2a map2b map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 120, column 0, characters 4482-4505: [672] 
map-class.union map2a _ map2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 121, column 0, characters 4507-4534: [673] 
map-class.union map1 map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 122, column 0, characters 4536-4563: [674] 
map-class.union map1 map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 123, column 0, characters 4565-4593: [675] 
map-class.union map1 map2b map2b :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 124, column 0, characters 4595-4623: [676] 
map-class.union map1 map2a map2a :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 125, column 0, characters 4625-4647: [677] 
map-class.union map1 _ map1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 126, column 0, characters 4649-4668: [678] 
map-class.union map0 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 130, column 0, characters 4808-4830: [679] 
map-class.inter map0 _ map0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 131, column 0, characters 4832-4859: [680] 
map-class.inter map1 map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 132, column 0, characters 4861-4883: [681] 
map-class.inter map1 _ map1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 133, column 0, characters 4885-4912: [682] 
map-class.inter map2a map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 134, column 0, characters 4914-4941: [683] 
map-class.inter map2a map1 map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 135, column 0, characters 4943-4970: [684] 
map-class.inter map2a map2b map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 136, column 0, characters 4972-4995: [685] 
map-class.inter map2a _ map2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 137, column 0, characters 4997-5024: [686] 
map-class.inter map2b map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 138, column 0, characters 5026-5053: [687] 
map-class.inter map2b map1 map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 139, column 0, characters 5055-5082: [688] 
map-class.inter map2b map2a map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 140, column 0, characters 5084-5107: [689] 
map-class.inter map2b _ map2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 141, column 0, characters 5109-5136: [690] 
map-class.inter map3 map4 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 142, column 0, characters 5138-5157: [691] 
map-class.inter map3 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 143, column 0, characters 5159-5178: [692] 
map-class.inter map4 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 147, column 0, characters 5247-5258: [693] 
map-class.geq map4 _ :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 148, column 0, characters 5260-5318: [694] 
map-class.geq map3 A0 :- std.mem! [map0, map1, map2a, map2b, map3] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 149, column 0, characters 5320-5365: [695] 
map-class.geq map2a A0 :- std.mem! [map0, map1, map2a] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 150, column 0, characters 5367-5412: [696] 
map-class.geq map2b A0 :- std.mem! [map0, map1, map2b] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 151, column 0, characters 5414-5452: [697] 
map-class.geq map1 A0 :- std.mem! [map0, map1] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 152, column 0, characters 5454-5468: [698] 
map-class.geq map0 map0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 156, column 0, characters 5612-5655: [699] 
map-class.dep-pi map0 (pc map0 map0) (pc map0 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 157, column 0, characters 5657-5700: [700] 
map-class.dep-pi map1 (pc map0 map2a) (pc map1 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 158, column 0, characters 5702-5746: [701] 
map-class.dep-pi map2a (pc map0 map4) (pc map2a map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 159, column 0, characters 5748-5792: [702] 
map-class.dep-pi map2b (pc map0 map2a) (pc map2b map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 160, column 0, characters 5794-5837: [703] 
map-class.dep-pi map3 (pc map0 map4) (pc map3 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 161, column 0, characters 5839-5882: [704] 
map-class.dep-pi map4 (pc map0 map4) (pc map4 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 165, column 0, characters 6023-6069: [705] 
map-class.dep-arrow map0 (pc map0 map0) (pc map0 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 166, column 0, characters 6071-6117: [706] 
map-class.dep-arrow map1 (pc map0 map1) (pc map1 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 167, column 0, characters 6119-6166: [707] 
map-class.dep-arrow map2a (pc map0 map2b) (pc map2a map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 168, column 0, characters 6168-6215: [708] 
map-class.dep-arrow map2b (pc map0 map2a) (pc map2b map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 169, column 0, characters 6217-6263: [709] 
map-class.dep-arrow map3 (pc map0 map3) (pc map3 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 170, column 0, characters 6265-6311: [710] 
map-class.dep-arrow map4 (pc map0 map4) (pc map4 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 180, column 0, characters 6476-6778: [711] 
param-class.all-of-kind high A4 :- map-class.all-of-kind all A0, 
 map-class.all-of-kind high A1, map-class.product A1 A0 A2, 
 map-class.product A0 A1 A3, std.append A2 A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 186, column 0, characters 6780-6908: [712] 
param-class.all-of-kind A0 A2 :- map-class.all-of-kind A0 A1, 
 map-class.product A1 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 191, column 0, characters 6951-7031: [713] 
param-class.to_string (pc A0 A2) A4 :- map-class.to_string A0 A1, 
 map-class.to_string A2 A3, A4 is A1 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 195, column 0, characters 7085-7147: [714] 
param-class.add-suffix A0 A3 A2 :- param-class.to_string A0 A1, 
 A2 is A3 ^ A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 199, column 0, characters 7230-7349: [715] 
param-class.add-2-suffix A6 A0 A2 A5 A4 :- param-class.to_string A0 A1, 
 param-class.to_string A2 A3, A4 is A5 ^ A1 ^ A6 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 205, column 0, characters 7477-7697: [716] 
param-class.weakenings-from (pc A0 A2) A6 :- map-class.weakenings-from A0 A1, 
 map-class.weakenings-from A2 A3, map-class.product [A0] A3 A4, 
 map-class.product A1 [A2] A5, std.flatten [A4, A5] A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 213, column 0, characters 7754-8003: [717] 
param-class.weakenings-to (pc A0 A2) A4 :- map-class.weakenings-to A0 A1, 
 map-class.weakenings-to A2 A3, map-class.product A1 A3 A4, 
 map-class.product [A0] A3 A5, map-class.product A1 [A2] A6, 
 std.flatten [A5, A6] A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 222, column 0, characters 8066-8354: [718] 
param-class.all-weakenings-from (pc A0 A2) A7 :- map-class.all-weakenings-from
                                                  A0 A1, 
 map-class.all-weakenings-from A2 A3, map-class.product A1 A3 A4, 
 map-class.product [A0] A3 A5, map-class.product A1 [A2] A6, 
 std.flatten [A4, A5, A6] A7.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 231, column 0, characters 8399-8423: [719] 
param-class.negate (pc A0 A1) (pc A1 A0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 234, column 0, characters 8482-8574: [720] 
param-class.union (pc A0 A3) (pc A1 A4) (pc A2 A5) :- map-class.union A0 A1 
                                                       A2, 
 map-class.union A3 A4 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 239, column 0, characters 8633-8699: [721] 
param-class.inter A0 A1 _ :- logging.trace (coq.say [class.inter] A0 A1), 
 fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 240, column 0, characters 8701-8793: [722] 
param-class.inter (pc A0 A3) (pc A1 A4) (pc A2 A5) :- map-class.inter A0 A1 
                                                       A2, 
 map-class.inter A3 A4 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 245, column 0, characters 8835-8908: [723] 
param-class.geq (pc A0 A2) (pc A1 A3) :- map-class.geq A0 A1, 
 map-class.geq A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 250, column 0, characters 8968-9181: [724] 
param-class.dep-pi (pc A0 A3) A7 A9 :- map-class.dep-pi A0 A1 A2, 
 map-class.dep-pi A3 A4 A5, param-class.negate A4 A6, 
 param-class.union A1 A6 A7, param-class.negate A5 A8, 
 param-class.union A2 A8 A9.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 257, column 0, characters 9244-9466: [725] 
param-class.dep-arrow (pc A0 A3) A7 A9 :- map-class.dep-arrow A0 A1 A2, 
 map-class.dep-arrow A3 A4 A5, param-class.negate A4 A6, 
 param-class.union A1 A6 A7, param-class.negate A5 A8, 
 param-class.union A2 A8 A9.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 264, column 0, characters 9509-9633: [726] 
param-class.to-string (pc A0 A2) A4 :- std.do!
                                        [map-class.to_string A0 A1, 
                                         map-class.to_string A2 A3, 
                                         A4 is A1 ^ A3].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 274, column 0, characters 9883-9975: [727] 
param-class.requires-axiom (pc A0 A1) :- std.mem! [map2b, map3, map4] A0 ;
                                          std.mem! [map2b, map3, map4] A1.
% File "(should-not-happen)", line 1, column 0, characters 0-0: [728] 
trocq.db.map-class->indc-class map0 (indc «map0») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [729] 
trocq.db.map-class->indc-class map1 (indc «map1») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [730] 
trocq.db.map-class->indc-class map2a (indc «map2a») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [731] 
trocq.db.map-class->indc-class map2b (indc «map2b») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [732] 
trocq.db.map-class->indc-class map3 (indc «map3») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [733] 
trocq.db.map-class->indc-class map4 (indc «map4») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [734] 
trocq.db.map->class map0 (indt «Map0.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [735] 
trocq.db.map->class map1 (indt «Map1.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [736] 
trocq.db.map->class map2a (indt «Map2a.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [737] 
trocq.db.map->class map2b (indt «Map2b.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [738] 
trocq.db.map->class map3 (indt «Map3.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [739] 
trocq.db.map->class map4 (indt «Map4.Has») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [740] 
trocq.db.ptype «PType» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [741] 
trocq.db.pprop «PProp» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [742] 
trocq.db.weaken «weaken» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [743] 
trocq.db.sym-rel (const «sym_rel») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [744] 
trocq.db.paths A0 (global (indt «eq»)) :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [746] 
trocq.db.rel (pc map0 map0) (indt «Param00.Rel») 
 (indc «Param00.BuildRel») (const «Param00.R») 
 (const «Param00.covariant») (const «Param00.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [748] 
trocq.db.rel (pc map0 map1) (indt «Param01.Rel») 
 (indc «Param01.BuildRel») (const «Param01.R») 
 (const «Param01.covariant») (const «Param01.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [750] 
trocq.db.rel (pc map0 map2a) (indt «Param02a.Rel») 
 (indc «Param02a.BuildRel») (const «Param02a.R») 
 (const «Param02a.covariant») (const «Param02a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [752] 
trocq.db.rel (pc map0 map2b) (indt «Param02b.Rel») 
 (indc «Param02b.BuildRel») (const «Param02b.R») 
 (const «Param02b.covariant») (const «Param02b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [754] 
trocq.db.rel (pc map0 map3) (indt «Param03.Rel») 
 (indc «Param03.BuildRel») (const «Param03.R») 
 (const «Param03.covariant») (const «Param03.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [756] 
trocq.db.rel (pc map0 map4) (indt «Param04.Rel») 
 (indc «Param04.BuildRel») (const «Param04.R») 
 (const «Param04.covariant») (const «Param04.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [758] 
trocq.db.rel (pc map1 map0) (indt «Param10.Rel») 
 (indc «Param10.BuildRel») (const «Param10.R») 
 (const «Param10.covariant») (const «Param10.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [760] 
trocq.db.rel (pc map1 map1) (indt «Param11.Rel») 
 (indc «Param11.BuildRel») (const «Param11.R») 
 (const «Param11.covariant») (const «Param11.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [762] 
trocq.db.rel (pc map1 map2a) (indt «Param12a.Rel») 
 (indc «Param12a.BuildRel») (const «Param12a.R») 
 (const «Param12a.covariant») (const «Param12a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [764] 
trocq.db.rel (pc map1 map2b) (indt «Param12b.Rel») 
 (indc «Param12b.BuildRel») (const «Param12b.R») 
 (const «Param12b.covariant») (const «Param12b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [766] 
trocq.db.rel (pc map1 map3) (indt «Param13.Rel») 
 (indc «Param13.BuildRel») (const «Param13.R») 
 (const «Param13.covariant») (const «Param13.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [768] 
trocq.db.rel (pc map1 map4) (indt «Param14.Rel») 
 (indc «Param14.BuildRel») (const «Param14.R») 
 (const «Param14.covariant») (const «Param14.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [770] 
trocq.db.rel (pc map2a map0) (indt «Param2a0.Rel») 
 (indc «Param2a0.BuildRel») (const «Param2a0.R») 
 (const «Param2a0.covariant») (const «Param2a0.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [772] 
trocq.db.rel (pc map2a map1) (indt «Param2a1.Rel») 
 (indc «Param2a1.BuildRel») (const «Param2a1.R») 
 (const «Param2a1.covariant») (const «Param2a1.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [774] 
trocq.db.rel (pc map2a map2a) (indt «Param2a2a.Rel») 
 (indc «Param2a2a.BuildRel») (const «Param2a2a.R») 
 (const «Param2a2a.covariant») (const «Param2a2a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [776] 
trocq.db.rel (pc map2a map2b) (indt «Param2a2b.Rel») 
 (indc «Param2a2b.BuildRel») (const «Param2a2b.R») 
 (const «Param2a2b.covariant») (const «Param2a2b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [778] 
trocq.db.rel (pc map2a map3) (indt «Param2a3.Rel») 
 (indc «Param2a3.BuildRel») (const «Param2a3.R») 
 (const «Param2a3.covariant») (const «Param2a3.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [780] 
trocq.db.rel (pc map2a map4) (indt «Param2a4.Rel») 
 (indc «Param2a4.BuildRel») (const «Param2a4.R») 
 (const «Param2a4.covariant») (const «Param2a4.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [782] 
trocq.db.rel (pc map2b map0) (indt «Param2b0.Rel») 
 (indc «Param2b0.BuildRel») (const «Param2b0.R») 
 (const «Param2b0.covariant») (const «Param2b0.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [784] 
trocq.db.rel (pc map2b map1) (indt «Param2b1.Rel») 
 (indc «Param2b1.BuildRel») (const «Param2b1.R») 
 (const «Param2b1.covariant») (const «Param2b1.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [786] 
trocq.db.rel (pc map2b map2a) (indt «Param2b2a.Rel») 
 (indc «Param2b2a.BuildRel») (const «Param2b2a.R») 
 (const «Param2b2a.covariant») (const «Param2b2a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [788] 
trocq.db.rel (pc map2b map2b) (indt «Param2b2b.Rel») 
 (indc «Param2b2b.BuildRel») (const «Param2b2b.R») 
 (const «Param2b2b.covariant») (const «Param2b2b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [790] 
trocq.db.rel (pc map2b map3) (indt «Param2b3.Rel») 
 (indc «Param2b3.BuildRel») (const «Param2b3.R») 
 (const «Param2b3.covariant») (const «Param2b3.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [792] 
trocq.db.rel (pc map2b map4) (indt «Param2b4.Rel») 
 (indc «Param2b4.BuildRel») (const «Param2b4.R») 
 (const «Param2b4.covariant») (const «Param2b4.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [794] 
trocq.db.rel (pc map3 map0) (indt «Param30.Rel») 
 (indc «Param30.BuildRel») (const «Param30.R») 
 (const «Param30.covariant») (const «Param30.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [796] 
trocq.db.rel (pc map3 map1) (indt «Param31.Rel») 
 (indc «Param31.BuildRel») (const «Param31.R») 
 (const «Param31.covariant») (const «Param31.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [798] 
trocq.db.rel (pc map3 map2a) (indt «Param32a.Rel») 
 (indc «Param32a.BuildRel») (const «Param32a.R») 
 (const «Param32a.covariant») (const «Param32a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [800] 
trocq.db.rel (pc map3 map2b) (indt «Param32b.Rel») 
 (indc «Param32b.BuildRel») (const «Param32b.R») 
 (const «Param32b.covariant») (const «Param32b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [802] 
trocq.db.rel (pc map3 map3) (indt «Param33.Rel») 
 (indc «Param33.BuildRel») (const «Param33.R») 
 (const «Param33.covariant») (const «Param33.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [804] 
trocq.db.rel (pc map3 map4) (indt «Param34.Rel») 
 (indc «Param34.BuildRel») (const «Param34.R») 
 (const «Param34.covariant») (const «Param34.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [806] 
trocq.db.rel (pc map4 map0) (indt «Param40.Rel») 
 (indc «Param40.BuildRel») (const «Param40.R») 
 (const «Param40.covariant») (const «Param40.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [808] 
trocq.db.rel (pc map4 map1) (indt «Param41.Rel») 
 (indc «Param41.BuildRel») (const «Param41.R») 
 (const «Param41.covariant») (const «Param41.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [810] 
trocq.db.rel (pc map4 map2a) (indt «Param42a.Rel») 
 (indc «Param42a.BuildRel») (const «Param42a.R») 
 (const «Param42a.covariant») (const «Param42a.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [812] 
trocq.db.rel (pc map4 map2b) (indt «Param42b.Rel») 
 (indc «Param42b.BuildRel») (const «Param42b.R») 
 (const «Param42b.covariant») (const «Param42b.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [814] 
trocq.db.rel (pc map4 map3) (indt «Param43.Rel») 
 (indc «Param43.BuildRel») (const «Param43.R») 
 (const «Param43.covariant») (const «Param43.contravariant») :- .
% File "./Hierarchy.v", line 163, column 5, characters 5724-5736: [816] 
trocq.db.rel (pc map4 map4) (indt «Param44.Rel») 
 (indc «Param44.BuildRel») (const «Param44.R») 
 (const «Param44.covariant») (const «Param44.contravariant») :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [817] 
trocq.db.id-map map0 «id_Map0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [818] 
trocq.db.id-map-sym map0 «id_Map0_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [819] 
trocq.db.id-map map1 «id_Map1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [820] 
trocq.db.id-map-sym map1 «id_Map1_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [821] 
trocq.db.id-map map2a «id_Map2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [822] 
trocq.db.id-map-sym map2a «id_Map2a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [823] 
trocq.db.id-map map2b «id_Map2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [824] 
trocq.db.id-map-sym map2b «id_Map2b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [825] 
trocq.db.id-map map3 «id_Map3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [826] 
trocq.db.id-map-sym map3 «id_Map3_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [827] 
trocq.db.id-map map4 «id_Map4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [828] 
trocq.db.id-map-sym map4 «id_Map4_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [829] 
trocq.db.id-param (pc map0 map0) «id_Param00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [830] 
trocq.db.id-param (pc map0 map1) «id_Param01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [831] 
trocq.db.id-param (pc map0 map2a) «id_Param02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [832] 
trocq.db.id-param (pc map0 map2b) «id_Param02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [833] 
trocq.db.id-param (pc map0 map3) «id_Param03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [834] 
trocq.db.id-param (pc map0 map4) «id_Param04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [835] 
trocq.db.id-param (pc map1 map0) «id_Param10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [836] 
trocq.db.id-param (pc map1 map1) «id_Param11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [837] 
trocq.db.id-param (pc map1 map2a) «id_Param12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [838] 
trocq.db.id-param (pc map1 map2b) «id_Param12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [839] 
trocq.db.id-param (pc map1 map3) «id_Param13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [840] 
trocq.db.id-param (pc map1 map4) «id_Param14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [841] 
trocq.db.id-param (pc map2a map0) «id_Param2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [842] 
trocq.db.id-param (pc map2a map1) «id_Param2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [843] 
trocq.db.id-param (pc map2a map2a) «id_Param2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [844] 
trocq.db.id-param (pc map2a map2b) «id_Param2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [845] 
trocq.db.id-param (pc map2a map3) «id_Param2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [846] 
trocq.db.id-param (pc map2a map4) «id_Param2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [847] 
trocq.db.id-param (pc map2b map0) «id_Param2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [848] 
trocq.db.id-param (pc map2b map1) «id_Param2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [849] 
trocq.db.id-param (pc map2b map2a) «id_Param2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [850] 
trocq.db.id-param (pc map2b map2b) «id_Param2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [851] 
trocq.db.id-param (pc map2b map3) «id_Param2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [852] 
trocq.db.id-param (pc map2b map4) «id_Param2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [853] 
trocq.db.id-param (pc map3 map0) «id_Param30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [854] 
trocq.db.id-param (pc map3 map1) «id_Param31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [855] 
trocq.db.id-param (pc map3 map2a) «id_Param32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [856] 
trocq.db.id-param (pc map3 map2b) «id_Param32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [857] 
trocq.db.id-param (pc map3 map3) «id_Param33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [858] 
trocq.db.id-param (pc map3 map4) «id_Param34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [859] 
trocq.db.id-param (pc map4 map0) «id_Param40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [860] 
trocq.db.id-param (pc map4 map1) «id_Param41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [861] 
trocq.db.id-param (pc map4 map2a) «id_Param42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [862] 
trocq.db.id-param (pc map4 map2b) «id_Param42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [863] 
trocq.db.id-param (pc map4 map3) «id_Param43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [864] 
trocq.db.id-param (pc map4 map4) «id_Param44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [865] 
trocq.db.param-sym (pc map0 map0) «Param00_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [866] 
trocq.db.param-sym (pc map0 map1) «Param01_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [867] 
trocq.db.param-sym (pc map0 map2a) «Param02a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [868] 
trocq.db.param-sym (pc map0 map2b) «Param02b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [869] 
trocq.db.param-sym (pc map0 map3) «Param03_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [870] 
trocq.db.param-sym (pc map0 map4) «Param04_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [871] 
trocq.db.param-sym (pc map1 map0) «Param10_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [872] 
trocq.db.param-sym (pc map1 map1) «Param11_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [873] 
trocq.db.param-sym (pc map1 map2a) «Param12a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [874] 
trocq.db.param-sym (pc map1 map2b) «Param12b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [875] 
trocq.db.param-sym (pc map1 map3) «Param13_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [876] 
trocq.db.param-sym (pc map1 map4) «Param14_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [877] 
trocq.db.param-sym (pc map2a map0) «Param2a0_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [878] 
trocq.db.param-sym (pc map2a map1) «Param2a1_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [879] 
trocq.db.param-sym (pc map2a map2a) «Param2a2a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [880] 
trocq.db.param-sym (pc map2a map2b) «Param2a2b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [881] 
trocq.db.param-sym (pc map2a map3) «Param2a3_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [882] 
trocq.db.param-sym (pc map2a map4) «Param2a4_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [883] 
trocq.db.param-sym (pc map2b map0) «Param2b0_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [884] 
trocq.db.param-sym (pc map2b map1) «Param2b1_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [885] 
trocq.db.param-sym (pc map2b map2a) «Param2b2a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [886] 
trocq.db.param-sym (pc map2b map2b) «Param2b2b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [887] 
trocq.db.param-sym (pc map2b map3) «Param2b3_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [888] 
trocq.db.param-sym (pc map2b map4) «Param2b4_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [889] 
trocq.db.param-sym (pc map3 map0) «Param30_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [890] 
trocq.db.param-sym (pc map3 map1) «Param31_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [891] 
trocq.db.param-sym (pc map3 map2a) «Param32a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [892] 
trocq.db.param-sym (pc map3 map2b) «Param32b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [893] 
trocq.db.param-sym (pc map3 map3) «Param33_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [894] 
trocq.db.param-sym (pc map3 map4) «Param34_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [895] 
trocq.db.param-sym (pc map4 map0) «Param40_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [896] 
trocq.db.param-sym (pc map4 map1) «Param41_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [897] 
trocq.db.param-sym (pc map4 map2a) «Param42a_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [898] 
trocq.db.param-sym (pc map4 map2b) «Param42b_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [899] 
trocq.db.param-sym (pc map4 map3) «Param43_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [900] 
trocq.db.param-sym (pc map4 map4) «Param44_sym» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [901] 
trocq.db.param-type (pc map0 map0) (pc map0 map0) «Param00_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [902] 
trocq.db.param-type (pc map0 map0) (pc map0 map1) «Param00_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [903] 
trocq.db.param-type (pc map0 map0) (pc map0 map2a) «Param00_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [904] 
trocq.db.param-type (pc map0 map0) (pc map0 map2b) «Param00_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [905] 
trocq.db.param-type (pc map0 map0) (pc map0 map3) «Param00_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [906] 
trocq.db.param-type (pc map0 map0) (pc map0 map4) «Param00_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [907] 
trocq.db.param-type (pc map0 map0) (pc map1 map0) «Param00_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [908] 
trocq.db.param-type (pc map0 map0) (pc map1 map1) «Param00_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [909] 
trocq.db.param-type (pc map0 map0) (pc map1 map2a) «Param00_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [910] 
trocq.db.param-type (pc map0 map0) (pc map1 map2b) «Param00_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [911] 
trocq.db.param-type (pc map0 map0) (pc map1 map3) «Param00_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [912] 
trocq.db.param-type (pc map0 map0) (pc map1 map4) «Param00_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [913] 
trocq.db.param-type (pc map0 map0) (pc map2a map0) «Param00_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [914] 
trocq.db.param-type (pc map0 map0) (pc map2a map1) «Param00_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [915] 
trocq.db.param-type (pc map0 map0) (pc map2a map2a) «Param00_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [916] 
trocq.db.param-type (pc map0 map0) (pc map2a map2b) «Param00_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [917] 
trocq.db.param-type (pc map0 map0) (pc map2a map3) «Param00_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [918] 
trocq.db.param-type (pc map0 map0) (pc map2a map4) «Param00_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [919] 
trocq.db.param-type (pc map0 map0) (pc map2b map0) «Param00_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [920] 
trocq.db.param-type (pc map0 map0) (pc map2b map1) «Param00_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [921] 
trocq.db.param-type (pc map0 map0) (pc map2b map2a) «Param00_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [922] 
trocq.db.param-type (pc map0 map0) (pc map2b map2b) «Param00_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [923] 
trocq.db.param-type (pc map0 map0) (pc map2b map3) «Param00_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [924] 
trocq.db.param-type (pc map0 map0) (pc map2b map4) «Param00_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [925] 
trocq.db.param-type (pc map0 map0) (pc map3 map0) «Param00_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [926] 
trocq.db.param-type (pc map0 map0) (pc map3 map1) «Param00_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [927] 
trocq.db.param-type (pc map0 map0) (pc map3 map2a) «Param00_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [928] 
trocq.db.param-type (pc map0 map0) (pc map3 map2b) «Param00_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [929] 
trocq.db.param-type (pc map0 map0) (pc map3 map3) «Param00_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [930] 
trocq.db.param-type (pc map0 map0) (pc map3 map4) «Param00_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [931] 
trocq.db.param-type (pc map0 map0) (pc map4 map0) «Param00_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [932] 
trocq.db.param-type (pc map0 map0) (pc map4 map1) «Param00_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [933] 
trocq.db.param-type (pc map0 map0) (pc map4 map2a) «Param00_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [934] 
trocq.db.param-type (pc map0 map0) (pc map4 map2b) «Param00_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [935] 
trocq.db.param-type (pc map0 map0) (pc map4 map3) «Param00_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [936] 
trocq.db.param-type (pc map0 map0) (pc map4 map4) «Param00_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [937] 
trocq.db.param-type (pc map0 map1) (pc map0 map0) «Param01_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [938] 
trocq.db.param-type (pc map0 map1) (pc map0 map1) «Param01_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [939] 
trocq.db.param-type (pc map0 map1) (pc map0 map2a) «Param01_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [940] 
trocq.db.param-type (pc map0 map1) (pc map0 map2b) «Param01_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [941] 
trocq.db.param-type (pc map0 map1) (pc map0 map3) «Param01_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [942] 
trocq.db.param-type (pc map0 map1) (pc map0 map4) «Param01_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [943] 
trocq.db.param-type (pc map0 map1) (pc map1 map0) «Param01_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [944] 
trocq.db.param-type (pc map0 map1) (pc map1 map1) «Param01_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [945] 
trocq.db.param-type (pc map0 map1) (pc map1 map2a) «Param01_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [946] 
trocq.db.param-type (pc map0 map1) (pc map1 map2b) «Param01_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [947] 
trocq.db.param-type (pc map0 map1) (pc map1 map3) «Param01_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [948] 
trocq.db.param-type (pc map0 map1) (pc map1 map4) «Param01_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [949] 
trocq.db.param-type (pc map0 map1) (pc map2a map0) «Param01_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [950] 
trocq.db.param-type (pc map0 map1) (pc map2a map1) «Param01_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [951] 
trocq.db.param-type (pc map0 map1) (pc map2a map2a) «Param01_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [952] 
trocq.db.param-type (pc map0 map1) (pc map2a map2b) «Param01_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [953] 
trocq.db.param-type (pc map0 map1) (pc map2a map3) «Param01_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [954] 
trocq.db.param-type (pc map0 map1) (pc map2a map4) «Param01_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [955] 
trocq.db.param-type (pc map0 map1) (pc map2b map0) «Param01_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [956] 
trocq.db.param-type (pc map0 map1) (pc map2b map1) «Param01_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [957] 
trocq.db.param-type (pc map0 map1) (pc map2b map2a) «Param01_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [958] 
trocq.db.param-type (pc map0 map1) (pc map2b map2b) «Param01_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [959] 
trocq.db.param-type (pc map0 map1) (pc map2b map3) «Param01_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [960] 
trocq.db.param-type (pc map0 map1) (pc map2b map4) «Param01_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [961] 
trocq.db.param-type (pc map0 map1) (pc map3 map0) «Param01_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [962] 
trocq.db.param-type (pc map0 map1) (pc map3 map1) «Param01_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [963] 
trocq.db.param-type (pc map0 map1) (pc map3 map2a) «Param01_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [964] 
trocq.db.param-type (pc map0 map1) (pc map3 map2b) «Param01_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [965] 
trocq.db.param-type (pc map0 map1) (pc map3 map3) «Param01_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [966] 
trocq.db.param-type (pc map0 map1) (pc map3 map4) «Param01_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [967] 
trocq.db.param-type (pc map0 map1) (pc map4 map0) «Param01_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [968] 
trocq.db.param-type (pc map0 map1) (pc map4 map1) «Param01_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [969] 
trocq.db.param-type (pc map0 map1) (pc map4 map2a) «Param01_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [970] 
trocq.db.param-type (pc map0 map1) (pc map4 map2b) «Param01_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [971] 
trocq.db.param-type (pc map0 map1) (pc map4 map3) «Param01_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [972] 
trocq.db.param-type (pc map0 map1) (pc map4 map4) «Param01_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [973] 
trocq.db.param-type (pc map0 map2a) (pc map0 map0) «Param02a_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [974] 
trocq.db.param-type (pc map0 map2a) (pc map0 map1) «Param02a_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [975] 
trocq.db.param-type (pc map0 map2a) (pc map0 map2a) «Param02a_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [976] 
trocq.db.param-type (pc map0 map2a) (pc map0 map2b) «Param02a_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [977] 
trocq.db.param-type (pc map0 map2a) (pc map0 map3) «Param02a_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [978] 
trocq.db.param-type (pc map0 map2a) (pc map0 map4) «Param02a_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [979] 
trocq.db.param-type (pc map0 map2a) (pc map1 map0) «Param02a_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [980] 
trocq.db.param-type (pc map0 map2a) (pc map1 map1) «Param02a_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [981] 
trocq.db.param-type (pc map0 map2a) (pc map1 map2a) «Param02a_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [982] 
trocq.db.param-type (pc map0 map2a) (pc map1 map2b) «Param02a_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [983] 
trocq.db.param-type (pc map0 map2a) (pc map1 map3) «Param02a_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [984] 
trocq.db.param-type (pc map0 map2a) (pc map1 map4) «Param02a_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [985] 
trocq.db.param-type (pc map0 map2a) (pc map2a map0) «Param02a_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [986] 
trocq.db.param-type (pc map0 map2a) (pc map2a map1) «Param02a_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [987] 
trocq.db.param-type (pc map0 map2a) (pc map2a map2a) «Param02a_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [988] 
trocq.db.param-type (pc map0 map2a) (pc map2a map2b) «Param02a_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [989] 
trocq.db.param-type (pc map0 map2a) (pc map2a map3) «Param02a_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [990] 
trocq.db.param-type (pc map0 map2a) (pc map2a map4) «Param02a_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [991] 
trocq.db.param-type (pc map0 map2a) (pc map2b map0) «Param02a_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [992] 
trocq.db.param-type (pc map0 map2a) (pc map2b map1) «Param02a_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [993] 
trocq.db.param-type (pc map0 map2a) (pc map2b map2a) «Param02a_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [994] 
trocq.db.param-type (pc map0 map2a) (pc map2b map2b) «Param02a_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [995] 
trocq.db.param-type (pc map0 map2a) (pc map2b map3) «Param02a_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [996] 
trocq.db.param-type (pc map0 map2a) (pc map2b map4) «Param02a_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [997] 
trocq.db.param-type (pc map0 map2a) (pc map3 map0) «Param02a_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [998] 
trocq.db.param-type (pc map0 map2a) (pc map3 map1) «Param02a_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [999] 
trocq.db.param-type (pc map0 map2a) (pc map3 map2a) «Param02a_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1000] 
trocq.db.param-type (pc map0 map2a) (pc map3 map2b) «Param02a_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1001] 
trocq.db.param-type (pc map0 map2a) (pc map3 map3) «Param02a_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1002] 
trocq.db.param-type (pc map0 map2a) (pc map3 map4) «Param02a_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1003] 
trocq.db.param-type (pc map0 map2a) (pc map4 map0) «Param02a_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1004] 
trocq.db.param-type (pc map0 map2a) (pc map4 map1) «Param02a_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1005] 
trocq.db.param-type (pc map0 map2a) (pc map4 map2a) «Param02a_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1006] 
trocq.db.param-type (pc map0 map2a) (pc map4 map2b) «Param02a_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1007] 
trocq.db.param-type (pc map0 map2a) (pc map4 map3) «Param02a_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1008] 
trocq.db.param-type (pc map0 map2a) (pc map4 map4) «Param02a_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1009] 
trocq.db.param-type (pc map1 map0) (pc map0 map0) «Param10_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1010] 
trocq.db.param-type (pc map1 map0) (pc map0 map1) «Param10_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1011] 
trocq.db.param-type (pc map1 map0) (pc map0 map2a) «Param10_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1012] 
trocq.db.param-type (pc map1 map0) (pc map0 map2b) «Param10_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1013] 
trocq.db.param-type (pc map1 map0) (pc map0 map3) «Param10_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1014] 
trocq.db.param-type (pc map1 map0) (pc map0 map4) «Param10_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1015] 
trocq.db.param-type (pc map1 map0) (pc map1 map0) «Param10_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1016] 
trocq.db.param-type (pc map1 map0) (pc map1 map1) «Param10_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1017] 
trocq.db.param-type (pc map1 map0) (pc map1 map2a) «Param10_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1018] 
trocq.db.param-type (pc map1 map0) (pc map1 map2b) «Param10_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1019] 
trocq.db.param-type (pc map1 map0) (pc map1 map3) «Param10_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1020] 
trocq.db.param-type (pc map1 map0) (pc map1 map4) «Param10_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1021] 
trocq.db.param-type (pc map1 map0) (pc map2a map0) «Param10_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1022] 
trocq.db.param-type (pc map1 map0) (pc map2a map1) «Param10_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1023] 
trocq.db.param-type (pc map1 map0) (pc map2a map2a) «Param10_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1024] 
trocq.db.param-type (pc map1 map0) (pc map2a map2b) «Param10_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1025] 
trocq.db.param-type (pc map1 map0) (pc map2a map3) «Param10_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1026] 
trocq.db.param-type (pc map1 map0) (pc map2a map4) «Param10_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1027] 
trocq.db.param-type (pc map1 map0) (pc map2b map0) «Param10_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1028] 
trocq.db.param-type (pc map1 map0) (pc map2b map1) «Param10_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1029] 
trocq.db.param-type (pc map1 map0) (pc map2b map2a) «Param10_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1030] 
trocq.db.param-type (pc map1 map0) (pc map2b map2b) «Param10_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1031] 
trocq.db.param-type (pc map1 map0) (pc map2b map3) «Param10_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1032] 
trocq.db.param-type (pc map1 map0) (pc map2b map4) «Param10_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1033] 
trocq.db.param-type (pc map1 map0) (pc map3 map0) «Param10_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1034] 
trocq.db.param-type (pc map1 map0) (pc map3 map1) «Param10_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1035] 
trocq.db.param-type (pc map1 map0) (pc map3 map2a) «Param10_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1036] 
trocq.db.param-type (pc map1 map0) (pc map3 map2b) «Param10_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1037] 
trocq.db.param-type (pc map1 map0) (pc map3 map3) «Param10_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1038] 
trocq.db.param-type (pc map1 map0) (pc map3 map4) «Param10_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1039] 
trocq.db.param-type (pc map1 map0) (pc map4 map0) «Param10_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1040] 
trocq.db.param-type (pc map1 map0) (pc map4 map1) «Param10_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1041] 
trocq.db.param-type (pc map1 map0) (pc map4 map2a) «Param10_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1042] 
trocq.db.param-type (pc map1 map0) (pc map4 map2b) «Param10_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1043] 
trocq.db.param-type (pc map1 map0) (pc map4 map3) «Param10_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1044] 
trocq.db.param-type (pc map1 map0) (pc map4 map4) «Param10_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1045] 
trocq.db.param-type (pc map1 map1) (pc map0 map0) «Param11_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1046] 
trocq.db.param-type (pc map1 map1) (pc map0 map1) «Param11_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1047] 
trocq.db.param-type (pc map1 map1) (pc map0 map2a) «Param11_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1048] 
trocq.db.param-type (pc map1 map1) (pc map0 map2b) «Param11_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1049] 
trocq.db.param-type (pc map1 map1) (pc map0 map3) «Param11_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1050] 
trocq.db.param-type (pc map1 map1) (pc map0 map4) «Param11_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1051] 
trocq.db.param-type (pc map1 map1) (pc map1 map0) «Param11_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1052] 
trocq.db.param-type (pc map1 map1) (pc map1 map1) «Param11_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1053] 
trocq.db.param-type (pc map1 map1) (pc map1 map2a) «Param11_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1054] 
trocq.db.param-type (pc map1 map1) (pc map1 map2b) «Param11_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1055] 
trocq.db.param-type (pc map1 map1) (pc map1 map3) «Param11_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1056] 
trocq.db.param-type (pc map1 map1) (pc map1 map4) «Param11_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1057] 
trocq.db.param-type (pc map1 map1) (pc map2a map0) «Param11_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1058] 
trocq.db.param-type (pc map1 map1) (pc map2a map1) «Param11_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1059] 
trocq.db.param-type (pc map1 map1) (pc map2a map2a) «Param11_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1060] 
trocq.db.param-type (pc map1 map1) (pc map2a map2b) «Param11_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1061] 
trocq.db.param-type (pc map1 map1) (pc map2a map3) «Param11_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1062] 
trocq.db.param-type (pc map1 map1) (pc map2a map4) «Param11_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1063] 
trocq.db.param-type (pc map1 map1) (pc map2b map0) «Param11_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1064] 
trocq.db.param-type (pc map1 map1) (pc map2b map1) «Param11_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1065] 
trocq.db.param-type (pc map1 map1) (pc map2b map2a) «Param11_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1066] 
trocq.db.param-type (pc map1 map1) (pc map2b map2b) «Param11_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1067] 
trocq.db.param-type (pc map1 map1) (pc map2b map3) «Param11_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1068] 
trocq.db.param-type (pc map1 map1) (pc map2b map4) «Param11_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1069] 
trocq.db.param-type (pc map1 map1) (pc map3 map0) «Param11_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1070] 
trocq.db.param-type (pc map1 map1) (pc map3 map1) «Param11_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1071] 
trocq.db.param-type (pc map1 map1) (pc map3 map2a) «Param11_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1072] 
trocq.db.param-type (pc map1 map1) (pc map3 map2b) «Param11_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1073] 
trocq.db.param-type (pc map1 map1) (pc map3 map3) «Param11_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1074] 
trocq.db.param-type (pc map1 map1) (pc map3 map4) «Param11_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1075] 
trocq.db.param-type (pc map1 map1) (pc map4 map0) «Param11_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1076] 
trocq.db.param-type (pc map1 map1) (pc map4 map1) «Param11_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1077] 
trocq.db.param-type (pc map1 map1) (pc map4 map2a) «Param11_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1078] 
trocq.db.param-type (pc map1 map1) (pc map4 map2b) «Param11_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1079] 
trocq.db.param-type (pc map1 map1) (pc map4 map3) «Param11_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1080] 
trocq.db.param-type (pc map1 map1) (pc map4 map4) «Param11_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1081] 
trocq.db.param-type (pc map1 map2a) (pc map0 map0) «Param12a_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1082] 
trocq.db.param-type (pc map1 map2a) (pc map0 map1) «Param12a_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1083] 
trocq.db.param-type (pc map1 map2a) (pc map0 map2a) «Param12a_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1084] 
trocq.db.param-type (pc map1 map2a) (pc map0 map2b) «Param12a_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1085] 
trocq.db.param-type (pc map1 map2a) (pc map0 map3) «Param12a_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1086] 
trocq.db.param-type (pc map1 map2a) (pc map0 map4) «Param12a_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1087] 
trocq.db.param-type (pc map1 map2a) (pc map1 map0) «Param12a_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1088] 
trocq.db.param-type (pc map1 map2a) (pc map1 map1) «Param12a_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1089] 
trocq.db.param-type (pc map1 map2a) (pc map1 map2a) «Param12a_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1090] 
trocq.db.param-type (pc map1 map2a) (pc map1 map2b) «Param12a_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1091] 
trocq.db.param-type (pc map1 map2a) (pc map1 map3) «Param12a_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1092] 
trocq.db.param-type (pc map1 map2a) (pc map1 map4) «Param12a_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1093] 
trocq.db.param-type (pc map1 map2a) (pc map2a map0) «Param12a_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1094] 
trocq.db.param-type (pc map1 map2a) (pc map2a map1) «Param12a_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1095] 
trocq.db.param-type (pc map1 map2a) (pc map2a map2a) «Param12a_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1096] 
trocq.db.param-type (pc map1 map2a) (pc map2a map2b) «Param12a_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1097] 
trocq.db.param-type (pc map1 map2a) (pc map2a map3) «Param12a_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1098] 
trocq.db.param-type (pc map1 map2a) (pc map2a map4) «Param12a_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1099] 
trocq.db.param-type (pc map1 map2a) (pc map2b map0) «Param12a_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1100] 
trocq.db.param-type (pc map1 map2a) (pc map2b map1) «Param12a_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1101] 
trocq.db.param-type (pc map1 map2a) (pc map2b map2a) «Param12a_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1102] 
trocq.db.param-type (pc map1 map2a) (pc map2b map2b) «Param12a_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1103] 
trocq.db.param-type (pc map1 map2a) (pc map2b map3) «Param12a_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1104] 
trocq.db.param-type (pc map1 map2a) (pc map2b map4) «Param12a_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1105] 
trocq.db.param-type (pc map1 map2a) (pc map3 map0) «Param12a_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1106] 
trocq.db.param-type (pc map1 map2a) (pc map3 map1) «Param12a_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1107] 
trocq.db.param-type (pc map1 map2a) (pc map3 map2a) «Param12a_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1108] 
trocq.db.param-type (pc map1 map2a) (pc map3 map2b) «Param12a_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1109] 
trocq.db.param-type (pc map1 map2a) (pc map3 map3) «Param12a_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1110] 
trocq.db.param-type (pc map1 map2a) (pc map3 map4) «Param12a_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1111] 
trocq.db.param-type (pc map1 map2a) (pc map4 map0) «Param12a_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1112] 
trocq.db.param-type (pc map1 map2a) (pc map4 map1) «Param12a_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1113] 
trocq.db.param-type (pc map1 map2a) (pc map4 map2a) «Param12a_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1114] 
trocq.db.param-type (pc map1 map2a) (pc map4 map2b) «Param12a_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1115] 
trocq.db.param-type (pc map1 map2a) (pc map4 map3) «Param12a_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1116] 
trocq.db.param-type (pc map1 map2a) (pc map4 map4) «Param12a_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1117] 
trocq.db.param-type (pc map2a map0) (pc map0 map0) «Param2a0_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1118] 
trocq.db.param-type (pc map2a map0) (pc map0 map1) «Param2a0_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1119] 
trocq.db.param-type (pc map2a map0) (pc map0 map2a) «Param2a0_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1120] 
trocq.db.param-type (pc map2a map0) (pc map0 map2b) «Param2a0_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1121] 
trocq.db.param-type (pc map2a map0) (pc map0 map3) «Param2a0_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1122] 
trocq.db.param-type (pc map2a map0) (pc map0 map4) «Param2a0_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1123] 
trocq.db.param-type (pc map2a map0) (pc map1 map0) «Param2a0_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1124] 
trocq.db.param-type (pc map2a map0) (pc map1 map1) «Param2a0_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1125] 
trocq.db.param-type (pc map2a map0) (pc map1 map2a) «Param2a0_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1126] 
trocq.db.param-type (pc map2a map0) (pc map1 map2b) «Param2a0_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1127] 
trocq.db.param-type (pc map2a map0) (pc map1 map3) «Param2a0_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1128] 
trocq.db.param-type (pc map2a map0) (pc map1 map4) «Param2a0_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1129] 
trocq.db.param-type (pc map2a map0) (pc map2a map0) «Param2a0_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1130] 
trocq.db.param-type (pc map2a map0) (pc map2a map1) «Param2a0_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1131] 
trocq.db.param-type (pc map2a map0) (pc map2a map2a) «Param2a0_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1132] 
trocq.db.param-type (pc map2a map0) (pc map2a map2b) «Param2a0_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1133] 
trocq.db.param-type (pc map2a map0) (pc map2a map3) «Param2a0_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1134] 
trocq.db.param-type (pc map2a map0) (pc map2a map4) «Param2a0_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1135] 
trocq.db.param-type (pc map2a map0) (pc map2b map0) «Param2a0_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1136] 
trocq.db.param-type (pc map2a map0) (pc map2b map1) «Param2a0_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1137] 
trocq.db.param-type (pc map2a map0) (pc map2b map2a) «Param2a0_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1138] 
trocq.db.param-type (pc map2a map0) (pc map2b map2b) «Param2a0_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1139] 
trocq.db.param-type (pc map2a map0) (pc map2b map3) «Param2a0_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1140] 
trocq.db.param-type (pc map2a map0) (pc map2b map4) «Param2a0_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1141] 
trocq.db.param-type (pc map2a map0) (pc map3 map0) «Param2a0_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1142] 
trocq.db.param-type (pc map2a map0) (pc map3 map1) «Param2a0_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1143] 
trocq.db.param-type (pc map2a map0) (pc map3 map2a) «Param2a0_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1144] 
trocq.db.param-type (pc map2a map0) (pc map3 map2b) «Param2a0_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1145] 
trocq.db.param-type (pc map2a map0) (pc map3 map3) «Param2a0_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1146] 
trocq.db.param-type (pc map2a map0) (pc map3 map4) «Param2a0_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1147] 
trocq.db.param-type (pc map2a map0) (pc map4 map0) «Param2a0_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1148] 
trocq.db.param-type (pc map2a map0) (pc map4 map1) «Param2a0_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1149] 
trocq.db.param-type (pc map2a map0) (pc map4 map2a) «Param2a0_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1150] 
trocq.db.param-type (pc map2a map0) (pc map4 map2b) «Param2a0_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1151] 
trocq.db.param-type (pc map2a map0) (pc map4 map3) «Param2a0_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1152] 
trocq.db.param-type (pc map2a map0) (pc map4 map4) «Param2a0_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1153] 
trocq.db.param-type (pc map2a map1) (pc map0 map0) «Param2a1_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1154] 
trocq.db.param-type (pc map2a map1) (pc map0 map1) «Param2a1_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1155] 
trocq.db.param-type (pc map2a map1) (pc map0 map2a) «Param2a1_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1156] 
trocq.db.param-type (pc map2a map1) (pc map0 map2b) «Param2a1_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1157] 
trocq.db.param-type (pc map2a map1) (pc map0 map3) «Param2a1_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1158] 
trocq.db.param-type (pc map2a map1) (pc map0 map4) «Param2a1_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1159] 
trocq.db.param-type (pc map2a map1) (pc map1 map0) «Param2a1_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1160] 
trocq.db.param-type (pc map2a map1) (pc map1 map1) «Param2a1_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1161] 
trocq.db.param-type (pc map2a map1) (pc map1 map2a) «Param2a1_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1162] 
trocq.db.param-type (pc map2a map1) (pc map1 map2b) «Param2a1_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1163] 
trocq.db.param-type (pc map2a map1) (pc map1 map3) «Param2a1_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1164] 
trocq.db.param-type (pc map2a map1) (pc map1 map4) «Param2a1_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1165] 
trocq.db.param-type (pc map2a map1) (pc map2a map0) «Param2a1_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1166] 
trocq.db.param-type (pc map2a map1) (pc map2a map1) «Param2a1_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1167] 
trocq.db.param-type (pc map2a map1) (pc map2a map2a) «Param2a1_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1168] 
trocq.db.param-type (pc map2a map1) (pc map2a map2b) «Param2a1_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1169] 
trocq.db.param-type (pc map2a map1) (pc map2a map3) «Param2a1_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1170] 
trocq.db.param-type (pc map2a map1) (pc map2a map4) «Param2a1_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1171] 
trocq.db.param-type (pc map2a map1) (pc map2b map0) «Param2a1_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1172] 
trocq.db.param-type (pc map2a map1) (pc map2b map1) «Param2a1_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1173] 
trocq.db.param-type (pc map2a map1) (pc map2b map2a) «Param2a1_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1174] 
trocq.db.param-type (pc map2a map1) (pc map2b map2b) «Param2a1_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1175] 
trocq.db.param-type (pc map2a map1) (pc map2b map3) «Param2a1_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1176] 
trocq.db.param-type (pc map2a map1) (pc map2b map4) «Param2a1_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1177] 
trocq.db.param-type (pc map2a map1) (pc map3 map0) «Param2a1_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1178] 
trocq.db.param-type (pc map2a map1) (pc map3 map1) «Param2a1_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1179] 
trocq.db.param-type (pc map2a map1) (pc map3 map2a) «Param2a1_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1180] 
trocq.db.param-type (pc map2a map1) (pc map3 map2b) «Param2a1_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1181] 
trocq.db.param-type (pc map2a map1) (pc map3 map3) «Param2a1_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1182] 
trocq.db.param-type (pc map2a map1) (pc map3 map4) «Param2a1_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1183] 
trocq.db.param-type (pc map2a map1) (pc map4 map0) «Param2a1_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1184] 
trocq.db.param-type (pc map2a map1) (pc map4 map1) «Param2a1_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1185] 
trocq.db.param-type (pc map2a map1) (pc map4 map2a) «Param2a1_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1186] 
trocq.db.param-type (pc map2a map1) (pc map4 map2b) «Param2a1_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1187] 
trocq.db.param-type (pc map2a map1) (pc map4 map3) «Param2a1_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1188] 
trocq.db.param-type (pc map2a map1) (pc map4 map4) «Param2a1_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1189] 
trocq.db.param-type (pc map2a map2a) (pc map0 map0) «Param2a2a_Type00» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1190] 
trocq.db.param-type (pc map2a map2a) (pc map0 map1) «Param2a2a_Type01» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1191] 
trocq.db.param-type (pc map2a map2a) (pc map0 map2a) «Param2a2a_Type02a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1192] 
trocq.db.param-type (pc map2a map2a) (pc map0 map2b) «Param2a2a_Type02b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1193] 
trocq.db.param-type (pc map2a map2a) (pc map0 map3) «Param2a2a_Type03» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1194] 
trocq.db.param-type (pc map2a map2a) (pc map0 map4) «Param2a2a_Type04» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1195] 
trocq.db.param-type (pc map2a map2a) (pc map1 map0) «Param2a2a_Type10» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1196] 
trocq.db.param-type (pc map2a map2a) (pc map1 map1) «Param2a2a_Type11» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1197] 
trocq.db.param-type (pc map2a map2a) (pc map1 map2a) «Param2a2a_Type12a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1198] 
trocq.db.param-type (pc map2a map2a) (pc map1 map2b) «Param2a2a_Type12b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1199] 
trocq.db.param-type (pc map2a map2a) (pc map1 map3) «Param2a2a_Type13» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1200] 
trocq.db.param-type (pc map2a map2a) (pc map1 map4) «Param2a2a_Type14» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1201] 
trocq.db.param-type (pc map2a map2a) (pc map2a map0) «Param2a2a_Type2a0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1202] 
trocq.db.param-type (pc map2a map2a) (pc map2a map1) «Param2a2a_Type2a1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1203] 
trocq.db.param-type (pc map2a map2a) (pc map2a map2a) «Param2a2a_Type2a2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1204] 
trocq.db.param-type (pc map2a map2a) (pc map2a map2b) «Param2a2a_Type2a2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1205] 
trocq.db.param-type (pc map2a map2a) (pc map2a map3) «Param2a2a_Type2a3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1206] 
trocq.db.param-type (pc map2a map2a) (pc map2a map4) «Param2a2a_Type2a4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1207] 
trocq.db.param-type (pc map2a map2a) (pc map2b map0) «Param2a2a_Type2b0» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1208] 
trocq.db.param-type (pc map2a map2a) (pc map2b map1) «Param2a2a_Type2b1» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1209] 
trocq.db.param-type (pc map2a map2a) (pc map2b map2a) «Param2a2a_Type2b2a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1210] 
trocq.db.param-type (pc map2a map2a) (pc map2b map2b) «Param2a2a_Type2b2b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1211] 
trocq.db.param-type (pc map2a map2a) (pc map2b map3) «Param2a2a_Type2b3» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1212] 
trocq.db.param-type (pc map2a map2a) (pc map2b map4) «Param2a2a_Type2b4» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1213] 
trocq.db.param-type (pc map2a map2a) (pc map3 map0) «Param2a2a_Type30» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1214] 
trocq.db.param-type (pc map2a map2a) (pc map3 map1) «Param2a2a_Type31» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1215] 
trocq.db.param-type (pc map2a map2a) (pc map3 map2a) «Param2a2a_Type32a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1216] 
trocq.db.param-type (pc map2a map2a) (pc map3 map2b) «Param2a2a_Type32b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1217] 
trocq.db.param-type (pc map2a map2a) (pc map3 map3) «Param2a2a_Type33» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1218] 
trocq.db.param-type (pc map2a map2a) (pc map3 map4) «Param2a2a_Type34» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1219] 
trocq.db.param-type (pc map2a map2a) (pc map4 map0) «Param2a2a_Type40» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1220] 
trocq.db.param-type (pc map2a map2a) (pc map4 map1) «Param2a2a_Type41» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1221] 
trocq.db.param-type (pc map2a map2a) (pc map4 map2a) «Param2a2a_Type42a» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1222] 
trocq.db.param-type (pc map2a map2a) (pc map4 map2b) «Param2a2a_Type42b» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1223] 
trocq.db.param-type (pc map2a map2a) (pc map4 map3) «Param2a2a_Type43» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1224] 
trocq.db.param-type (pc map2a map2a) (pc map4 map4) «Param2a2a_Type44» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1297] 
trocq.db.pparam-type (pc map0 map0) «PParam00_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1298] 
trocq.db.pparam-type (pc map0 map1) «PParam01_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1299] 
trocq.db.pparam-type (pc map0 map2a) «PParam02a_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1300] 
trocq.db.pparam-type (pc map1 map0) «PParam10_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1301] 
trocq.db.pparam-type (pc map1 map1) «PParam11_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1302] 
trocq.db.pparam-type (pc map1 map2a) «PParam12a_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1303] 
trocq.db.pparam-type (pc map2a map0) «PParam2a0_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1304] 
trocq.db.pparam-type (pc map2a map1) «PParam2a1_Type» :- .
% File "(should-not-happen)", line 1, column 0, characters 0-0: [1305] 
trocq.db.pparam-type (pc map2a map2a) «PParam2a2a_Type» :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 37, column 0, characters 1682-1736: [1306] 
map-class.all-of-kind all [map0, map1, map2a, map2b, map3, map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 38, column 0, characters 1738-1773: [1307] 
map-class.all-of-kind low [map0, map1, map2a] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 39, column 0, characters 1775-1811: [1308] 
map-class.all-of-kind high [map2b, map3, map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 42, column 0, characters 1852-1871: [1309] 
map-class.to_string map0 0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 43, column 0, characters 1873-1892: [1310] 
map-class.to_string map1 1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 44, column 0, characters 1894-1914: [1311] 
map-class.to_string map2a 2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 45, column 0, characters 1916-1936: [1312] 
map-class.to_string map2b 2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 46, column 0, characters 1938-1957: [1313] 
map-class.to_string map3 3 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 47, column 0, characters 1959-1978: [1314] 
map-class.to_string map4 4 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 50, column 0, characters 2030-2090: [1315] 
map-class.add-suffix A0 A3 A2 :- map-class.to_string A0 A1, A2 is A3 ^ A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 54, column 0, characters 2169-2284: [1316] 
map-class.add-2-suffix A6 A0 A2 A5 A4 :- map-class.to_string A0 A1, 
 map-class.to_string A2 A3, A4 is A5 ^ A1 ^ A6 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 59, column 0, characters 2389-2404: [1317] 
map-class.fields map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 60, column 0, characters 2406-2426: [1318] 
map-class.fields map1 [map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 61, column 0, characters 2428-2460: [1319] 
map-class.fields map2a [map, map_in_R] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 62, column 0, characters 2462-2494: [1320] 
map-class.fields map2b [map, R_in_map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 63, column 0, characters 2496-2540: [1321] 
map-class.fields map3 [map, map_in_R, R_in_map] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 64, column 0, characters 2542-2599: [1322] 
map-class.fields map4 [map, map_in_R, R_in_map, R_in_mapK] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 67, column 0, characters 2644-2661: [1323] 
map-class.cofields map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 68, column 0, characters 2663-2687: [1324] 
map-class.cofields map1 [comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 69, column 0, characters 2689-2727: [1325] 
map-class.cofields map2a [comap, comap_in_R] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 70, column 0, characters 2729-2767: [1326] 
map-class.cofields map2b [comap, R_in_comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 71, column 0, characters 2769-2821: [1327] 
map-class.cofields map3 [comap, comap_in_R, R_in_comap] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 72, column 0, characters 2823-2890: [1328] 
map-class.cofields map4 [comap, comap_in_R, R_in_comap, R_in_comapK] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 76, column 0, characters 3000-3024: [1329] 
map-class.weakenings-from map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 77, column 0, characters 3026-3054: [1330] 
map-class.weakenings-from map1 [map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 78, column 0, characters 3056-3084: [1331] 
map-class.weakenings-from map2a [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 79, column 0, characters 3086-3114: [1332] 
map-class.weakenings-from map2b [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 80, column 0, characters 3116-3152: [1333] 
map-class.weakenings-from map3 [map2a, map2b] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 81, column 0, characters 3154-3182: [1334] 
map-class.weakenings-from map4 [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 84, column 0, characters 3235-3261: [1335] 
map-class.weakenings-to map0 [map1] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 85, column 0, characters 3263-3297: [1336] 
map-class.weakenings-to map1 [map2a, map2b] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 86, column 0, characters 3299-3325: [1337] 
map-class.weakenings-to map2a [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 87, column 0, characters 3327-3353: [1338] 
map-class.weakenings-to map2b [map3] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 88, column 0, characters 3355-3381: [1339] 
map-class.weakenings-to map3 [map4] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 89, column 0, characters 3383-3405: [1340] 
map-class.weakenings-to map4 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 93, column 0, characters 3519-3547: [1341] 
map-class.all-weakenings-from map0 [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 94, column 0, characters 3549-3581: [1342] 
map-class.all-weakenings-from map1 [map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 95, column 0, characters 3583-3621: [1343] 
map-class.all-weakenings-from map2a [map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 96, column 0, characters 3623-3661: [1344] 
map-class.all-weakenings-from map2b [map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 97, column 0, characters 3663-3715: [1345] 
map-class.all-weakenings-from map3 [map2a, map2b, map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 98, column 0, characters 3717-3775: [1346] 
map-class.all-weakenings-from map4 [map3, map2a, map2b, map1, map0] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 102, column 0, characters 3946-4075: [1347] 
map-class.product A0 A1 A3 :- std.map A0 (c0 \ c1 \
                               std.map A1 (c2 \ c3 \ c3 = pc c0 c2) c1) A2, 
 std.flatten A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 110, column 0, characters 4206-4228: [1348] 
map-class.union map4 _ map4 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 111, column 0, characters 4230-4257: [1349] 
map-class.union map3 map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 112, column 0, characters 4259-4281: [1350] 
map-class.union map3 _ map3 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 113, column 0, characters 4283-4310: [1351] 
map-class.union map2b map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 114, column 0, characters 4312-4339: [1352] 
map-class.union map2b map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 115, column 0, characters 4341-4368: [1353] 
map-class.union map2b map2a map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 116, column 0, characters 4370-4393: [1354] 
map-class.union map2b _ map2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 117, column 0, characters 4395-4422: [1355] 
map-class.union map2a map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 118, column 0, characters 4424-4451: [1356] 
map-class.union map2a map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 119, column 0, characters 4453-4480: [1357] 
map-class.union map2a map2b map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 120, column 0, characters 4482-4505: [1358] 
map-class.union map2a _ map2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 121, column 0, characters 4507-4534: [1359] 
map-class.union map1 map4 map4 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 122, column 0, characters 4536-4563: [1360] 
map-class.union map1 map3 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 123, column 0, characters 4565-4593: [1361] 
map-class.union map1 map2b map2b :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 124, column 0, characters 4595-4623: [1362] 
map-class.union map1 map2a map2a :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 125, column 0, characters 4625-4647: [1363] 
map-class.union map1 _ map1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 126, column 0, characters 4649-4668: [1364] 
map-class.union map0 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 130, column 0, characters 4808-4830: [1365] 
map-class.inter map0 _ map0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 131, column 0, characters 4832-4859: [1366] 
map-class.inter map1 map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 132, column 0, characters 4861-4883: [1367] 
map-class.inter map1 _ map1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 133, column 0, characters 4885-4912: [1368] 
map-class.inter map2a map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 134, column 0, characters 4914-4941: [1369] 
map-class.inter map2a map1 map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 135, column 0, characters 4943-4970: [1370] 
map-class.inter map2a map2b map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 136, column 0, characters 4972-4995: [1371] 
map-class.inter map2a _ map2a :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 137, column 0, characters 4997-5024: [1372] 
map-class.inter map2b map0 map0 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 138, column 0, characters 5026-5053: [1373] 
map-class.inter map2b map1 map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 139, column 0, characters 5055-5082: [1374] 
map-class.inter map2b map2a map1 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 140, column 0, characters 5084-5107: [1375] 
map-class.inter map2b _ map2b :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 141, column 0, characters 5109-5136: [1376] 
map-class.inter map3 map4 map3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 142, column 0, characters 5138-5157: [1377] 
map-class.inter map3 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 143, column 0, characters 5159-5178: [1378] 
map-class.inter map4 A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 147, column 0, characters 5247-5258: [1379] 
map-class.geq map4 _ :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 148, column 0, characters 5260-5318: [1380] 
map-class.geq map3 A0 :- std.mem! [map0, map1, map2a, map2b, map3] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 149, column 0, characters 5320-5365: [1381] 
map-class.geq map2a A0 :- std.mem! [map0, map1, map2a] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 150, column 0, characters 5367-5412: [1382] 
map-class.geq map2b A0 :- std.mem! [map0, map1, map2b] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 151, column 0, characters 5414-5452: [1383] 
map-class.geq map1 A0 :- std.mem! [map0, map1] A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 152, column 0, characters 5454-5468: [1384] 
map-class.geq map0 map0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 156, column 0, characters 5612-5655: [1385] 
map-class.dep-pi map0 (pc map0 map0) (pc map0 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 157, column 0, characters 5657-5700: [1386] 
map-class.dep-pi map1 (pc map0 map2a) (pc map1 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 158, column 0, characters 5702-5746: [1387] 
map-class.dep-pi map2a (pc map0 map4) (pc map2a map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 159, column 0, characters 5748-5792: [1388] 
map-class.dep-pi map2b (pc map0 map2a) (pc map2b map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 160, column 0, characters 5794-5837: [1389] 
map-class.dep-pi map3 (pc map0 map4) (pc map3 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 161, column 0, characters 5839-5882: [1390] 
map-class.dep-pi map4 (pc map0 map4) (pc map4 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 165, column 0, characters 6023-6069: [1391] 
map-class.dep-arrow map0 (pc map0 map0) (pc map0 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 166, column 0, characters 6071-6117: [1392] 
map-class.dep-arrow map1 (pc map0 map1) (pc map1 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 167, column 0, characters 6119-6166: [1393] 
map-class.dep-arrow map2a (pc map0 map2b) (pc map2a map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 168, column 0, characters 6168-6215: [1394] 
map-class.dep-arrow map2b (pc map0 map2a) (pc map2b map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 169, column 0, characters 6217-6263: [1395] 
map-class.dep-arrow map3 (pc map0 map3) (pc map3 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 170, column 0, characters 6265-6311: [1396] 
map-class.dep-arrow map4 (pc map0 map4) (pc map4 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 180, column 0, characters 6476-6778: [1397] 
param-class.all-of-kind high A4 :- map-class.all-of-kind all A0, 
 map-class.all-of-kind high A1, map-class.product A1 A0 A2, 
 map-class.product A0 A1 A3, std.append A2 A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 186, column 0, characters 6780-6908: [1398] 
param-class.all-of-kind A0 A2 :- map-class.all-of-kind A0 A1, 
 map-class.product A1 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 191, column 0, characters 6951-7031: [1399] 
param-class.to_string (pc A0 A2) A4 :- map-class.to_string A0 A1, 
 map-class.to_string A2 A3, A4 is A1 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 195, column 0, characters 7085-7147: [1400] 
param-class.add-suffix A0 A3 A2 :- param-class.to_string A0 A1, 
 A2 is A3 ^ A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 199, column 0, characters 7230-7349: [1401] 
param-class.add-2-suffix A6 A0 A2 A5 A4 :- param-class.to_string A0 A1, 
 param-class.to_string A2 A3, A4 is A5 ^ A1 ^ A6 ^ A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 205, column 0, characters 7477-7697: [1402] 
param-class.weakenings-from (pc A0 A2) A6 :- map-class.weakenings-from A0 A1, 
 map-class.weakenings-from A2 A3, map-class.product [A0] A3 A4, 
 map-class.product A1 [A2] A5, std.flatten [A4, A5] A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 213, column 0, characters 7754-8003: [1403] 
param-class.weakenings-to (pc A0 A2) A4 :- map-class.weakenings-to A0 A1, 
 map-class.weakenings-to A2 A3, map-class.product A1 A3 A4, 
 map-class.product [A0] A3 A5, map-class.product A1 [A2] A6, 
 std.flatten [A5, A6] A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 222, column 0, characters 8066-8354: [1404] 
param-class.all-weakenings-from (pc A0 A2) A7 :- map-class.all-weakenings-from
                                                  A0 A1, 
 map-class.all-weakenings-from A2 A3, map-class.product A1 A3 A4, 
 map-class.product [A0] A3 A5, map-class.product A1 [A2] A6, 
 std.flatten [A4, A5, A6] A7.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 231, column 0, characters 8399-8423: [1405] 
param-class.negate (pc A0 A1) (pc A1 A0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 234, column 0, characters 8482-8574: [1406] 
param-class.union (pc A0 A3) (pc A1 A4) (pc A2 A5) :- map-class.union A0 A1 
                                                       A2, 
 map-class.union A3 A4 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 239, column 0, characters 8633-8699: [1407] 
param-class.inter A0 A1 _ :- logging.trace (coq.say [class.inter] A0 A1), 
 fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 240, column 0, characters 8701-8793: [1408] 
param-class.inter (pc A0 A3) (pc A1 A4) (pc A2 A5) :- map-class.inter A0 A1 
                                                       A2, 
 map-class.inter A3 A4 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 245, column 0, characters 8835-8908: [1409] 
param-class.geq (pc A0 A2) (pc A1 A3) :- map-class.geq A0 A1, 
 map-class.geq A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 250, column 0, characters 8968-9181: [1410] 
param-class.dep-pi (pc A0 A3) A7 A9 :- map-class.dep-pi A0 A1 A2, 
 map-class.dep-pi A3 A4 A5, param-class.negate A4 A6, 
 param-class.union A1 A6 A7, param-class.negate A5 A8, 
 param-class.union A2 A8 A9.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 257, column 0, characters 9244-9466: [1411] 
param-class.dep-arrow (pc A0 A3) A7 A9 :- map-class.dep-arrow A0 A1 A2, 
 map-class.dep-arrow A3 A4 A5, param-class.negate A4 A6, 
 param-class.union A1 A6 A7, param-class.negate A5 A8, 
 param-class.union A2 A8 A9.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 264, column 0, characters 9509-9633: [1412] 
param-class.to-string (pc A0 A2) A4 :- std.do!
                                        [map-class.to_string A0 A1, 
                                         map-class.to_string A2 A3, 
                                         A4 is A1 ^ A3].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/class.elpi", line 274, column 0, characters 9883-9975: [1413] 
param-class.requires-axiom (pc A0 A1) :- std.mem! [map2b, map3, map4] A0 ;
                                          std.mem! [map2b, map3, map4] A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 23, column 0, characters 1351-1401: [1414] 
simple-graph.empty A0 (simple-graph A1) :- std.map.make A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 27, column 0, characters 1459-1531: [1415] 
simple-graph.add-node A0 (simple-graph A1) (simple-graph A2) :- std.map.add
                                                                 A0 [] A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 31, column 0, characters 1594-1686: [1416] 
simple-graph.add-edge A0 A1 (simple-graph A2) (simple-graph A3) :- util.map.update
                                                                    A0 
                                                                    (
                                                                    simple-graph.add-edge.aux
                                                                    A1) A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 35, column 0, characters 1750-1780: [1417] 
simple-graph.add-edge.aux A0 none (some [A0]) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 36, column 0, characters 1782-1818: [1418] 
simple-graph.add-edge.aux A0 (some A1) (some [A0 | A1]) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 40, column 0, characters 1891-1983: [1419] 
simple-graph.toposort (simple-graph A0) A2 :- std.map.bindings A0 A1, 
 simple-graph.reversed-kahn A1 [] A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/simple-graph.elpi", line 46, column 0, characters 2135-2680: [1420] 
simple-graph.reversed-kahn A0 A3 A2 :- std.map-filter A0 (c0 \ c1 \
                                        c0 = pr c1 []) A1, 
 if (A1 = []) (if (A0 = []) (A2 = some A3) (A2 = none)) 
  (std.map-filter A0 (c0 \ c1 \
    sigma c2 \
     sigma c3 \
      sigma c4 \
       , (c0 = pr c2 c3) (not (std.mem! A1 c2)) 
        (std.filter c3 (c5 \ not (std.mem! A1 c5)) c4) (c1 = pr c2 c4)) A4 ,
    std.append A1 A3 A5 , simple-graph.reversed-kahn A4 A5 A2).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 25, column 0, characters 1455-1573: [1422] 
term->annot-term (as (app [pglobal (const A0) _, A1, A2]) A3) A3 :- trocq.db.pprop
                                                                    A0, !, 
 cstr.univ-link _ A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 28, column 0, characters 1575-1693: [1423] 
term->annot-term (as (app [pglobal (const A0) _, A1, A2]) A3) A3 :- trocq.db.ptype
                                                                    A0, !, 
 cstr.univ-link _ A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 31, column 0, characters 1695-1842: [1424] 
term->annot-term (sort prop) (app [A1, A2, A3]) :- trocq.db.pprop A0, !, 
 coq.env.global (const A0) A1, !, cstr.univ-link _ A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 35, column 0, characters 1844-2019: [1425] 
term->annot-term (sort (typ A1)) (app [pglobal (const A0) A3, A4, A5]) :- 
 trocq.db.ptype A0, !, coq.univ.variable A1 A2, coq.univ-instance A3 [A2], 
 cstr.univ-link _ A4 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 39, column 0, characters 2021-2135: [1426] 
term->annot-term (fun A4 A0 A2) (fun A4 A1 A3) :- !, term->annot-term A0 A1, 
 !, pi c0 \ term->annot-term (A2 c0) (A3 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 42, column 0, characters 2137-2253: [1427] 
term->annot-term (prod A4 A0 A2) (prod A4 A1 A3) :- !, 
 term->annot-term A0 A1, !, pi c0 \ term->annot-term (A2 c0) (A3 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 45, column 0, characters 2255-2326: [1428] 
term->annot-term (app A0) (app A1) :- !, std.map A0 term->annot-term A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 47, column 0, characters 2328-2396: [1429] 
term->annot-term A0 A0 :- name A0 ; A0 = global _ ; A0 = pglobal _ _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 48, column 0, characters 2398-2453: [1430] 
term->annot-term A0 _ :- coq.error term->annot-term: A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 61, column 0, characters 2894-2929: [1431] 
annot.typecheck A0 A1 :- annot.adecl A0 _ A1, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 62, column 0, characters 2931-3003: [1432] 
annot.typecheck A0 A2 :- coq.typecheck A0 A1 ok, !, term->annot-term A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 69, column 0, characters 3115-3341: [1433] 
annot.sub-type (app [pglobal (const A0) _, A2, A3]) 
 (app [pglobal (const A0) _, A5, A6]) :- trocq.db.ptype A0 ;
                                          trocq.db.pprop A0, !, 
 std.do! [cstr.univ-link A1 A2 A3, cstr.univ-link A4 A5 A6, cstr.geq A1 A4].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 76, column 0, characters 3351-3460: [1434] 
annot.sub-type (prod A4 A1 A2) (prod _ A0 A3) :- !, annot.sub-type A0 A1, !, 
 pi c0 \ annot.adecl c0 A4 A0 => annot.sub-type (A2 c0) (A3 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 80, column 0, characters 3471-3556: [1435] 
annot.sub-type (fun A2 A3 A0) (fun _ A3 A1) :- !, 
 pi c0 \ annot.adecl c0 A2 A3 => annot.sub-type (A0 c0) (A1 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 83, column 0, characters 3567-3647: [1436] 
annot.sub-type (app [A0 | A2]) (app [A1 | A3]) :- annot.sub-type A0 A1, 
 std.forall2 A2 A3 annot.eq.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 87, column 0, characters 3659-3719: [1437] 
annot.sub-type A0 A0 :- name A0 ; A0 = global _ ; A0 = pglobal _ _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 88, column 0, characters 3721-3755: [1438] 
annot.sub-type A0 A1 :- coq.unify-eq A0 A1 _.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 89, column 0, characters 3757-3809: [1439] 
annot.sub-type A0 A1 :- coq.error annot.sub-type: A0 vs A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 93, column 0, characters 3931-4139: [1440] 
annot.eq (app [pglobal (const A0) A7, A2, A3]) 
 (app [pglobal (const A0) A7, A5, A6]) :- trocq.db.ptype A0 ;
                                           trocq.db.pprop A0, !, 
 cstr.univ-link A1 A2 A3, cstr.univ-link A4 A5 A6, cstr.eq A1 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 98, column 0, characters 4141-4215: [1441] 
annot.eq (prod _ A0 A2) (prod _ A1 A3) :- !, annot.eq A0 A1, !, 
 pi c0 \ annot.eq (A2 c0) (A3 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 101, column 0, characters 4217-4289: [1442] 
annot.eq (fun _ A0 A2) (fun _ A1 A3) :- !, annot.eq A0 A1, !, 
 pi c0 \ annot.eq (A2 c0) (A3 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 104, column 0, characters 4291-4338: [1443] 
annot.eq (app A0) (app A1) :- !, std.forall2 A0 A1 annot.eq.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 106, column 0, characters 4340-4394: [1444] 
annot.eq A0 A0 :- name A0 ; A0 = global _ ; A0 = pglobal _ _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 107, column 0, characters 4396-4410: [1445] 
annot.eq _ _ :- fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 114, column 0, characters 4837-5025: [1446] 
annot.classes A0 A5 A2 :- std.do!
                           [annot.all-classes A0 A1, annot.out-class A0 A2, 
                            if
                             (, (not (A1 = [])) (A2 = some A3) 
                               (std.last A1 A4) (A4 == A3)) 
                             (std.drop-last 1 A1 A5) (A5 = A1)].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 124, column 0, characters 5073-5168: [1447] 
annot.all-classes (app [A0, A2, A3]) [A1] :- trocq.db.ptype-or-pprop A0 _, 
 !, cstr.univ-link A1 A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 126, column 0, characters 5170-5284: [1448] 
annot.all-classes A0 A5 :- A0 = prod _ A1 A2 ; A0 = fun _ A1 A2, !, 
 pi c0 \
  annot.all-classes A1 (A3 c0) ,
   annot.all-classes (A2 c0) (A4 c0) , std.append (A3 c0) (A4 c0) A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 128, column 0, characters 5286-5355: [1449] 
annot.all-classes (app A0) A2 :- !, std.map A0 annot.all-classes A1, 
 std.flatten A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 130, column 0, characters 5357-5421: [1450] 
annot.all-classes A0 [] :- name A0 ; A0 = global _ ; A0 = pglobal _ _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 131, column 0, characters 5423-5468: [1451] 
annot.all-classes A0 _ :- coq.error all-classes: A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 135, column 0, characters 5541-5639: [1452] 
annot.out-class (app [A0, A2, A3]) (some A1) :- trocq.db.ptype-or-pprop A0 _, 
 !, cstr.univ-link A1 A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 137, column 0, characters 5641-5699: [1453] 
annot.out-class (prod _ _ A0) A1 :- !, pi c0 \ annot.out-class (A0 c0) A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 138, column 0, characters 5701-5732: [1454] 
annot.out-class (fun _ _ _) none :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 139, column 0, characters 5734-5849: [1455] 
annot.out-class (app [A1 | A0]) A3 :- !, coq.subst-fun A0 A1 A2, 
 if (A2 = app [A1 | A0]) (A3 = none) (annot.out-class A2 A3).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 142, column 0, characters 5851-5915: [1456] 
annot.out-class A0 none :- name A0 ; A0 = global _ ; A0 = pglobal _ _, !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/annot.elpi", line 143, column 0, characters 5917-5958: [1457] 
annot.out-class A0 _ :- coq.error out-class: A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 49, column 0, characters 2352-2468: [1458] 
cstr-graph.empty (constraint-graph A0) :- logging.debug
                                           (coq.say
                                             [graph] Created empty graph), 
 std.map.make util.cmp-int A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 56, column 0, characters 2707-3064: [1459] 
cstr-graph.add-dep-pi A0 A1 A2 (constraint-graph A3) (constraint-graph A6) :- 
 logging.debug (coq.say [graph] Add pi A0 A1 A2), 
 util.map.update A0 
  (cstr-graph.internal.add-higher-node
    (cstr-graph.node.var cstr-graph.ct.pi [A1, A2])) A3 A4, 
 util.map.update A1 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.pi [A0])) A4 A5, 
 util.map.update A2 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.pi [A0])) A5 A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 64, column 0, characters 3193-3565: [1460] 
cstr-graph.add-dep-arrow A0 A1 A2 (constraint-graph A3) (constraint-graph A6) :- 
 logging.debug (coq.say [graph] Add arrow ID IDA IDB), 
 util.map.update A0 
  (cstr-graph.internal.add-higher-node
    (cstr-graph.node.var cstr-graph.ct.arrow [A1, A2])) A3 A4, 
 util.map.update A1 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.arrow [A0])) A4 A5, 
 util.map.update A2 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.arrow [A0])) A5 A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 72, column 0, characters 3723-3998: [1461] 
cstr-graph.add-dep-type A0 A1 (constraint-graph A2) (constraint-graph A4) :- 
 logging.debug (coq.say [graph] Add type A0 A1), 
 util.map.update A0 
  (cstr-graph.internal.add-higher-node
    (cstr-graph.node.var cstr-graph.ct.type [A1])) A2 A3, 
 util.map.update A1 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.type [A0])) A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 84, column 0, characters 4419-4954: [1462] 
cstr-graph.add-dep-gref A0 A1 A2 A3 A4 A5 (constraint-graph A6) 
 (constraint-graph A8) :- logging.debug
                           (coq.say [graph] Add gref A0 A1 A2 A3 A4 A5), 
 util.map.update A0 
  (cstr-graph.internal.add-higher-node
    (cstr-graph.node.var (cstr-graph.ct.gref A1 A2 A3 A4) A5)) A6 A7, 
 std.fold A5 A7 (c0 \ c1 \ c2 \
  util.map.update c0 
   (cstr-graph.internal.add-lower-node
     (cstr-graph.node.var (cstr-graph.ct.gref _ _ _ _) [A0])) c1 c2) A8.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 96, column 0, characters 5167-5286: [1463] 
cstr-graph.add-geq A2 A3 (constraint-graph A4) (constraint-graph A5) :- 
 logging.debug (coq.say [graph] Add geq A0 A0 A1), fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 98, column 0, characters 5288-5518: [1464] 
cstr-graph.add-geq (inl A1) (inl A0) (constraint-graph A2) 
 (constraint-graph A4) :- util.map.update A0 
                           (cstr-graph.internal.add-higher-node
                             (cstr-graph.node.var cstr-graph.ct.geq [A1])) 
                           A2 A3, 
 util.map.update A1 
  (cstr-graph.internal.add-lower-node
    (cstr-graph.node.var cstr-graph.ct.geq [A0])) A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 101, column 0, characters 5520-5657: [1465] 
cstr-graph.add-geq (inl A0) (inr A1) (constraint-graph A2) 
 (constraint-graph A3) :- util.map.update A0 
                           (cstr-graph.internal.add-lower-node
                             (cstr-graph.node.const A1)) A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 103, column 0, characters 5659-5797: [1466] 
cstr-graph.add-geq (inr A1) (inl A0) (constraint-graph A2) 
 (constraint-graph A3) :- util.map.update A0 
                           (cstr-graph.internal.add-higher-node
                             (cstr-graph.node.const A1)) A2 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 109, column 0, characters 6013-6259: [1467] 
cstr-graph.minimal-class A0 (constraint-graph A1) A4 :- logging.debug
                                                         (coq.say
                                                           [graph] Finding minimal class for  
                                                           A0), 
 std.map.find A0 A1 (pr A2 _), !, cstr-graph.internal.filter-const A2 A3, 
 std.fold A3 (pc map0 map0) param-class.union A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 113, column 0, characters 6261-6293: [1468] 
cstr-graph.minimal-class _ _ (pc map0 map0) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 118, column 0, characters 6567-6815: [1469] 
cstr-graph.maximal-class A0 (constraint-graph A1) A4 :- logging.debug
                                                         (coq.say
                                                           [graph] Finding minimal class for  
                                                           A0), 
 std.map.find A0 A1 (pr _ A2), !, cstr-graph.internal.filter-const A2 A3, 
 std.fold A3 (pc map4 map4) param-class.inter A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 122, column 0, characters 6817-6849: [1470] 
cstr-graph.maximal-class _ _ (pc map4 map4) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 128, column 0, characters 7241-7333: [1471] 
cstr-graph.instantiate A0 A1 A2 _ :- logging.trace
                                      (coq.say [graph] instantiate A0 A1 A2), 
 fail.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 130, column 0, characters 7335-7733: [1472] 
cstr-graph.instantiate A0 A5 (constraint-graph A1) (constraint-graph A7) :- 
 std.map.find A0 A1 (pr A2 A3), !, 
 std.do!
  [cstr-graph.internal.filter-var A2 A4, 
   util.unless (A4 = []) 
    (coq.error wrong instantiation order: trying to instantiate A0 
      before lower variables A4), 
   std.fold A3 A1 (cstr-graph.instantiate.aux A0 A5) A6, 
   std.map.remove A0 A6 A7].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 139, column 0, characters 7735-7864: [1473] 
cstr-graph.instantiate A0 A1 A2 A2 :- logging.debug
                                       (coq.say [graph] cannot instantiate 
                                         A0 at A1 
                                         because it is not in the graph).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 143, column 0, characters 7980-8174: [1474] 
cstr-graph.instantiate.aux A2 A1 (cstr-graph.node.const A0) A3 A3 :- 
 util.unless (param-class.geq A0 A1) 
  (coq.error constraint not respected: instantiating A2 at class A1 
    despite upper bound A0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 147, column 0, characters 8176-8665: [1475] 
cstr-graph.instantiate.aux A1 A6 
 (cstr-graph.node.var cstr-graph.ct.pi [A0, A4]) A2 A10 :- std.do!
                                                            [util.map.update
                                                              A0 
                                                              (cstr-graph.internal.remove-lower-node
                                                                (cstr-graph.node.var
                                                                  cstr-graph.ct.pi 
                                                                  [A1])) A2 
                                                              A3, 
                                                             util.map.update
                                                              A4 
                                                              (cstr-graph.internal.remove-lower-node
                                                                (cstr-graph.node.var
                                                                  cstr-graph.ct.pi 
                                                                  [A1])) A3 
                                                              A5, 
                                                             param-class.dep-pi
                                                              A6 A7 A8, 
                                                             util.map.update
                                                              A0 
                                                              (cstr-graph.internal.add-lower-node
                                                                (cstr-graph.node.const
                                                                  A7)) A5 A9, 
                                                             util.map.update
                                                              A4 
                                                              (cstr-graph.internal.add-lower-node
                                                                (cstr-graph.node.const
                                                                  A8)) A9 A10].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 155, column 0, characters 8667-9161: [1476] 
cstr-graph.instantiate.aux A1 A6 
 (cstr-graph.node.var cstr-graph.ct.arrow [A0, A4]) A2 A10 :- std.do!
                                                               [util.map.update
                                                                 A0 
                                                                 (cstr-graph.internal.remove-lower-node
                                                                   (cstr-graph.node.var
                                                                    cstr-graph.ct.arrow 
                                                                    [A1])) 
                                                                 A2 A3, 
                                                                util.map.update
                                                                 A4 
                                                                 (cstr-graph.internal.remove-lower-node
                                                                   (cstr-graph.node.var
                                                                    cstr-graph.ct.arrow 
                                                                    [A1])) 
                                                                 A3 A5, 
                                                                param-class.dep-arrow
                                                                 A6 A7 A8, 
                                                                util.map.update
                                                                 A0 
                                                                 (cstr-graph.internal.add-lower-node
                                                                   (cstr-graph.node.const
                                                                    A7)) A5 
                                                                 A9, 
                                                                util.map.update
                                                                 A4 
                                                                 (cstr-graph.internal.add-lower-node
                                                                   (cstr-graph.node.const
                                                                    A8)) A9 
                                                                 A10].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 163, column 0, characters 9163-9522: [1477] 
cstr-graph.instantiate.aux A1 A4 
 (cstr-graph.node.var cstr-graph.ct.type [A0]) A2 A5 :- std.do!
                                                         [util.map.update A0 
                                                           (cstr-graph.internal.remove-lower-node
                                                             (cstr-graph.node.var
                                                               cstr-graph.ct.type 
                                                               [A1])) A2 A3, 
                                                          if
                                                           (param-class.requires-axiom
                                                             A4) 
                                                           (util.map.update
                                                             A0 
                                                             (cstr-graph.internal.add-lower-node
                                                               (cstr-graph.node.const
                                                                 (pc map4 
                                                                   map4))) 
                                                             A3 A5) (
                                                           A5 = A3)].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 170, column 0, characters 9524-10008: [1478] 
cstr-graph.instantiate.aux A3 A8 
 (cstr-graph.node.var (cstr-graph.ct.gref A7 A5 A12 A11) A0) A2 A13 :- 
 std.do!
  [(std.filter A0 (c0 \ c0 > 0) A1 ,
     std.fold A1 A2 (c0 \ c1 \ c2 \
      util.map.update c0 
       (cstr-graph.internal.remove-lower-node
         (cstr-graph.node.var (cstr-graph.ct.gref _ _ _ _) [A3])) c1 c2) A4), 
   annot.classes A5 A6 _, trocq.db.gref A7 A8 A9 A10 A11, !, 
   coq.env.global A10 A12, cstr-graph.instantiate.gref A0 A6 A9 A4 A13].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 184, column 0, characters 10149-10178: [1479] 
cstr-graph.instantiate.gref [] [] [] A0 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 185, column 0, characters 10180-10423: [1480] 
cstr-graph.instantiate.gref [-1 | A2] [A0 | A3] [A1 | A4] A5 A6 :- !, 
 A0 = A1, cstr-graph.instantiate.gref A2 A3 A4 A5 A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 190, column 0, characters 10425-10799: [1481] 
cstr-graph.instantiate.gref [A0 | A5] [_ | A6] [A1 | A7] A2 A8 :- std.do!
                                                                   [util.map.update
                                                                    A0 
                                                                    (cstr-graph.internal.add-lower-node
                                                                    (cstr-graph.node.const
                                                                    A1)) A2 
                                                                    A3, 
                                                                    util.map.update
                                                                    A0 
                                                                    (cstr-graph.internal.add-higher-node
                                                                    (cstr-graph.node.const
                                                                    A1)) A3 
                                                                    A4, 
                                                                    cstr-graph.instantiate.gref
                                                                    A5 A6 A7 
                                                                    A4 A8].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 197, column 0, characters 10801-11072: [1482] 
cstr-graph.instantiate.aux A1 A4 
 (cstr-graph.node.var cstr-graph.ct.geq [A0]) A2 A5 :- util.map.update A0 
                                                        (cstr-graph.internal.remove-lower-node
                                                          (cstr-graph.node.var
                                                            cstr-graph.ct.geq 
                                                            [A1])) A2 A3, 
 util.map.update A0 
  (cstr-graph.internal.add-lower-node (cstr-graph.node.const A4)) A3 A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 204, column 0, characters 11243-11487: [1483] 
cstr-graph.instantiation-order A0 A1 A4 :- cstr-graph.internal.to-precedence-graph
                                            A0 A1 A2, 
 simple-graph.toposort A2 A3, 
 std.assert! (A3 = some A4) the precedence graph is not acyclic.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 211, column 0, characters 11536-11603: [1484] 
cstr-graph.pp (constraint-graph A0) :- std.map.bindings A0 A1, 
 std.forall A1 cstr-graph.pp.aux.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 213, column 0, characters 11605-11791: [1485] 
cstr-graph.pp.aux (pr A0 (pr A1 A2)) :- logging.debug
                                         (, (coq.say [graph] id A0) 
                                           (coq.say [graph] higher than: A1) 
                                           (coq.say [graph] lower than: A2)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 222, column 0, characters 11867-11885: [1486] 
cstr-graph.internal.filter-const [] [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 223, column 0, characters 11887-11964: [1487] 
cstr-graph.internal.filter-const [cstr-graph.node.const A2 | A0] [A2 | A1] :- 
 cstr-graph.internal.filter-const A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 225, column 0, characters 11966-12039: [1488] 
cstr-graph.internal.filter-const [cstr-graph.node.var _ _ | A0] A1 :- 
 cstr-graph.internal.filter-const A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 229, column 0, characters 12088-12104: [1489] 
cstr-graph.internal.filter-var [] [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 230, column 0, characters 12106-12199: [1490] 
cstr-graph.internal.filter-var [cstr-graph.node.var _ A2 | A0] A3 :- 
 cstr-graph.internal.filter-var A0 A1, std.append A2 A1 A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 233, column 0, characters 12201-12262: [1491] 
cstr-graph.internal.filter-var [cstr-graph.node.const _ | A0] A1 :- cstr-graph.internal.filter-var
                                                                    A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 238, column 0, characters 12378-12425: [1492] 
cstr-graph.internal.add-higher-node A0 none (some (pr [] [A0])) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 239, column 0, characters 12427-12524: [1493] 
cstr-graph.internal.add-higher-node A0 (some (pr A1 A2)) 
 (some (pr A1 [A0 | A2])) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 243, column 0, characters 12643-12673: [1494] 
cstr-graph.internal.remove-higher-node _ none none :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 244, column 0, characters 12675-12896: [1495] 
cstr-graph.internal.remove-higher-node A0 (some (pr A3 A1)) A4 :- util.delete
                                                                   A0 A1 A2, 
 if (A3 = [] , A2 = []) (A4 = none) (A4 = some (pr A3 A2)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 252, column 0, characters 13011-13057: [1496] 
cstr-graph.internal.add-lower-node A0 none (some (pr [A0] [])) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 253, column 0, characters 13059-13155: [1497] 
cstr-graph.internal.add-lower-node A0 (some (pr A1 A2)) 
 (some (pr [A0 | A1] A2)) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 257, column 0, characters 13273-13302: [1498] 
cstr-graph.internal.remove-lower-node _ none none :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 258, column 0, characters 13304-13522: [1499] 
cstr-graph.internal.remove-lower-node A0 (some (pr A1 A3)) A4 :- util.delete
                                                                  A0 A1 A2, 
 if (A2 = [] , A3 = []) (A4 = none) (A4 = some (pr A2 A3)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 265, column 0, characters 13612-13844: [1500] 
cstr-graph.internal.to-precedence-graph A1 (constraint-graph A3) A5 :- 
 simple-graph.empty util.cmp-int A0, 
 std.fold A1 A0 simple-graph.add-node A2, std.map.bindings A3 A4, 
 std.fold A4 A2 cstr-graph.internal.to-precedence-graph.aux A5.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 269, column 0, characters 13846-13962: [1501] 
cstr-graph.internal.to-precedence-graph.aux (pr A2 (pr _ A0)) A1 A3 :- 
 std.fold A0 A1 (cstr-graph.internal.to-precedence-graph.aux2 A2) A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 271, column 0, characters 13964-14009: [1502] 
cstr-graph.internal.to-precedence-graph.aux2 _ (cstr-graph.node.const _) A0 
 A0 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraint-graph.elpi", line 272, column 0, characters 14011-14219: [1503] 
cstr-graph.internal.to-precedence-graph.aux2 A2 (cstr-graph.node.var _ A0) 
 A1 A3 :- std.fold A0 A1 (simple-graph.add-edge A2) A3.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 18, column 0, characters 1033-1155: [1504] 
cstr.init :- cstr-graph.empty A0, 
 declare_constraint (cstr.internal.c.vars []) [_], 
 declare_constraint (cstr.internal.c.graph A0) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 24, column 0, characters 1245-1413: [1505] 
cstr.univ-link A0 A1 A2 :- var A0, var A1, var A2, !, 
 logging.trace (coq.say [graph] univ-linking constraint A0 = A1 A2), 
 declare_constraint (cstr.internal.c.univ-link? A0 A1 A2) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 27, column 0, characters 1415-1612: [1506] 
cstr.univ-link A0 A1 A2 :- var A0, !, 
 logging.trace (coq.say [graph] univ-linking defining C = A1 A2), 
 trocq.db.term->map-class A1 A3, trocq.db.term->map-class A2 A4, 
 A0 = pc A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 30, column 0, characters 1614-1790: [1507] 
cstr.univ-link (pc A1 A3) A0 A2 :- logging.trace
                                    (coq.say [graph] univ-linking unfolding 
                                      A0 = A1 and A2 = A3), 
 trocq.db.map-class->term A1 A0, trocq.db.map-class->term A3 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 36, column 0, characters 1813-2036: [1508] 
cstr.dep-pi A0 A1 A2 :- var A0, !, 
 logging.trace (coq.say [constraints] Adding a dep-pi A0 A1 A2), 
 cstr.internal.link? A0 A3, cstr.internal.link? A1 A4, 
 cstr.internal.link? A2 A5, 
 declare_constraint (cstr.internal.c.dep-pi A3 A4 A5) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 42, column 0, characters 2038-2159: [1509] 
cstr.dep-pi A0 A1 A2 :- logging.trace
                         (coq.say [constraints] Adding a trivial dep-pi A0 
                           A1 A2), param-class.dep-pi A0 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 47, column 0, characters 2182-2414: [1510] 
cstr.dep-arrow A0 A1 A2 :- var A0, !, 
 logging.trace (coq.say [constraints] Adding a dep-arrow A0 A1 A2), 
 cstr.internal.link? A0 A3, cstr.internal.link? A1 A4, 
 cstr.internal.link? A2 A5, 
 declare_constraint (cstr.internal.c.dep-arrow A3 A4 A5) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 53, column 0, characters 2416-2546: [1511] 
cstr.dep-arrow A0 A1 A2 :- logging.trace
                            (coq.say
                              [constraints] Adding a trivial dep-arrow A0 A1 
                              A2), param-class.dep-arrow A0 A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 58, column 0, characters 2565-2769: [1512] 
cstr.dep-type A0 A1 :- var A0, !, 
 std.do!
  [logging.trace (coq.say [constraints] Adding a dep-type A0 A1), 
   cstr.internal.link? A0 A2, cstr.internal.link? A1 A3, 
   declare_constraint (cstr.internal.c.dep-type A2 A3) [_]].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 63, column 0, characters 2771-2935: [1513] 
cstr.dep-type A0 A3 :- logging.trace
                        (coq.say [constraints] Adding a trivial dep-type A0 
                          A1 A2), 
 util.when (param-class.requires-axiom A0) (cstr.geq A3 (pc map4 map4)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 69, column 0, characters 2962-3806: [1514] 
cstr.dep-gref A0 A1 A2 A3 :- logging.trace
                              (coq.say [constraints] Adding a dep-gref A0 A1 
                                A2 A3), annot.classes A1 A4 A5, 
 util.option.value A5 (pc map0 map0) A6, 
 logging.trace (coq.say [constraints] Got output class A6), 
 if (var A6) 
  (, (cstr.internal.link? A6 A7) (std.map A4 cstr.internal.link? A8) 
    (declare_constraint (cstr.internal.c.dep-gref A7 A0 A1 A2 A3 A8) [_])) 
  (, (trocq.db.gref A0 A6 A9 A10 A3) (!) (coq.env.global A10 A2) (!) 
    (std.forall2 A4 A9 cstr.eq)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 90, column 0, characters 3819-3988: [1515] 
cstr.geq A0 A1 :- var A0, var A1, !, cstr.internal.link? A0 A2, 
 cstr.internal.link? A1 A3, 
 util.unless (A2 = A3) 
  (declare_constraint (cstr.internal.c.geq (inl A2) (inl A3)) [_]).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 94, column 0, characters 3990-4095: [1516] 
cstr.geq A0 A2 :- var A0, !, cstr.internal.link? A0 A1, 
 declare_constraint (cstr.internal.c.geq (inl A1) (inr A2)) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 97, column 0, characters 4097-4202: [1517] 
cstr.geq A2 A0 :- var A0, !, cstr.internal.link? A0 A1, 
 declare_constraint (cstr.internal.c.geq (inr A2) (inl A1)) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 100, column 0, characters 4204-4240: [1518] 
cstr.geq A0 A1 :- param-class.geq A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 104, column 0, characters 4252-4284: [1519] 
cstr.eq A0 A1 :- cstr.geq A0 A1, cstr.geq A1 A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 107, column 0, characters 4351-4415: [1520] 
cstr.reduce-graph :- declare_constraint cstr.internal.c.reduce-graph [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 110, column 0, characters 4418-4474: [1521] 
cstr.local-db A0 :- declare_constraint (cstr.internal.c.db A0) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 127, column 0, characters 4939-4991: [1522] 
cstr.internal.vars? A0 :- !, 
 declare_constraint (cstr.internal.c.vars? A0) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 129, column 0, characters 5021-5073: [1523] 
cstr.internal.vars! A0 :- !, 
 declare_constraint (cstr.internal.c.vars! A0) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 142, column 0, characters 5458-5519: [1524] 
cstr.internal.link? A0 A1 :- var A0, !, 
 declare_constraint (cstr.internal.c.link? A0 A1) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 143, column 0, characters 5521-5533: [1525] 
cstr.internal.link? _ -1 :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 145, column 0, characters 5655-5706: [1526] 
cstr.internal.link- A0 A1 :- declare_constraint
                              (cstr.internal.c.link- A0 A1) [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 173, column 0, characters 6570-6633: [1527] 
cstr.internal.univ-link- A0 A1 A2 :- declare_constraint
                                      (cstr.internal.c.univ-link- A0 A1 A2) 
                                      [_].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 254, column 0, characters 9695-9709: [1528] 
cstr.internal.reduce [] _ [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 255, column 0, characters 9711-10199: [1529] 
cstr.internal.reduce [A0 | A5] A1 [pr A0 A2 | A6] :- std.do!
                                                      [cstr-graph.minimal-class
                                                        A0 A1 A2, 
                                                       logging.trace
                                                        (coq.say
                                                          [graph] min value 
                                                          A2 for A0), 
                                                       cstr-graph.maximal-class
                                                        A0 A1 A3, 
                                                       logging.trace
                                                        (coq.say
                                                          [graph] max value 
                                                          A3 for A0), 
                                                       util.unless
                                                        (param-class.geq A3 
                                                          A2) 
                                                        (coq.error
                                                          no solution for variable 
                                                          A0), 
                                                       (cstr-graph.instantiate
                                                         A0 A2 A1 A4 ,
                                                         cstr.internal.reduce
                                                          A5 A4 A6)].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/constraints/constraints-impl.elpi", line 266, column 0, characters 10279-10515: [1530] 
cstr.internal.instantiate-coq (pr A0 (pc A1 A2)) :- std.do!
                                                     [logging.trace
                                                       (coq.say
                                                         [graph] instantiating 
                                                         A0 with (pc A1 A2)), 
                                                      cstr.internal.link- A3 
                                                       A0, 
                                                      cstr.internal.univ-link-
                                                       A3 A4 A5, 
                                                      trocq.db.map-class->term
                                                       A1 A4, 
                                                      trocq.db.map-class->term
                                                       A2 A5, A3 = pc A1 A2].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 21, column 0, characters 1366-1411: [1531] 
param-class.forget (pc A0 A1) (pc A0 A1) c0 \ c1 \ c2 \ c3 \ c3 :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 22, column 0, characters 1413-1765: [1532] 
param-class.forget (pc A3 A0) (pc A3 A4) A11 :- !, 
 map-class.weakenings-from A0 A1, std.mem A1 A2, 
 param-class.forget (pc A3 A2) (pc A3 A4) A5, !, map-class.to_string A3 A6, 
 map-class.to_string A0 A7, map-class.to_string A2 A8, 
 calc (forget_ ^ A6 ^ A7 ^ _ ^ A6 ^ A8) A9, coq.locate A9 A10, 
 A11 = (c0 \ c1 \ c2 \ c3 \ A5 c0 c1 c2 (app [pglobal A10 c0, c1, c2, c3])).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 29, column 0, characters 1767-2118: [1533] 
param-class.forget (pc A0 A3) (pc A4 A5) A12 :- map-class.weakenings-from A0 
                                                 A1, std.mem A1 A2, 
 param-class.forget (pc A2 A3) (pc A4 A5) A6, !, map-class.to_string A3 A7, 
 map-class.to_string A0 A8, map-class.to_string A2 A9, 
 calc (forget_ ^ A8 ^ A7 ^ _ ^ A9 ^ A7) A10, coq.locate A10 A11, 
 A12 = (c0 \ c1 \ c2 \ c3 \ A6 c0 c1 c2 (app [pglobal A11 c0, c1, c2, c3])).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 42, column 0, characters 2359-2558: [1534] 
param-class.weaken-out A3 A0 A5 :- std.do!
                                    [coq.env.global A0 A1, 
                                     coq.env.typeof A0 A2, 
                                     param-class.replace-out-ty A3 A2 A4, 
                                     std.assert-ok!
                                      (coq.elaborate-skeleton A1 A4 A5) 
                                      weaken-out: failed to weaken].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 51, column 0, characters 2612-2706: [1535] 
param-class.replace-out-ty A0 (prod A3 A4 A1) (prod A3 A4 A2) :- !, 
 pi c0 \ param-class.replace-out-ty A0 (A1 c0) (A2 c0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 53, column 0, characters 2708-2889: [1536] 
param-class.replace-out-ty A4 A0 A6 :- std.do!
                                        [coq.safe-dest-app A0 A1 A2, 
                                         trocq.db.gref->class A3 A4, 
                                         subst-gref A1 A3 A5, 
                                         coq.mk-app A5 A2 A6].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 62, column 0, characters 2983-3122: [1537] 
param-class.type->class A0 [A4] A2 :- coq.safe-dest-app A0 A1 A2, 
 do-not-fail => coq.term->gref A1 A3, trocq.db.gref->class A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 66, column 0, characters 3124-3171: [1538] 
param-class.type->class A0 [] A1 :- coq.safe-dest-app A0 _ A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 67, column 0, characters 3173-3192: [1539] 
param-class.type->class _ [] [] :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 70, column 0, characters 3266-3471: [1540] 
param-class.type->classes.rec (prod A8 A0 A3) A7 A5 :- !, 
 pi c0 \
  decl c0 A8 A0 =>
   (, (param-class.type->classes.rec A0 A1 A2) (!) 
     (param-class.type->classes.rec (A3 c0) A4 A5) (!) 
     (std.append A1 A2 (A6 c0) , std.append (A6 c0) A4 A7)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 75, column 0, characters 3473-3529: [1541] 
param-class.type->classes.rec A0 [] A1 :- !, param-class.type->class A0 A1 _.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 78, column 0, characters 3620-3842: [1542] 
param-class.type->classes.main (prod A10 A0 A3) A9 A5 A6 A7 :- !, 
 pi c0 \
  decl c0 A10 A0 =>
   (, (param-class.type->classes.rec A0 A1 A2) (!) 
     (param-class.type->classes.main (A3 c0) A4 A5 A6 A7) (!) 
     (std.append A1 A2 (A8 c0) , std.append (A8 c0) A4 A9)).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 83, column 0, characters 3844-3992: [1543] 
param-class.type->classes.main A0 [] A1 A5 A6 :- !, 
 param-class.type->class A0 A1 A2, !, std.rev A2 [A3, A4 | _], 
 coq.term->gref A4 A5, coq.term->gref A3 A6.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param-class-util.elpi", line 89, column 0, characters 4073-4231: [1544] 
param-class.type->classes A0 A5 A1 A3 A4 :- param-class.type->classes.main
                                             A0 A1 A2 A3 A4, 
 if (A2 = [A5]) true (A5 = pc map0 map0).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 36, column 0, characters 1823-2457: [1546] 
param (global A0) A1 A2 A4 :- !, 
 logging.debug (coq.say [param/const] A0 @ A1), 
 if fresh-type (cstr.dep-gref A0 A1 A2 A3 , A4 = pglobal A3 _) 
  (std.do!
    [annot.typecheck (global A0) A5, annot.sub-type A5 A1, 
     cstr.dep-gref A0 A5 A2 A3, weakening A5 A1 (wfun A6), 
     A4 = A6 (pglobal A3 _)]).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 56, column 0, characters 2488-2829: [1547] 
param (pglobal A0 A5) A1 A2 A4 :- !, 
 logging.debug (coq.say [param/const] A0 @ A1), 
 if fresh-type (cstr.dep-gref A0 A1 A2 A3 , A4 = pglobal A3 A5) 
  (, (annot.typecheck (pglobal A0 A5) A6) (annot.sub-type A6 A1) 
    (cstr.dep-gref A0 A6 A2 A3) (weakening A6 A1 (wfun A7)) 
    (A4 = A7 (pglobal A3 A5))).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 70, column 0, characters 2855-3127: [1548] 
param A0 A1 A4 (A7 A5) :- name A0, !, 
 logging.debug (coq.term->string A1 A2 , coq.say [param/var] A0 @ A2), 
 param.store A0 A3 A4 A5, !, 
 logging.trace
  (coq.term->string A3 A6 , coq.say [param/var] found A0 @ A6 ~ A4 by A5), 
 annot.sub-type A3 A1, !, weakening A3 A1 (wfun A7).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 78, column 0, characters 3142-4301: [1549] 
param (as (app [pglobal (const A0) A7, A1, A2]) A17) (app [_, A3, A4]) A17 
 (app [pglobal (const A13) A12 | A16]) :- trocq.db.ptype A0 ;
                                           trocq.db.pprop A0, !, 
 std.do!
  [logging.debug (coq.say [param/type] A1 A2 @ A3 A4), 
   cstr.univ-link A5 A1 A2, 
   logging.trace (coq.say [param/type] A1 A2 is linked to A5), 
   cstr.univ-link A6 A3 A4, 
   logging.trace (coq.say [param/type] A3 A4 is linked to A6), 
   cstr.dep-type A6 A5, 
   logging.trace (coq.say [param/type] added dep-type from A6 to A5), 
   coq.univ-instance A7 [A8], coq.univ.variable A9 A8, 
   ((coq.univ.alg-super A9 A10 , coq.univ.variable A10 A11) ,
     coq.univ-instance A12 [A8, A11]), trocq.db.pparam-type A6 A13, 
   logging.trace (coq.say [param/type] suspending proof on A6), 
   util.if-suspend A6 (param-class.requires-axiom A6) 
    (,
      (logging.trace
        (coq.say [param/type] resuming proof on A6 (univalence needed))) 
      (coq.univ-instance A14 []) 
      (trocq.db.univalence A15 , A16 = [A1, A2, pglobal (const A15) A14])) 
    (logging.trace
      (coq.say [param/type] resuming proof on A6 (univalence not needed)) ,
      A16 = [A1, A2])].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 113, column 0, characters 4554-5467: [1550] 
param (fun A0 A1 A12) A2 (fun A6 A10 A13) A17 :- !, 
 logging.debug (coq.say [param/fun] A0 : A1 @ A2), coq.term->string A2 A3, 
 std.string.concat   [type not convertible to Π:, A3] A4, 
 std.assert-ok! (coq.unify-eq A2 (prod _ A1 A5)) A4, 
 coq.name-suffix A0 ' A6, coq.name-suffix A0 R A7, 
 trocq.db.map-class->term map0 A8, trocq.db.ptype A9, 
 param A1 (app [pglobal (const A9) _, A8, A8]) A10 A11, !, 
 logging.trace (coq.say [param/fun] A1 @ 0,0 ~ A10 by A11), 
 pi c0 \
  [annot.adecl c0 A0 A1, decl c0 A0 A1] =>
   pi c1 \
    pi c2 \
     param.store c0 A1 c1 c2 =>
      (,
        (logging.trace (coq.say [param/fun] introducing c0 @ A1 ~ c1 by c2)) 
        (param (A12 c0) (A5 c0) (A13 c1) (A14 c0 c1 c2)) 
        (logging.trace
          (coq.say [param/fun] (A12 c0) @ (A5 c0) ~ (A13 c1) by 
            (A14 c0 c1 c2)))), trocq.db.r (pc map0 map0) A15, prune A16 [], 
 A17 =
  fun A0 A1 c0 \
   fun A6 A10 c1 \
    fun A7 (app [pglobal (const A15) A16, A1, A10, A11, c0, c1]) c2 \
     A14 c0 c1 c2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 133, column 0, characters 5483-7236: [1551] 
param (prod _ A1 c0 \ A3) (app [pglobal (const A0) _, A5, A6]) 
 (prod `_` A15 c0 \ A19) (app [pglobal (const A21) A22 | A25]) :- trocq.db.ptype
                                                                   A0 ;
                                                                   trocq.db.pprop
                                                                    A0, !, 
 std.do!
  [logging.debug
    (coq.term->string A1 A2 ,
      coq.term->string A3 A4 , coq.say [param/arrow] A2 -> A4 @ A5 A6), 
   cstr.univ-link A7 A5 A6, 
   logging.trace (coq.say [param/arrow] A5 A6 is linked to A7), 
   cstr.dep-arrow A7 A8 A9, 
   logging.trace (coq.say [param/arrow] added dep-arrow from A7 to A8 and A9), 
   cstr.univ-link A8 A10 A11, 
   logging.trace (coq.say [param/arrow] A10 A11 is linked to A8), 
   std.assert-ok! (coq.typecheck A1 A12) param/arrow: cannot typecheck A, 
   if (A12 = sort prop) (trocq.db.pprop A13) (trocq.db.ptype A13), 
   A14 = app [pglobal (const A13) _, A10, A11], param A1 A14 A15 A16, 
   cstr.univ-link A9 A17 A18, 
   logging.trace (coq.say [param/arrow] A17 A18 is linked to A9), 
   param A3 (app [pglobal (const A0) _, A17, A18]) A19 A20, 
   logging.trace (coq.say [param/arrow] A3 @ A17 A18 ~ A19 by A20), 
   logging.trace (coq.say [param/arrow] before db param-arrow A7), 
   trocq.db.param-arrow A7 A21, logging.trace (coq.say [param/arrow] A22), 
   prune A22 [], 
   logging.trace (coq.say [param/arrow] suspending proof on A7), 
   util.if-suspend A7 (param-class.requires-axiom A7) 
    (,
      (logging.trace
        (coq.say [param/arrow] resuming proof on A7 (funext needed))) 
      (coq.univ-instance A23 []) 
      (trocq.db.funext A24 ,
        A25 = [pglobal (const A24) A23, A1, A15, A16, A3, A19, A20])) 
    (logging.trace
      (coq.say [param/arrow] resuming proof on A7 (funext not needed)) ,
      A25 = [A1, A15, A16, A3, A19, A20])].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 168, column 0, characters 7249-9748: [1552] 
param (prod A3 A1 A4) (app [pglobal (const A0) _, A5, A6]) (prod A7 A17 A21) 
 (app [pglobal (const A26) A27 | A30]) :- trocq.db.ptype A0 ;
                                           trocq.db.pprop A0, !, 
 std.do!
  [logging.debug
    (coq.term->string A1 A2 , coq.say [param/forall] A3 : A2 , A4 @ A5 A6), 
   coq.name-suffix A3 ' A7, coq.name-suffix A3 R A8, 
   cstr.univ-link A9 A5 A6, !, 
   logging.trace (coq.say [param/forall] A5 A6 is linked to A9), 
   cstr.dep-pi A9 A10 A11, !, 
   logging.trace
    (coq.say [param/forall]: added dep-pi from A9 to A10 and A11), 
   cstr.univ-link A10 A12 A13, !, 
   logging.trace (coq.say [param/forall] A12 A13 is linked to A10), 
   std.assert-ok! (coq.typecheck A1 A14) param/arrow: cannot typecheck A, 
   if (A14 = sort prop) (trocq.db.pprop A15) (trocq.db.ptype A15), 
   A16 = app [pglobal (const A15) _, A12, A13], param A1 A16 A17 A18, 
   cstr.univ-link A11 A19 A20, !, 
   logging.trace (coq.say [param/forall] A19 A20 is linked to A11), 
   pi c0 \
    [annot.adecl c0 A3 A1, decl c0 A3 A1] =>
     pi c1 \
      pi c2 \
       param.store c0 A1 c1 c2 =>
        std.do!
         [logging.trace
           (coq.say [param/forall] introducing c0 @ A1 ~ c1 by c2), 
          param (A4 c0) (app [pglobal (const A0) _, A19, A20]) (A21 c1) 
           (A22 c0 c1 c2), 
          logging.trace
           (coq.say [param/forall] (A4 c0) @ A19 A20 ~ (A21 c1) by 
             (A22 c0 c1 c2))], trocq.db.r A10 A23, !, 
   logging.trace (coq.say [param/forall] db A10 A23), !, prune A24 [], 
   A25 =
    [A1, A17, A18, fun A3 A1 A4, fun A7 A17 A21, 
     fun A3 A1 c0 \
      fun A7 A17 c1 \
       fun A8 (app [pglobal (const A23) A24, A1, A17, A18, c0, c1]) c2 \
        A22 c0 c1 c2], trocq.db.param-forall A9 A26, prune A27 [], 
   logging.trace (coq.say [param/forall] suspending proof on A9), 
   util.if-suspend A9 (param-class.requires-axiom A9) 
    (,
      (logging.trace
        (coq.say [param/forall] resuming proof on A9 (funext needed))) 
      (coq.univ-instance A28 []) 
      (trocq.db.funext A29 , A30 = [pglobal (const A29) A28 | A25])) 
    (logging.trace
      (coq.say [param/forall] resuming proof on A9 (funext not needed)) ,
      A30 = A25)].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 218, column 0, characters 9807-10105: [1553] 
param (app [A0 | A1]) A2 (app [A4 | A6]) (A8 A9) :- std.do!
                                                     [logging.debug
                                                       (coq.say [param/app] 
                                                         A0 A1 @ A2), 
                                                      annot.typecheck A0 A3, 
                                                      fresh-type =>
                                                       param A0 A3 A4 A5, 
                                                      logging.trace
                                                       (coq.say [param/app] 
                                                         A0 @ A3 ~ A4 by A5), 
                                                      param.args A3 A2 A1 A6 
                                                       A7 A8, 
                                                      coq.subst-fun A7 A5 A9].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 228, column 0, characters 10195-10281: [1554] 
param.args A0 A1 [] [] [] A2 :- std.do!
                                 [annot.sub-type A0 A1, 
                                  weakening A0 A1 (wfun A2)].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 231, column 0, characters 10283-10540: [1555] 
param.args A0 A8 [A5 | A9] [A6 | A10] [A5, A6, A7 | A11] A12 :- !, 
 coq.term->string A0 A1, 
 std.string.concat   [type not convertible to Π:, A1] A2, 
 std.assert-ok! (coq.unify-eq A0 (prod _ A3 A4)) A2, !, param A5 A3 A6 A7, 
 !, param.args (A4 A5) A8 A9 A10 A11 A12.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 237, column 0, characters 10543-10606: [1556] 
param A0 A1 _ _ :- coq.error unsupported combination: A0 & A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 250, column 0, characters 11079-11437: [1557] 
weakening (app [pglobal (const A0) _, A5, A6]) 
 (app [pglobal (const A0) _, A7, A8]) A4 :- trocq.db.ptype A0 ;
                                             trocq.db.pprop A0, !, 
 trocq.db.weaken A1, prune A2 [], prune A3 [], 
 A4 = wfun c0 \ app [pglobal (const A1) A2, A5, A6, A7, A8, A3, c0].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 257, column 0, characters 11439-11750: [1558] 
weakening (prod A0 A4 A6) (prod _ A3 A7) A11 :- !, coq.name-suffix A0 ' A1, 
 coq.name-suffix A0 R A2, weakening A3 A4 (wfun A5), 
 pi c0 \
  pi c1 \
   pi c2 \
    pi c3 \
     , (weakening (A6 c1) (A7 c2) (wfun (A8 c1 c2))) (prune A9 []) 
      (prune A10 []) 
      (A11 =
        wfun c4 \
         fun A0 A4 c5 \
          fun A1 A10 c6 \ fun A2 A9 c7 \ A8 c5 c6 (app [c4, c5, c6, A5 c7])).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 266, column 0, characters 11752-11851: [1559] 
weakening (app [A0 | _]) (app [_ | _]) (wfun c0 \ c0) :- name A0 ;
                                                          A0 = global _ ;
                                                           A0 = pglobal _ _, 
 !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 267, column 0, characters 11853-12004: [1560] 
weakening (app [A0, A4 | A5]) (app [A1, A7 | A8]) A10 :- !, 
 weakening A0 A1 (wsuspend A2 A3), coq.mk-app (A2 A4) A5 A6, 
 coq.mk-app (A3 A7) A8 A9, weakening A6 A9 A10.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 270, column 0, characters 12006-12061: [1561] 
weakening (fun _ _ A0) (fun _ _ A1) (wsuspend A0 A1) :- !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 271, column 0, characters 12063-12140: [1562] 
weakening A0 _ (wfun c0 \ c0) :- name A0 ; A0 = global _ ; A0 = pglobal _ _, 
 !.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 272, column 0, characters 12142-12185: [1563] 
weakening A0 _ _ :- coq.error weakening: A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 276, column 0, characters 12288-12475: [1564] 
param.subst-weaken A1 A2 :- trocq.db.weaken A0, 
 pi c0 \
  pi c1 \
   copy (as (app [pglobal (const A0) _, _, _, _, _, _, _]) c0) c1 :-
    ! , copy.subst-weaken c0 c1 => copy A1 A2.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/param.elpi", line 282, column 0, characters 12516-12784: [1565] 
copy.subst-weaken (app [_, A0, A2, A4, A6, _, A9]) A11 :- trocq.db.term->map-class
                                                           A0 A1, 
 trocq.db.term->map-class A2 A3, trocq.db.term->map-class A4 A5, 
 trocq.db.term->map-class A6 A7, 
 param-class.forget (pc A1 A3) (pc A5 A7) A8, copy A9 A10, 
 A11 = A8 _ _ _ A10.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 27, column 0, characters 1654-1712: [1567] 
subst-gref (global _) A0 A1 :- !, coq.env.global A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 28, column 0, characters 1714-1794: [1568] 
subst-gref (pglobal _ A2) A0 A1 :- !, 
 get-option coq:uinstance A2 => coq.env.global A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 30, column 0, characters 1796-1843: [1569] 
subst-gref A0 _ _ :- coq.error A0 is not a gref.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 33, column 0, characters 1886-2056: [1570] 
subst-univ A0 A3 A4 :- coq.univ.variable A0 A1, coq.univ-instance A2 [A1], 
 (copy (sort (typ _)) (sort (typ A0)) ,
   pi c0 \ copy (pglobal c0 _) (pglobal c0 A2)) => copy A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 40, column 0, characters 2126-2190: [1571] 
coq.gref.list->string-map [] A0 :- std.string.map.empty A0.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 41, column 0, characters 2192-2313: [1572] 
coq.gref.list->string-map [A0 | A2] A4 :- coq.gref->id A0 A1, 
 coq.gref.list->string-map A2 A3, std.string.map.add A1 A0 A3 A4.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 45, column 0, characters 2389-2560: [1573] 
coq.gref.string-map.domain A0 A3 :- std.do!
                                     [std.string.map.bindings A0 A1, 
                                      std.map A1 (c0 \ c1 \ c0 = pr c1 _) A2, 
                                      std.string.list->set A2 A3].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 54, column 0, characters 2621-2665: [1574] 
util.argument->gref (str A0) A1 :- coq.locate A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 55, column 0, characters 2667-2715: [1575] 
util.argument->gref (trm A0) A1 :- coq.term->gref A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 69, column 0, characters 3242-4039: [1576] 
util.named-coe A0 A2 A14 A15 :- A0 = indt A1, A2 = indt A3, !, 
 std.do!
  [coq.env.projections A1 A4, coq.env.projections A3 A5, 
   std.map A4 (c0 \ c1 \ sigma c2 \ c0 = some c2 , c1 = const c2) A6, 
   std.map A5 (c0 \ c1 \ sigma c2 \ c0 = some c2 , c1 = const c2) A7, 
   coq.gref.list->string-map A6 A8, coq.gref.list->string-map A7 A9, 
   coq.gref.string-map.domain A8 A10, coq.gref.string-map.domain A9 A11, 
   std.assert! (std.string.set.subset A11 A10) 
    The second record names is not a subset of the first one names, 
   coq.env.indt A1 _ _ _ A12 _ _, coq.env.indt A3 _ _ _ _ [A13] _, 
   util.named-coe.rec (indt A1) A8 A7 [] (indc A13) A12 A14 A15].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 86, column 0, characters 4041-4133: [1577] 
util.named-coe A0 A1 _ _ :- coq.error
                             Either of the following are not records:  A0 A1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 91, column 0, characters 4245-4478: [1578] 
util.named-coe.rec A0 A1 A2 A3 A4 (prod A9 A10 A5) (fun A9 A10 A6) A8 :- 
 pi c0 \
  decl c0 A9 A10 =>
   (util.named-coe.rec A0 A1 A2 [c0 | A3] A4 (A5 c0) (A6 c0) A7 ,
     A8 is A7 + 1).
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 98, column 0, characters 4481-5095: [1579] 
util.named-coe.rec A2 A6 A5 A0 A7 _ (fun `src` A4 A10) 0 :- !, 
 std.rev A0 A1, coq.env.global A2 A3, coq.mk-app A3 A1 A4, 
 pi c0 \
  decl c0 `src` A4 =>
   sigma c1 \
    sigma c2 \
     sigma c3 \
      std.do!
       [std.append A1 [c0] c1, 
        std.map A5 (c4 \ c5 \
         sigma c6 \ coq.gref->id c4 c6 , std.string.map.find c6 A6 c5) c2, 
        std.map c2 (c4 \ c5 \
         sigma c6 \ coq.env.global c4 c6 , coq.mk-app c6 c1 c5) c3, 
        (coq.env.global A7 (A8 c0) ,
          std.append A1 c3 (A9 c0) , coq.mk-app (A8 c0) (A9 c0) (A10 c0))].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 113, column 0, characters 5151-5736: [1580] 
util.add-named-coe A11 A0 A2 A12 :- coq.env.univpoly? A0 A1, 
 coq.env.univpoly? A2 A3, A1 = A3, A1 = 1, !, 
 std.do!
  [util.named-coe A0 A2 A4 A5, 
   std.assert-ok! (coq.elaborate-skeleton A4 _ A6) ill-typed coercion, 
   coq.univ.new A7, coq.univ.variable A7 A8, subst-univ A7 A6 A9, 
   get-option coq:keepunivs tt =>
    std.assert-ok! (coq.typecheck A9 A10) wrong universes, 
   get-option coq:udecl (upoly-decl [A8] ff [] tt) =>
    coq.env.add-const A11 A9 A10 ff A12, 
   get-option coq:locality global =>
    coq.coercion.declare (coercion (const A12) A5 A0 (grefclass A2))].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/util-rocq.elpi", line 128, column 0, characters 5738-5868: [1581] 
util.add-named-coe _ A0 A1 _ :- coq.error A0 and A1 
                                 do not have the same number of universe variables, or is different from 1.
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 21, column 0, characters 1094-1207: [1584] 
known->gref (trocq.db.known-gref _ A0 A1 A2 A3 A4) 
 (trocq.db.gref A0 A1 A2 A3 A4 :- !) :- .
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 26, column 0, characters 1245-1397: [1585] 
load-rel A0 A2 :- std.do!
                   [std.findall (trocq.db.known-gref A0 _ _ _ _ _) A1, 
                    std.map A1 known->gref A2].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 34, column 0, characters 1441-1527: [1586] 
load-rels A0 A2 :- std.do! [std.map A0 load-rel A1, std.flatten A1 A2].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 39, column 0, characters 1530-2547: [1587] 
solve A0 A18 :- std.do!
                 [A0 = goal _ _ A1 _ A2, 
                  std.assert-ok! (coq.typecheck A1 A3) goal ill-typed, 
                  logging.info (coq.say [solve] translating args A2), 
                  std.map A2 util.argument->gref A4, 
                  logging.info (coq.say [solve] loading rels A4), 
                  load-rels A4 A5, 
                  logging.info (coq.say [solve] local DB A5), 
                  logging.info
                   (coq.term->string A1 A6 , coq.say [solve] goal A6), 
                  translate-goal A5 A3 A1 (pc map0 map1) A7 A8, 
                  logging.info
                   (coq.term->string A1 A9 ,
                     coq.term->string A7 A10 ,
                      coq.term->string A8 A11 ,
                       coq.say [solve] trocq: A9 ~ A10 by A11), 
                  A12 =
                   app
                    [pglobal (const «comap») A13, A1, A7, A8, 
                     let `self` A7 A14 c0 \ c0], 
                  logging.info
                   (coq.term->string A12 A15 , coq.say [solve] A15), 
                  std.assert-ok! (coq.elaborate-skeleton A12 A1 A16) 
                   proof elaboration error, 
                  std.assert-ok! (coq.typecheck A16 A17) 
                   proof typechecking error, 
                  std.assert-ok! (coq.unify-leq A17 A1) 
                   goal unification error, refine.no_check A16 A0 A18].
% File "/home/mysaa/Documents/Arbeiten/StagePLR2/trocq/elpi/tactic.elpi", line 63, column 0, characters 2630-4546: [1588] 
translate-goal A17 A0 A9 (pc A4 A6) A13 A18 :- A17 =>
                                                std.do!
                                                 [cstr.init, 
                                                  if (A0 = sort prop) 
                                                   (trocq.db.pprop A1 ,
                                                     A2 =
                                                      pglobal (const A1) _ ;
                                                     coq.error
                                                      Prop goals are not supported when using the HoTT variant.) 
                                                   (trocq.db.ptype A3 ,
                                                     A2 =
                                                      pglobal (const A3) _), 
                                                  (trocq.db.map-class->term
                                                    A4 A5 ,
                                                    trocq.db.map-class->term
                                                     A6 A7 ,
                                                     A8 = app [A2, A5, A7]), 
                                                  term->annot-term A9 A10, 
                                                  logging.debug
                                                   ((coq.term->string A10 A11
                                                      ,
                                                      coq.term->string A8 A12
                                                       ,
                                                       coq.say
                                                        [translate-goal] will translate 
                                                        A11 at level A12) ,
                                                     coq.say
                                                      ***********************************************************************************), 
                                                  param A10 A8 A13 A14, 
                                                  logging.debug
                                                   (,
                                                     (coq.say
                                                       ***********************************************************************************) 
                                                     (coq.say
                                                       [translate-goal] after translation:) 
                                                     (coq.term->string A13 
                                                       A15 ,
                                                       coq.say
                                                        [translate-goal] goal: 
                                                        A15) 
                                                     (coq.term->string A14 
                                                       A16 ,
                                                       coq.say
                                                        [translate-goal] proof: 
                                                        A16) 
                                                     (coq.say
                                                       ***********************************************************************************)), 
                                                  cstr.local-db A17, 
                                                  cstr.reduce-graph, 
                                                  param.subst-weaken A14 A18, 
                                                  logging.debug
                                                   (,
                                                     (coq.say
                                                       ***********************************************************************************) 
                                                     (coq.say
                                                       [translate-goal] after reduction:) 
                                                     (coq.term->string A13 
                                                       A19 ,
                                                       coq.say
                                                        [translate-goal] goal: 
                                                        A19) 
                                                     (coq.term->string A18 
                                                       A20 ,
                                                       coq.say
                                                        [translate-goal] proof: 
                                                        A20) 
                                                     (coq.say
                                                       ***********************************************************************************))].
