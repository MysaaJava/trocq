%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:before "coq-assign-evar-raw"
evar _ _ _ :- !.

:before "coq-assign-evar-refined"
evar _ _ _ :- !.

pred known->gref i:prop, o:prop.
known->gref
  (trocq.db.known-gref _Rel GR OutCl Classes GR' GRR)
  (trocq.db.gref GR OutCl Classes GR' GRR :- !).

pred load-rel i:gref, o:list prop.
load-rel GRRel DB :- std.do! [
  std.findall
    (trocq.db.known-gref GRRel _GR _OutCl _Classes _GR' _GRR)
    AllRel,
  std.map AllRel known->gref DB
].

pred load-rels i:list gref, o:list prop.
load-rels GRRels DB :- std.do! [
  std.map GRRels load-rel DBs,
  std.flatten DBs DB
].

pred parse-goal i:goal, o:term, o: term, o:term, o:list gref.
parse-goal Goal _ _ _ _ :- logging.info (coq.say "[solve] trying to solve goal" Goal), fail.
% trocq to G with A B C.
parse-goal Goal G Ty G' Rels :-
  Goal = goal _Context _ G _ [(str "to"),RG',(str "with")|RRels], !,
  std.assert-ok! (coq.typecheck G Ty) "goal ill-typed",
  std.map RRels util.argument->gref Rels,
  util.argument->term RG' G'.
% trocq to G.
parse-goal Goal G Ty G' [] :-
  Goal = goal _Context _ G _ [(str "to"),RG'], !,
  std.assert-ok! (coq.typecheck G Ty) "goal ill-typed",
  util.argument->term RG' G'.
% trocq with A B C.
parse-goal Goal G Ty G' Rels :-
  Goal = goal _Context _ G _ [(str "with")|RRels], !,
  std.assert-ok! (coq.typecheck G Ty) "goal ill-typed",
  std.map RRels util.argument->gref Rels.
% trocq.
parse-goal Goal G Ty _ [] :-
  Goal = goal _Context _ G _ [], !,
  logging.trace (coq.say "[parse-goal] No arguments"),
  std.assert-ok! (coq.typecheck G Ty) "goal ill-typed".
parse-goal Goal _ _ _ _ :- !,
  coq.error "Wrong usage of trocq tactic",
  fail.

solve InitialGoal NewGoals :- std.do! [
  % parse-goal InitialGoal G Ty G' GRArgs,
  InitialGoal = goal _Context _ G _ [],
  std.assert-ok! (coq.typecheck G Ty) "goal ill-typed",
  GRArgs = [],
  logging.info (coq.say "loading rels" GRArgs),
  load-rels GRArgs DB,
  logging.info (coq.say "local DB" DB),
  logging.info (coq.say "goal" {coq.term->string G}),
  coq.say "objective" {coq.term->string G'},
  translate-goal DB Ty G (pc map0 map1) G' GR,
  % logging.info (
  %   coq.say "trocq:" {coq.term->string G} "~" {coq.term->string G'}
  %     "by" {coq.term->string GR}
  % ),
  FinalProof = {{ @comap lp:G lp:G' lp:GR (_ : lp:G') }},
  % logging.info (coq.say {coq.term->string FinalProof}),

  std.assert-ok! (coq.elaborate-skeleton FinalProof G EFinalProof) "proof elaboration error",
  std.assert-ok! (coq.typecheck EFinalProof G2) "proof typechecking error",
  std.assert-ok! (coq.unify-leq G2 G) "goal unification error",
  refine.no_check EFinalProof InitialGoal NewGoals
].

pred translate-goal i:list prop, i:term, i:term, i:param-class, o:term, o:term.
translate-goal DB Ty G (pc M N) G' GR' :- DB => std.do! [
  cstr.init,
  if (Ty = sort prop)
    (SortAnnotation = pglobal (const {trocq.db.pprop}) _;
      coq.error "Prop goals are not supported when using the HoTT variant.")
    (SortAnnotation = pglobal (const {trocq.db.ptype}) _),
  T = app [SortAnnotation, {trocq.db.map-class->term M}, {trocq.db.map-class->term N}],
  % first annotate the initial goal with fresh parametricity class variables
  term->annot-term G AG,
  logging.debug (
    coq.say "will translate" AG "at level" T,
    coq.say "***********************************************************************************"
  ),
  % generate the associated goal G' and witness GR
  param AG T G' GR,
  logging.debug (
    coq.say "***********************************************************************************",
    coq.say "after translation:",
    coq.say "goal:" G',
    coq.say "proof:" GR,
    coq.say "***********************************************************************************"
  ),
  % reduce the graph, so the variables all become ground in the terms
  cstr.local-db DB,
  cstr.reduce-graph,
  % now we can remove the weaken placeholders and replace them with real weakening functions
  % or nothing if it is weaken α α
  param.subst-weaken GR GR',
  logging.debug (
    coq.say "***********************************************************************************",
    coq.say "after reduction:",
    coq.say "goal:" {coq.term->string G'},
    coq.say "proof:" {coq.term->string GR'},
    coq.say "***********************************************************************************"
  )
  % no need to remove the remaining annotations because they are invisible modulo conversion
].

